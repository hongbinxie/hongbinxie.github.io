<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>02-Typora</title>
    <url>/2020/03/29/02-Typora/</url>
    <content><![CDATA[<p>有导出成各种类型文件功能。</p>
<p>markdown编辑器支持插入HTML5，可以把HTML5放进来、很多网站的api嵌入到里面。</p>
<a id="more"></a>

<p>图床：简书也有</p>
<p>也可以在csdn里编辑，然后复制或保存草稿来做笔记。</p>
<p>具体看教程，不需都记住只需要在用时复制过来.</p>
<p>可一键复制粘贴，去跨平台发布。甚至还可以一键到邮件里，比如qq邮箱。注意：各平台对markdown的语法支持略微不同：知乎、简书不支持目录</p>
<p>markdown是标记语言，可以用标签的形式来组织排版。而typora就是标记语言编辑器，比富文本编辑器word这些要去麻烦地排版，省去了排版而只需写文章即可。</p>
<p>怎样一步发到微信公众号里？关注微信公众号：人工智能小技巧 里回复“公众号格式工具”会出个工具，转换格式，复制到微信公众号后台里</p>
<p>（基础部分）</p>
<h1 id="嵌入HTML5"><a href="#嵌入HTML5" class="headerlink" title="嵌入HTML5"></a>嵌入HTML5</h1><p>可以插入api：在api的页面生成代码，复制代码到一个html文件，typora里用iframe标签插入这个文件，可以给iframe填写内联样式。</p>
<h1 id="搬运公众号图文消息"><a href="#搬运公众号图文消息" class="headerlink" title="搬运公众号图文消息"></a>搬运公众号图文消息</h1><p>把它的html源代码复制进来，然后进行修改，就可以保留别人排好的样式，来做我们自己的东西</p>
<h1 id="导入腾讯、B站视频"><a href="#导入腾讯、B站视频" class="headerlink" title="导入腾讯、B站视频"></a>导入腾讯、B站视频</h1><p>腾讯视频下方，分享里有个复制通用代码、嵌入代码</p>
<h1 id="把图片放到图床里再写作"><a href="#把图片放到图床里再写作" class="headerlink" title="把图片放到图床里再写作"></a>把图片放到图床里再写作</h1><p>先把图片放到如简书图床里，复制链接放到typora里。注意：在本地也要备份好图片</p>
<h1 id="偏好设置"><a href="#偏好设置" class="headerlink" title="偏好设置"></a>偏好设置</h1><ol>
<li>取消markdown严格模式（如#就不需加空格）</li>
<li>勾选markdown扩展语法的上下标、高亮、语法</li>
<li>重启typora</li>
</ol>
<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><p>格式中有一部分常用快捷键提示。另外还有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ctrl+enter	不跳出区域，跳转到下行 顶格，</span><br><span class="line">shift+enter	跳出区域，跳转到下行 顶格</span><br><span class="line">ctrl+<span class="number">1</span>/<span class="number">2</span>/../<span class="number">6</span>	标题</span><br><span class="line">strl+b	加粗</span><br></pre></td></tr></table></figure>

<h1 id="Markdown常用语法"><a href="#Markdown常用语法" class="headerlink" title="Markdown常用语法"></a>Markdown常用语法</h1><p>其它语法看<a href="http://47.104.231.144/blog/23" target="_blank" rel="noopener">http://47.104.231.144/blog/23</a></p>
<h2 id="0、目录"><a href="#0、目录" class="headerlink" title="0、目录"></a>0、目录</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[toc]</span><br></pre></td></tr></table></figure>

<h2 id="1、代码块"><a href="#1、代码块" class="headerlink" title="1、代码块"></a>1、代码块</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码块语法：英文状态下三个漂号`+语言</span></span><br><span class="line">​```java</span><br><span class="line"><span class="comment">// 行内代码</span></span><br><span class="line">`<span class="number">1</span>`</span><br></pre></td></tr></table></figure>

<p><code>1</code></p>
<h2 id="2、标题"><a href="#2、标题" class="headerlink" title="2、标题"></a>2、标题</h2><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#标题名    <span class="number">1</span>号标题,最大</span><br><span class="line">##标题名		<span class="number">2</span>号标题，依次减小</span><br><span class="line">...</span><br><span class="line">######		<span class="number">6</span>号标题，最小</span><br></pre></td></tr></table></figure>

<h2 id="3、字体"><a href="#3、字体" class="headerlink" title="3、字体"></a>3、字体</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加粗</span></span><br><span class="line">ctrl+b，**加粗**</span><br><span class="line"><span class="comment">// 代码高亮显示</span></span><br><span class="line">==代码高亮==，要设置才能用</span><br><span class="line"><span class="comment">// 删除线</span></span><br><span class="line">~~删除线~~</span><br><span class="line"><span class="comment">// 斜体    </span></span><br><span class="line">ctrl+i，*斜体*</span><br><span class="line"><span class="comment">// 斜体+加粗</span></span><br><span class="line">***<span class="number">1</span>***</span><br><span class="line"><span class="comment">// 下划线</span></span><br><span class="line">ctrl+u</span><br><span class="line"><span class="comment">// 上标，英文状态^</span></span><br><span class="line">H^<span class="number">2</span>^</span><br><span class="line"><span class="comment">// 下标</span></span><br><span class="line">H~<span class="number">2</span>~O</span><br></pre></td></tr></table></figure>

<p>// 加粗<br>ctrl+b，<strong>加粗</strong><br>// 代码高亮显示<br>==代码高亮==<br>// 删除线<br><del>删除线</del><br>// 斜体<br>ctrl+i，<em>斜体</em></p>
<p>// 斜体+加粗<br><strong><em>1</em></strong></p>
<p>下划线</p>
<p><u>1</u></p>
<h2 id="4、引用（一般拿来做注释）"><a href="#4、引用（一般拿来做注释）" class="headerlink" title="4、引用（一般拿来做注释）"></a>4、引用（一般拿来做注释）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用语法</span></span><br><span class="line">&gt;<span class="number">1</span></span><br><span class="line">&gt;&gt;<span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="5、分割线"><a href="#5、分割线" class="headerlink" title="5、分割线"></a>5、分割线</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分割线1</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">//分割线2</span></span><br><span class="line">***</span><br></pre></td></tr></table></figure>



<hr>
<hr>
<h2 id="6、图片插入"><a href="#6、图片插入" class="headerlink" title="6、图片插入"></a>6、图片插入</h2><p>关于图片：建议将图片上传到 网上的现成<strong>图床</strong>/服务器/，引用链接。这样不用迁移图片</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在线图片/本地图片。英文的！</span></span><br><span class="line">![我的照片](/image/me.png) --图片路径</span><br><span class="line"><span class="comment">// 注意：本地图片放在同一个文件夹里（用相对路径）或直接拷贝。偏好里可设置</span></span><br></pre></td></tr></table></figure>

<p><img src="http://47.104.231.144/blog/23" alt="我的照片"></p>
<h2 id="7、跳转、自动链接"><a href="#7、跳转、自动链接" class="headerlink" title="7、跳转、自动链接"></a>7、跳转、自动链接</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 外部跳转，用trcl+左击</span></span><br><span class="line">[MD语法](http:<span class="comment">//47.104.231.144/blog/23)</span></span><br><span class="line"><span class="comment">// 内部跳转，本文档内跳转。目前只能跳转到标题</span></span><br><span class="line">[点击](#标题名)</span><br><span class="line"><span class="comment">// 自动链接</span></span><br><span class="line">&lt;自动链接&gt;</span><br></pre></td></tr></table></figure>

<p><a href="http://47.104.231.144/blog/23" target="_blank" rel="noopener">MD语法</a></p>
<h2 id="8、列表"><a href="#8、列表" class="headerlink" title="8、列表"></a>8、列表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无序列表</span></span><br><span class="line">- 目录<span class="number">1</span></span><br><span class="line">- 目录<span class="number">2</span>  </span><br><span class="line">- 目录<span class="number">3</span></span><br><span class="line"><span class="comment">// 有序列表</span></span><br><span class="line"><span class="number">1</span>. 名称</span><br></pre></td></tr></table></figure>

<ul>
<li>目录1</li>
<li>目录2  </li>
<li>目录3</li>
</ul>
<ol>
<li>名称1</li>
<li>名称2</li>
</ol>
<h2 id="9、表格"><a href="#9、表格" class="headerlink" title="9、表格"></a>9、表格</h2><p>直接右击插入</p>
<h2 id="10、表情"><a href="#10、表情" class="headerlink" title="10、表情"></a>10、表情</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//:表情名    :时系统会有智能提示</span></span><br></pre></td></tr></table></figure>

<p>:slightly_smiling_face:</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>01-Git</title>
    <url>/2020/03/29/01-Git/</url>
    <content><![CDATA[<h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><ul>
<li>版本控制：解决多人开发的过程，容易引起文件冲突。如svn、git</li>
<li>git的优势：具有svn的功能、具有互联网的特性、git有分支概念</li>
<li>git和github：<ul>
<li>git客户端    github服务器端</li>
</ul>
</li>
<li>git可将文件提交、下载到github上。git也可独立使用</li>
</ul>
<a id="more"></a>

<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p>git 和 svn区别：</p>
<p>​    svn    集中式版本控制：只能从服务器拿文件</p>
<p>​    git    分布式版本控制：不仅可以从服务器拿文件，还可以从其他开发人员那拿文件</p>
<h1 id="基本常用命令"><a href="#基本常用命令" class="headerlink" title="基本常用命令"></a>基本常用命令</h1><blockquote>
<p>注意：</p>
<p>1.一般是下班时才git commit把一天内容上传上去，上班时再下载下来。</p>
<p>2.想要使用，就一定要初始化该目录</p>
<p>3.其它常用命令可以看目录下的网页</p>
</blockquote>
<p>git init    初始化</p>
<p>git status    查看状态</p>
<p>git add    添加到等待</p>
<p>git commit -m “注释信息支持中文”    提交</p>
<p>git log 查看日志</p>
<p>git checkout 文件名称 检出（下载）</p>
<p>git show 版本号</p>
<p>rm 文件名  —- 删除本地文件</p>
<p>git rm 文件名  删除等待区域的文件</p>
<h1 id="本地git的使用和安装"><a href="#本地git的使用和安装" class="headerlink" title="本地git的使用和安装"></a>本地git的使用和安装</h1><h2 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h2><p>官网下载<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p>
<h2 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h2><p>测试：git –version    </p>
<h2 id="1-创建全局的账户-和-邮箱"><a href="#1-创建全局的账户-和-邮箱" class="headerlink" title="1.创建全局的账户 和 邮箱"></a>1.创建全局的账户 和 邮箱</h2><p>注意这跟github的账户无关，这是本地的。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"用户名"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"邮箱"</span></span><br></pre></td></tr></table></figure>

<h2 id="√2-git初始化目录"><a href="#√2-git初始化目录" class="headerlink" title="√2.git初始化目录"></a>√2.git初始化目录</h2><p>想在哪个目录使用git，就在该目录cmd输入</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git init</span></span><br></pre></td></tr></table></figure>

<p>会生成 .git 隐藏目录。（.git是个局部使用的目录，只能在该初始化目录下起作用。）</p>
<h2 id="3-配置-git创建局部账户"><a href="#3-配置-git创建局部账户" class="headerlink" title="3.配置.git创建局部账户"></a>3.配置.git创建局部账户</h2><p>配置<strong>局部账户</strong>：</p>
<p>打开.git下的config，输入</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">	<span class="attribute">name</span>=用户名</span><br><span class="line">	<span class="attribute">email</span>=邮箱</span><br></pre></td></tr></table></figure>

<h2 id="√4-几个文件状态"><a href="#√4-几个文件状态" class="headerlink" title="√4.几个文件状态"></a>√4.几个文件状态</h2><p>本地文件：在<strong>使用目录下的</strong>文件。可以提交到内网的本地仓库。<strong>若修改了，要重新添加提交。</strong></p>
<p>等待提交的列表：文件添加到<strong>临时空间中</strong>等待提交。</p>
<p>本地仓库：提交成功之后，会存储到git创建的<strong>另一个目录</strong>。（可以是自己的机器，也可以是同个路由器下的其他机器来供多人使用。）</p>
<p>远程仓库：github（官方提供的远程服务器）。前提：提交到本地仓库的东西才能推送到github</p>
<h2 id="5-查看文件状态"><a href="#5-查看文件状态" class="headerlink" title="5.查看文件状态"></a>5.查看文件状态</h2><blockquote>
<p>一般不在cmd中写，而是在git bash中写</p>
</blockquote>
<p>右击使用目录，在git bash中输入。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git status</span></span><br></pre></td></tr></table></figure>

<p><strong>反馈结果说明：</strong></p>
<p>反馈    状态</p>
<p>红色    未添加提交、修改了</p>
<p>绿色    在等待提交列表中</p>
<p>不显示    提交到本地仓库了    </p>
<h1 id="上传-6-8"><a href="#上传-6-8" class="headerlink" title="上传(6-8)"></a>上传(6-8)</h1><p>工作目录下的所有文件只要有改动都需重新上传</p>
<h2 id="6-添加到等待提交列表"><a href="#6-添加到等待提交列表" class="headerlink" title="6.添加到等待提交列表"></a>6.添加到等待提交列表</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> 文件名</span></span><br></pre></td></tr></table></figure>

<h2 id="7-提交到本地仓库"><a href="#7-提交到本地仓库" class="headerlink" title="7.提交到本地仓库"></a>7.提交到本地仓库</h2><p>注意：一般情况下，下班的时候再把一天内容提交上去</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">"注释信息支持中文"</span></span><br></pre></td></tr></table></figure>

<h2 id="√8-查看工作日志"><a href="#√8-查看工作日志" class="headerlink" title="√8.查看工作日志"></a>√8.查看工作日志</h2><p>查看谁什么时间干了什么事：上传账户、上传时间、注释。</p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><h2 id="9-下载最新版本-误删还原"><a href="#9-下载最新版本-误删还原" class="headerlink" title="9.下载最新版本(误删还原)"></a>9.下载最新版本(误删还原)</h2><p>一般也叫检出</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout 文件名</span><br></pre></td></tr></table></figure>

<h2 id="10-查看某一版本"><a href="#10-查看某一版本" class="headerlink" title="10.查看某一版本"></a>10.查看某一版本</h2><p>先到git log    复制对应的版本号(commit 后的<strong>前几位</strong>即可，不重复就行：如6)。再输入(粘贴版本号时不会显示，直接回车)</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">show</span> 版本号</span><br></pre></td></tr></table></figure>

<p>就会显示出该版本的<strong>详细信息</strong>。</p>
<h2 id="11-删除本地文件"><a href="#11-删除本地文件" class="headerlink" title="11.删除本地文件"></a>11.删除本地文件</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rm</span> 文件名</span><br></pre></td></tr></table></figure>

<h2 id="12-删除等待区域文件"><a href="#12-删除等待区域文件" class="headerlink" title="12.删除等待区域文件"></a>12.删除等待区域文件</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> rm 文件名</span><br></pre></td></tr></table></figure>

<h1 id="分支-团队用"><a href="#分支-团队用" class="headerlink" title="分支(团队用)"></a>分支(团队用)</h1><p>master表示主分支</p>
<p>注意：</p>
<p>没做任何操作前，默认主次分支的git log是一样的。</p>
<p>做了操作则主次分支的git log不一样。</p>
<h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git branch</span></span><br></pre></td></tr></table></figure>

<h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>分支名</span><br></pre></td></tr></table></figure>

<h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout 分支名</span><br></pre></td></tr></table></figure>

<h2 id="合并-子-分支"><a href="#合并-子-分支" class="headerlink" title="合并(子)分支"></a>合并(子)分支</h2><p>切换到主分支下，才能合并。是指文件合并到一起，子分支就没用了。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> merga 子分支名</span><br></pre></td></tr></table></figure>

<h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-d 子分支名</span><br></pre></td></tr></table></figure>

<h1 id="git远程操作github服务器"><a href="#git远程操作github服务器" class="headerlink" title="git远程操作github服务器"></a>git远程操作github服务器</h1><p>先需要到github注册账户</p>
<h2 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h2><p>登陆github，点击右上角＋，创建新项目。</p>
<p>输入项目名、项目描述、选择公开或私有即可。</p>
<p><strong>注意：</strong>会生成一个链接(有https或ssh两种形式)，用来本地访问github的<strong>这个仓库</strong>。</p>
<h2 id="本地仓库关联远程仓库"><a href="#本地仓库关联远程仓库" class="headerlink" title="本地仓库关联远程仓库"></a>本地仓库关联远程仓库</h2><p>创建个仓库目录，推送前先记得初始化该目录：git init。否则会显示错误：fatal: Not a git repository (or any of the parent directories): .git</p>
<p>给本地仓库添加远程仓库的源地址，来关联远程仓库：git remote add origin 某远程仓库地址。</p>
<h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<p>执行之后会让输入github账户密码，稍等即可。</p>
<h2 id="加载到本地"><a href="#加载到本地" class="headerlink" title="加载到本地"></a>加载到本地</h2><p>点开仓库，仓库的克隆或下载选项下有地址，建议使用<strong>http地址</strong>。输入</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">远程仓库地址</span></span><br></pre></td></tr></table></figure>

<h1 id="git错误提示"><a href="#git错误提示" class="headerlink" title="git错误提示"></a>git错误提示</h1><p>fatal: Not a git repository (or any of the parent directories): .git</p>
<p>原因：没有初始化git本地版本管理仓库，所以无法执行git命令</p>
<p>解决方法：git init，然后执行一下git status查看状态信息，good，问题解决。</p>
<h1 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h1><h2 id="更改用户名"><a href="#更改用户名" class="headerlink" title="更改用户名"></a>更改用户名</h2><p>起名建议：名姓</p>
<p>右上角下拉中选setting，选择account，change your username。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>02-Vue CLI</title>
    <url>/2020/03/29/02-Vue%20CLI/</url>
    <content><![CDATA[<blockquote>
<p>这是Vue-CLI的笔记，但也会复习下之前的Vue基础</p>
<p>1、官网：如有不懂，搜索对应工具官网 来查询具体哪个的使用</p>
<p>2、建议：打开git bash或cmd来输入命令。</p>
<p>​            淘宝镜像cnpm比npm快</p>
<p>3、注意：若输入命令后不动、无反应，可能跟网速有关。</p>
<p>4、稍微了解webpack的话，就知道npm run serve命令在package.json中运行的是”serve”: “vue-cli-service serve”。若改成”vue-cli-service serve –open”：表示自动打开浏览器。</p>
</blockquote>
<a id="more"></a>

<h1 id="单双引号、不加的问题"><a href="#单双引号、不加的问题" class="headerlink" title="单双引号、不加的问题"></a>单双引号、不加的问题</h1><blockquote>
<p>变量值赋值的时候要根据是什么类型来给对应的符号</p>
<p>String 字符串 类型的加双引号    name=”陈钰”;</p>
<p>char  字符   类型的加单引号    sex=’男’;</p>
<p>boolean 布尔值 类型的不加引号   isShow=true;</p>
<p>number 数字   类型的不加引号   num=18;</p>
<p>只要不是字符、字符串类型，都不需要加引号</p>
</blockquote>
<blockquote>
<p>在标签中用’’。</p>
</blockquote>
<p>在vue中也是如此。不过在<strong>data里面的赋值符号</strong>要改一下,<strong>把等号改为冒号</strong>，<strong>把最后面的分号改为逗号</strong></p>
<p>String 字符串 类型的加双引号    name:”陈钰”,</p>
<p>char  字符   类型的加单引号    sex:’男’,</p>
<p>boolean 布尔值 类型的不加引号   isShow:true,</p>
<p>number 数字   类型的不加引号   num:18,</p>
<h1 id="vue的路径问题"><a href="#vue的路径问题" class="headerlink" title="vue的路径问题"></a>vue的路径问题</h1><p>./：相对路径</p>
<p>../：相对路径的上级目录</p>
<p>/：绝对路径</p>
<p>@/：一般代表src目录。在根目录/build/webpack.base.conf.js文件中@是配置的，可修改</p>
<h1 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h1><blockquote>
<p>若在git bash安装失败，则在cmd里运行安装命令</p>
</blockquote>
<p>全局安装：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure>

<h1 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h1><h2 id="1-创建项目目录"><a href="#1-创建项目目录" class="headerlink" title="1.创建项目目录"></a>1.创建项目目录</h2><blockquote>
<p>cmd、git bash下的创建命令不同。</p>
<p>若想在git bash使用cmd命令，可为命令添加别名：在<code>~/.bashrc</code> 文件中添加<code>alias vue=&#39;winpty vue.cmd</code>,重启git bash使文件生效</p>
</blockquote>
<p>cmd输入：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">vue create 项目名</span><br></pre></td></tr></table></figure>

<p>git bash输入：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">winpty vue.<span class="built_in">cmd</span> create 项目名</span><br></pre></td></tr></table></figure>

<h2 id="2-选择安装方式"><a href="#2-选择安装方式" class="headerlink" title="2.选择安装方式"></a>2.选择安装方式</h2><blockquote>
<p>git bash若直接用了cmd命令，则无法切换</p>
</blockquote>
<ol>
<li>运行创建命令后会出现默认安装、可选安装，一般选默认安装</li>
<li>之后按提示走。</li>
<li>通过弹出的url来访问项目。项目正常显示，表示创建成功。</li>
</ol>
<h1 id="vue目录结构"><a href="#vue目录结构" class="headerlink" title="vue目录结构"></a>vue目录结构</h1><p>这是<strong>基本</strong>目录结构的说明。后期操作中还会操作一些文件，会有更详细的说明。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">.git（隐藏文件） ===》git init</span><br><span class="line"><span class="attr">node_modules</span>	 ===》项目所有依赖的包文件</span><br><span class="line"><span class="attr">public</span>			 ===》本地服务的文件夹</span><br><span class="line">	 |index.<span class="attr">html</span> ==&gt;主页</span><br><span class="line"><span class="attr">src</span>              ===》工作目录</span><br><span class="line">	 |<span class="attr">assets</span>     ===》放入资源（图片,css）</span><br><span class="line">	 |<span class="attr">components</span> ===》放入组件的</span><br><span class="line">	 |App.<span class="attr">vue</span>    ===》根组件</span><br><span class="line">	 |main.<span class="attr">js</span>    ===》项目的全局配置</span><br><span class="line">.<span class="attr">gitignore</span>       ===》不需要上传到仓库中的文件的配置</span><br><span class="line">babel.config.<span class="attr">js</span>  ===》有关babel的配置</span><br><span class="line">package.<span class="attr">json</span>     ===》项目基本配置说明</span><br><span class="line">README.<span class="attr">md</span>        ===》说明文件</span><br><span class="line"></span><br><span class="line">项目网站的访问顺序：先打开index.<span class="attr">html</span> ===&gt;main.<span class="attr">js</span> ===&gt;app.vue。网站实际是打开app.vue。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>具体看这：</p>
<p>​    0.访问的具体过程：先访问主页，主页里的id——app对应着main.js里的#app;#app渲染(render)到app.vue中了。</p>
<ol>
<li><p>git init文件：方便通过本地传到github仓库或码云仓库上</p>
</li>
<li><p>src：以后操作或写代码最多的目录</p>
</li>
<li><p>.gitignore：如node_modules在这里默认被配置为不上传</p>
</li>
<li><p>bable的配置：让代码兼容性更好</p>
</li>
<li><p>index.html中有：</p>
<p>nostript标签        网站若禁止JS脚本，会提示标签里内容</p>
</li>
</ol>
</blockquote>
<h1 id="app-vue根组件"><a href="#app-vue根组件" class="headerlink" title="app.vue根组件"></a>app.vue根组件</h1><blockquote>
<p>网站实际打开的是app.vue 根组件。下面简单介绍下组件，后面再详细说。</p>
</blockquote>
<ol>
<li><p>.app.vue是 根 组件（暂时不用理解）。网站默认打开的就是根组件。</p>
</li>
<li><p>组件一般分为3个部分：</p>
<p>template  —》放入html代码<br>script        —》放入js代码、导入等。可不用<br>style          —》放入css样式。可不用</p>
</li>
<li><p>template里的代码必须有一个父元素。如div</p>
</li>
</ol>
<h1 id="全局配置main-js"><a href="#全局配置main-js" class="headerlink" title="全局配置main.js"></a>全局配置main.js</h1><p>main.js的所有内容在任何组件里都是有效的</p>
<h1 id="数据驱动-模板语法和计算属性"><a href="#数据驱动-模板语法和计算属性" class="headerlink" title="(数据驱动)模板语法和计算属性"></a>(数据驱动)模板语法和计算属性</h1><blockquote>
<p>jQuery中是操作DOM，vue中是<strong>数据驱动</strong></p>
<p>数据放到哪，怎么放？如放到template的div中。就是通过<strong>模板语法</strong>来放。</p>
</blockquote>
<p>1.数据（数据定义）：在script中定义。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">export default </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">	data()&#123;	//定义，或者用data:function()&#123;&#125;</span></span><br><span class="line"><span class="xml">		return</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">		</span></span><br><span class="line"><span class="template-variable">		&#125;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>2.模板语法（数据展现）：。放入template中。</p>
<p>3.计算属性（数据操作）：在数据中写入函数、模板简化。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">	函数名：<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（来避免在模板中写操作逻辑，使模板太臃肿，不好维护。）</p>
<p>具体如下：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		</span><span class="template-variable">&#123;&#123; str &#125;&#125;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; str &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">'str'</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">'str'</span>&gt;</span></span></span><br><span class="line"><span class="xml">		//<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; str.split("").revserse().join("") &#125;&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>//翻转操作。太臃肿</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; changeStr &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>//用计算属性后的模板简化：直接填入函数名</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">export default &#123;</span></span><br><span class="line"><span class="xml">	data () &#123;//函数,定义了数据。放入数据</span></span><br><span class="line"><span class="xml">		return &#123;//对象</span></span><br><span class="line"><span class="xml">			str:"你好vue"</span></span><br><span class="line"><span class="xml">		&#125;,</span></span><br><span class="line"><span class="xml">		computer:&#123;</span></span><br><span class="line"><span class="xml">			changeStr()&#123;</span></span><br><span class="line"><span class="xml">				return this.str.split("").revserse().join("");//this.逻辑。this表示vue大对象</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h1><blockquote>
<p>什么是指令？在节点上带有v-xxx的内容</p>
<p>做什么？（单向）绑定数据（也叫插值）、加事件、双向绑定</p>
<p>面试题——虚拟DOM：</p>
<p>监听数据变化，若哪个节点变化，哪个节点就重新渲染：如在模板中输入了str跟一个加了改str值的事件。</p>
</blockquote>
<p>指令集：指令=‘…’</p>
<p>1.<strong>v-bind</strong>或: （（单向）绑定数据，也叫插值）</p>
<p>v-bind:value    v-bind:text    v-bing:img等</p>
<p>简写    :value    :img等</p>
<p>数据放入位置：scirpt的data()里</p>
<p>2.v-on或@（加事件）</p>
<p>v-on:click    v-on:mouseover等</p>
<p>简写    @click等</p>
<p>函数放入位置：方法属性（跟计算属性放的位置一样）</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">method</span>:</span><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	函数名()&#123;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.v-text    文本</p>
<p>4.v-html    文本+html。数据里的html会起作用</p>
<p>5.v-model    数据的双向绑定</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">//如当在页面中的输入框输入数据，则h1的str也会发生变化</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'str'</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; str &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">双向绑定的原理：</span></span><br><span class="line"><span class="xml">发布者——》订阅者的一种模式：如上面，h1订阅了input，等后者发布了订阅者会跟着变。</span></span><br></pre></td></tr></table></figure>

<p>6.v-once    也可以插入值，但不更新数据（即v-model改变不了它）</p>
<p>7.v-if、v-else    条件渲染</p>
<p>如在数据中输入了一个数组arr。在模板中进行条件选择：不空显示h1内容，空显示h2</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">'arr.length&gt;0'</span>&gt;</span></span><span class="template-variable">&#123;&#123;arr&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>空的<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>8.v-for    列表渲染</p>
<blockquote>
<p>v-for若报错key，就在其后添加如:key=”‘arr’+item”、:key=”‘arr’+index”  或者关闭eslint检测</p>
</blockquote>
<p>​    v-for=’item in arr’    内容输入，显示每项</p>
<p>​    v-for=‘(item,index) in arr’    内容输入、，显示每项及下标</p>
<p>🔺v-if、v-for结合使用 会出现的问题：v-if不能放li里，应放在ul里，否则会报错。</p>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><blockquote>
<p>组件名后缀在导入使用时可省略。</p>
</blockquote>
<p><strong>1.什么是组件</strong></p>
<ul>
<li>以.vue结尾的文件</li>
<li>扩展了html标签的：能把组件当标签用</li>
</ul>
<p><strong>2.组件的使用</strong></p>
<ul>
<li><p>使用场景：把一个完整的项目，拆分成不同的功能模块</p>
</li>
<li><p>放在哪：src下的components目录</p>
</li>
<li><p>注意：组件首字母要大写，才会与标签不冲突</p>
</li>
<li><p>怎么使用：（三步）</p>
<p>1、<code>import 组件名 from &#39;路径和组件名&#39;</code></p>
<p> 2、export default{}中插入</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">components:</span>&#123;</span><br><span class="line">	组件名</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、在template中使用：组件名—&gt;即把组件当标签用（也可以单标签：<code>&lt;组件名 /&gt;</code>）</p>
</li>
</ul>
<p><strong>3.组件的通信(传值)</strong></p>
<h2 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h2><p>（分发）</p>
<p>方法——</p>
<p>父组件：<code>&lt;子组件  :变量=&#39;数据&#39;&gt;&lt;/子组件&gt;</code>(一般变量名和数据名保存一致，易区分)</p>
<p>子组件：export default{}中插入<code>props:[&#39;变量&#39;]</code>；模板语法</p>
<h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h2><p>方法——</p>
<p>子组件：事件；<code>this.$emit(&#39;自定义事件名称&#39;,数据)</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'changStr'</span>,<span class="keyword">this</span>.str)</span><br></pre></td></tr></table></figure>

<p>父组件：&lt;子组件 @自定义事件名称=父自定义事件&gt;&lt;/子组件&gt;去拿到子组件的值</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Header</span> @<span class="attr">changStr</span>=<span class="string">'headStr'</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="xml">methods:</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  headStr(s)&#123;</span></span><br><span class="line"><span class="template-variable">     console.log(s)</span></span><br><span class="line"><span class="template-variable">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="兄弟之间传"><a href="#兄弟之间传" class="headerlink" title="兄弟之间传"></a>兄弟之间传</h2><p>1、先（如在components）弄一个公共的.js文件：实例化vue的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>	<span class="comment">//引入vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue; <span class="comment">//用ES6语法抛出去这个实例</span></span><br></pre></td></tr></table></figure>

<p>2、</p>
<p>兄弟A：引入公共文件<code>import 公共文件名 from &#39;路径和公共文件名&#39;</code>、<code>公共文件名.$emit(&#39;自定义事件名&#39;,数据)</code>去分发</p>
<p>兄弟B：引入公共文件<code>import bus from &#39;./bus&#39;</code>、<strong>找个位置放B自定义方法去存A的数据</strong>、用生命周期或 计算属性去响应。</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算属性做。用生命周期的后期讲。</span></span><br><span class="line"><span class="attribute">computed</span>:&#123;</span><br><span class="line">	B自定义方法名()&#123;</span><br><span class="line">		公共文件名.$<span class="keyword">on</span>(<span class="string">'A自定义事件名'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(data)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="组件传值的注意点"><a href="#组件传值的注意点" class="headerlink" title="组件传值的注意点"></a>组件传值的注意点</h2><p>组件的传值，不能跳跃。</p>
<p>举例：切换城市页面</p>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><blockquote>
<p>路由官网：<a href="https://router.vuejs.org/api/#to" target="_blank" rel="noopener">https://router.vuejs.org/api/#to</a></p>
</blockquote>
<p><strong>1.什么是路由</strong></p>
<p>单页面应用(spa)：只在一个页面中切换内容，如APP</p>
<p><strong>2.路由安装</strong></p>
<p>创建-》选择自定义安装-》选router（按空格）-》一路回车，开始安装。</p>
<blockquote>
<p>测试：按提示输入命令后，查看效果——</p>
<p>1.页面：多了个菜单选项，可以切换了，这就是由。</p>
<p>2.文件：src中多了route.js文件；src中多了views(视图层)文件夹，里面有2个组件</p>
</blockquote>
<p><strong>3.</strong></p>
<h2 id="路由完整流程"><a href="#路由完整流程" class="headerlink" title="路由完整流程"></a><strong>路由完整流程</strong></h2><p>1、在App.vue中页面布局template（先用工具构思个草图）</p>
<p>​    切换的内容？<code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>
<p>​    跳转到哪了？如<code>&lt;router-link to=&#39;/home&#39;&gt;首页&lt;/router-link&gt;</code>   （路径自定义）</p>
<p>2、创建跳转到的内容(.vue)</p>
<p>​     各组件的内容写好。放在view目录下 或 不要view目录，全部放在components目录下。</p>
<p>3、配置router.js</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 组件名 form '路径+组件名1'</span><br><span class="line"><span class="keyword">import</span> 组件名 form '路径+组件名2'</span><br><span class="line"></span><br><span class="line">router: [	<span class="comment">//router里其它东西先清空，后面会用懒加载</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">path</span>:<span class="string">"自定义路径"</span>,</span><br><span class="line">		component:组件<span class="number">1</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">path</span>:<span class="string">"自定义路径"</span>,</span><br><span class="line">		component:组件<span class="number">2</span></span><br><span class="line">	&#125;	</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>	<span class="comment">//引入vue.js：代表router依赖于vue.js</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span> <span class="comment">//引入了vue-router.js</span></span><br><span class="line">Vue.use(Router)	<span class="comment">//使用：如果vue-router依赖于vue.js，必须要有use</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="通过to跳转-：router-link配置"><a href="#通过to跳转-：router-link配置" class="headerlink" title="通过to跳转 ：router-link配置"></a>通过to跳转 ：router-link配置</h2><p><code>&lt;router-link&gt;&lt;/router-link&gt;</code>        </p>
<p>属性：to、tag        样式属性：.router-link-active</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">to</span> 的写法(基本写法+绑定写法<span class="number">2</span><span class="number">-5</span>)	</span><br><span class="line">		<span class="number">1</span>》<span class="keyword">to</span>=<span class="string">'/home'</span></span><br><span class="line">		<span class="number">2</span>》:<span class="keyword">to</span>=<span class="string">'"/home"'</span>	使用率不高</span><br><span class="line">		<span class="number">3</span>》:<span class="keyword">to</span>=<span class="string">'&#123;path:"/home"&#125;'</span>		推荐、使用率高</span><br><span class="line">		<span class="number">4</span>》:<span class="keyword">to</span>=<span class="string">'&#123;					可以传参数，能在url上看到</span></span><br><span class="line"><span class="string">					path:"/home",</span></span><br><span class="line"><span class="string">					query:	&#123;userId:123&#125;</span></span><br><span class="line"><span class="string">				&#125;'</span></span><br><span class="line">		<span class="number">5</span>》:<span class="keyword">to</span>=<span class="string">"&#123; 					可以床参数，通过JS去接收的</span></span><br><span class="line"><span class="string">					name: 'user', </span></span><br><span class="line"><span class="string">					params: &#123; userId: 123 &#125;</span></span><br><span class="line"><span class="string">				&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tag</span>：router<span class="params">-link</span>默认为a标记，可以修改</span><br><span class="line">	<span class="built_in">tag</span>=<span class="string">'li'</span></span><br><span class="line">	<span class="built_in">tag</span>=<span class="string">'button'</span></span><br><span class="line"></span><br><span class="line">router<span class="params">-link</span><span class="params">-active</span>：默认触发的class类	</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.router<span class="params">-link</span><span class="params">-active</span>&#123;</span><br><span class="line">	color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="通过JS跳转"><a href="#通过JS跳转" class="headerlink" title="通过JS跳转"></a>通过JS跳转</h2><blockquote>
<p>有5种方法：router.push、router.replace（替换路由）、router.go（刷新）、router.back、router.forward</p>
<p>下面举例</p>
</blockquote>
<p>1、给如按钮 的跳转目标 加<code>@click=&#39;事件名&#39;</code></p>
<p>2、在script写：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">method</span>:</span>[</span><br><span class="line">	事件名()<span class="comment">&#123;</span></span><br><span class="line"><span class="comment">		this.$router.push(&#123;</span></span><br><span class="line"><span class="comment">			path:"/config"</span></span><br><span class="line"><span class="comment">		&#125;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="router-view的keep-alive"><a href="#router-view的keep-alive" class="headerlink" title="router-view的keep-alive"></a>router-view的keep-alive</h2><p><strong>1.keep-alive是什么？</strong></p>
<p>vue内置的组件，能在组件切换过程中将状态保存在内存中，<strong>防止dom重复渲染</strong></p>
<p><strong>2.使用场景</strong></p>
<p>把页面保存在内存中，记住输入的内容（如密码）等操作</p>
<p><strong>3.使用与需求</strong></p>
<pre><code>&lt;keep-alive&gt;
    &lt;router-view&gt;&lt;/router-view&gt;
&lt;/keep-alive&gt;</code></pre><p>需求：有的页面需要保存，有的不需要</p>
<pre><code>include属性 : 包含哪个。用,隔开（要给那个页面加数据name）
exclude属性 ：不包含哪个。用,隔开(要给那个页面加数据name)</code></pre><h2 id="router-js详解-懒加载、重定向、嵌套"><a href="#router-js详解-懒加载、重定向、嵌套" class="headerlink" title="router.js详解(懒加载、重定向、嵌套)"></a>router.js详解(懒加载、重定向、嵌套)</h2><blockquote>
<p>mode: ‘history’    是否加锚点的，默认即可</p>
<p>base: process.env.BASE_URL    默认即可</p>
</blockquote>
<p>一、说明</p>
<pre><code>{
  path: &apos;/&apos;,      //自定义url路径
  name: &apos;home&apos;,   //名称:基本上做标识或者判断。可省略
  component: Home //对应访问的组件
}</code></pre><p>二、懒加载</p>
<blockquote>
<p>提高加载速度：把不同路由对应的组件分割成不同的代码块</p>
</blockquote>
<pre><code>{
  path: &apos;/about&apos;,
  name: &apos;about&apos;,
  component: () =&gt; import(&apos;./views/About.vue&apos;)
}</code></pre><p>三、路由重定向</p>
<p>链接不存在，跳转到 提示页或首页。若没有，则内容为空</p>
<pre><code>{ 
  path: &apos;*&apos;, 
  redirect: Home或&quot;/home&quot;    前者可能不行
}</code></pre><p>四、路由嵌套</p>
<p>通过children往里去套路由（即主栏目下有二级栏目，如列表页有文章）</p>
<pre><code>{
  path: &apos;/about&apos;,
  name: &apos;about&apos;,
  component: () =&gt; import(&apos;./views/About.vue&apos;),
  children:[
      {
        path:&quot;/xxx:id&quot;,        还能加id
        component:Home
      },
      {
        path:&quot;/xxx&quot;,
        component:Home
      }
  ]
}</code></pre><h2 id="路由的传值"><a href="#路由的传值" class="headerlink" title="路由的传值"></a>路由的传值</h2><p>如传：在router.js中某个路由<strong>通过路径</strong>加个id，在到url里输/aa  或  app.vue中加个router-link的query，要拿到id</p>
<p>拿：通过在该路由里加<strong>模块语法、计算属性</strong>来<strong>拿到this.$route</strong>，再通过“.”进行判断、拿值</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>》</span><br><span class="line">&#123;</span><br><span class="line">    <span class="symbol">path:</span> <span class="string">'/about/:id'</span>,</span><br><span class="line">    <span class="symbol">name:</span> <span class="string">'about'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span>》</span><br><span class="line">&lt;router-link <span class="symbol">:to=<span class="string">"&#123;path:'/about',query:&#123;</span></span></span><br><span class="line"><span class="symbol"><span class="string">aaa:123</span></span></span><br><span class="line"><span class="symbol"><span class="string">&#125;&#125;"</span>&gt;About&lt;/router-link&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="交互-axios的基本用法"><a href="#交互-axios的基本用法" class="headerlink" title="交互(axios的基本用法)"></a>交互(axios的基本用法)</h1><blockquote>
<p>使用vue中，怎么与后台进行接口交互。</p>
<p>知识前提：先了解Promise，用起axios会轻松很多</p>
<p>后期数据的渲染、逻辑的判断放到项目中再说</p>
</blockquote>
<p>1、<strong>axios</strong>的优势：它不依赖于vue，所以不需要use</p>
<p>2、大致使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>》在目录中下载：npm install axios --save</span><br><span class="line"><span class="number">2</span>》引入axios</span><br><span class="line"><span class="comment">//注意：1、希望所有页面都能用：就在main.js中去引入</span></span><br><span class="line"><span class="comment">//     2、希望只有某一组件能用:就在某一组件中去引入</span></span><br><span class="line">	<span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">	Vue.prototype.axios = axios		<span class="comment">//JS原型</span></span><br><span class="line"><span class="number">3</span>》再使用(<span class="keyword">this</span>.axios)</span><br><span class="line">	<span class="keyword">this</span>.axios.get(<span class="string">"路径"</span>).then()</span><br></pre></td></tr></table></figure>
<p>3、具体过程：get和post举例——</p>
<p>一、假如在App.vue中去使用get方式</p>
<p>（1）假设我们有数据：先在bublic里创建个data.json，随便输：{”a“:1}，然后去请求它，注意路径该这么写：’<a href="http://localhost:8080/data.json&#39;" target="_blank" rel="noopener">http://localhost:8080/data.json&#39;</a></p>
<p>（2）在App.vue中输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed:&#123;</span><br><span class="line">    http:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//1、可以先console.log(this.axios) 测试能否使用</span></span><br><span class="line">      <span class="comment">//2、.then可以放到下一行，这时Promise的语法</span></span><br><span class="line">      <span class="comment">//3、该如何请求接口？axios跟ajax一样可以post、get，这儿我们先使用下get</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.axios.get(<span class="string">'http://localhost:8080/data.json'</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;	<span class="comment">//4、请求的数据在哪？在.then()上</span></span><br><span class="line">        <span class="built_in">console</span>.log(res.data)<span class="comment">//首先传入参数res拿到数据，发现在res的data上，所以res.data就可以拿到这个对象了，再.a就可以拿到1了。</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）数据怎么传给后台？</p>
<ul>
<li><p>可以用get方法：直接在’’”里接着写?id=1：(当然现在看不出来)</p>
<p><code>this.axios.get(&#39;http://localhost:8080/data.json?id=1&#39;).then()</code></p>
</li>
<li><p>也可以下面的方式</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    http()=&gt;&#123;			</span><br><span class="line">      <span class="keyword">this</span>.axios.get(<span class="string">'http://localhost:8080/data.json'</span>,&#123;</span><br><span class="line">        params:&#123;	<span class="comment">//这样也是可以的</span></span><br><span class="line">          id:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二、假如在App.vue中去使用post方式</p>
<p>跟上面类似</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    http()=&gt;&#123;			</span><br><span class="line">      <span class="keyword">this</span>.axios.post(<span class="string">'http://localhost:8080/data.json'</span>,&#123;</span><br><span class="line">        params:&#123;	<span class="comment">//post可以直接省略params,直接写id:1</span></span><br><span class="line">          id:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="生命周期（又叫钩子函数）"><a href="#生命周期（又叫钩子函数）" class="headerlink" title="生命周期（又叫钩子函数）"></a>生命周期（又叫钩子函数）</h1><blockquote>
<p>就是从有到无的过程。</p>
<p>使用率100%</p>
</blockquote>
<p>一、生命周期（又叫钩子函数）</p>
<blockquote>
<p>实例化-》<strong>初始化（有两个生命周期beforecreate、created）</strong>-》el（#app）：NO的话就停止（直到加载调用时继续往下走）；YES继续往下走-》template（组件），YES 就-》组件渲染，相当于JS的onload（有两个生命周期beforeMounte、Mounted）-》<strong>数据的修改（有两个生命周期beforeUpdate、Updated）</strong>-》<strong>销毁（有两个生命周期beforeDestroy、destroy）</strong></p>
</blockquote>
<p>一共有4个阶段：（每个阶段上都有2个生命周期）</p>
<p>​    1》创建<br>​    2》组件渲染<br>​    3》修改数据<br>​    4》销毁</p>
<p>二、该怎么写？</p>
<p>写在script中</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    console.log(<span class="number">1</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">created</span><span class="params">()</span></span>&#123;</span><br><span class="line">	console.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三、生命周期在什么地方使用？</p>
<blockquote>
<p>数据是通过axios请求接口来的，再把数据渲染到页面中，那在什么地方写这些逻辑？而一旦刷新或进入页面时，就要请求接口，所以我们只能写到mounted(){…}中</p>
</blockquote>
<p>使用场景：比如在一刷新（或进入）页面要请求接口。</p>
<p>​                   比如使用keep-alive后，会去增加2个生命周期，后期再说</p>
<p>举例：</p>
<p>1、比如我们定义一个接口data.json,写入{“arr”:[“a”,”b”,”c”]}，然后就可以直接在mouted里去axios：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">	<span class="keyword">this</span>.axios.get(<span class="string">'http://localhost:8080/data.json'</span>)</span><br><span class="line">      .<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span>=&gt;</span>&#123;	</span><br><span class="line">        <span class="built_in">console</span>.log(res.data)</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、然后可以进行逻辑判断了，比如渲染数据</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">	&lt;<span class="selector-tag">li</span> v-<span class="keyword">for</span>=<span class="string">'item in str'</span> :key=<span class="string">"'str'+item"</span>&gt;</span><br><span class="line">		&#123;&#123;item&#125;&#125;</span><br><span class="line">	&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mounted</span><span class="params">()</span></span>&#123;</span><br><span class="line">	this<span class="selector-class">.axios</span>.get(<span class="string">'http://localhost:8080/data.json'</span>)</span><br><span class="line">      .then((res)=&gt;&#123;	</span><br><span class="line">        this<span class="selector-class">.str</span> = res<span class="selector-class">.data</span>.arr</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="插件样式"><a href="#插件样式" class="headerlink" title="插件样式"></a>插件样式</h1><h2 id="vue中使用插件"><a href="#vue中使用插件" class="headerlink" title="vue中使用插件"></a>vue中使用插件</h2><blockquote>
<p>vue-xxx和xxx的区别：前者是写vue时用的，后者是写DOM结构时用的。vue-xxx的底层的api是xxx。所以看api也可以到xxx官网去看，没有问题</p>
<p>插件在使用过程中还有很多问题，下一节有讲到</p>
</blockquote>
<p>比如想使用一个轮播插件、分享插件等，该如何去找、如何去用？</p>
<p><strong>怎么用？</strong></p>
<p>操作步骤永远都是：安装npm i xxx –save、引入、使用</p>
<p>注意：</p>
<ul>
<li>引入要看vue-cli的版本，可能人家说明文档上的方法不行，要百度或经验：比如3中css不能这样引入，需要用其它方法：去xxx官网下载css放到src里的assets文件夹下，在main.js里引用：<code>import &#39;路径&#39;</code></li>
<li>插件里的结构，你可以去拷贝来用。ref可以去掉，后面会讲；@..callback可以删了，没有用。:option的值是一个对象，可以在下面定义 或 按人家的写也没有问题：把data(){…}直接拿过来</li>
</ul>
<p><strong>怎么找？</strong></p>
<p>github.com上找插件，直接搜索。</p>
<p>比如：</p>
<ul>
<li>搜vue分享插件，里面会告诉你怎么去用</li>
<li>搜vue-xxx(比如我们要用swiper，是要搜vue-swiper，不能直接搜)</li>
</ul>
<blockquote>
<p>可能会遇到Vue.component() 表示能在全局使用该组件</p>
</blockquote>
<h2 id="样式模块化-局部化"><a href="#样式模块化-局部化" class="headerlink" title="样式模块化(局部化)"></a>样式模块化(局部化)</h2><p>任何组件的style默认是全局使用的。</p>
<p>要只有这个组件自己才能使用，给style加个scoped属性</p>
<h2 id="样式穿透-改样式"><a href="#样式穿透-改样式" class="headerlink" title="样式穿透(改样式)"></a>样式穿透(改样式)</h2><blockquote>
<p>这儿讲下swiper的使用：不要的功能可以在结构里删除，如果想要swiper轮播图的小圆点，就去swiper官网里找组件-》分页器，可以把代码拿过来 或看tab里有很多其它样式。</p>
</blockquote>
<ul>
<li>语法：父元素 &gt;&gt;&gt; 子元素</li>
</ul>
<p>比如 想修改小圆点的样式，就要找到该元素类的父元素的类，然后<code>.父元素类 &gt;&gt;&gt; 子元素类 {...}</code></p>
<h2 id="预处理器stylus"><a href="#预处理器stylus" class="headerlink" title="预处理器stylus"></a>预处理器stylus</h2><blockquote>
<ul>
<li>CSS预处理器：都是为了让开发效率变高</li>
<li>如何用less、sass、stylus写？步骤一样</li>
<li>stylus语法类似于sass，写样式时可以不写{}</li>
</ul>
</blockquote>
<p><strong>1、安装</strong></p>
<p>创建项目时要选择CSS Pre-processors-》Stylus-》一路回车等待安装完成</p>
<p><strong>2、使用</strong></p>
<ul>
<li><p><code>&lt;style lang=&#39;stylus&#39;&gt;&lt;/style&gt;</code></p>
</li>
<li><p>写样式时可以不写{}</p>
</li>
<li><p>比如换主题（如植树节换绿色、国庆换红色）-》<strong>不用一个个去修改，可以像JS一样修改一个变量即可</strong>-》<strong>1.stylus可以用变量</strong></p>
</li>
<li><p><strong>2.stylus的文件是.styl</strong>：比如写个var.styl文件，写$bg=red（<strong>3.stylus语法</strong>），然后有个元素想用红色-》在想改样式的组件中<code>&lt;style lang=&#39;stylus&#39;&gt;&lt;/style&gt;</code>中写入<code>@import &#39;~@/assets/var.styl&#39;</code>（<strong>style中的样式引入</strong>），然后改样式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> </span><br><span class="line"> background:$bg</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>到这，基础差不多就讲完了，一些细节问题会在后面做项目中讲到</p>
<h1 id="vuex状态管理"><a href="#vuex状态管理" class="headerlink" title="vuex状态管理"></a>vuex状态管理</h1><blockquote>
<p>知道修改的过程就可以了</p>
</blockquote>
<p><strong>1、vuex是什么？</strong></p>
<p>状态管理——管理所有组件的事件、行为等，方便更好传值，<strong>解决传值比较麻烦的情况</strong></p>
<p>图：vue组件作为一个等待者…</p>
<p><strong>2、vuex的安装</strong></p>
<p>安装时选Vuex，一路回车就行。</p>
<p>变化：</p>
<ul>
<li>src目录会多个store.js文件</li>
<li>main.js中会引入store、实例化中把store挂载到了#app上</li>
</ul>
<p><strong>3、vuex的使用</strong></p>
<p>1、vuex-state-mapState</p>
<p>（1）<strong>state</strong> ——》放入的是数据</p>
<blockquote>
<p>到真正做项目时，数据都是放到store里面，否则传值太累</p>
</blockquote>
<p>（2）组件如何使用数据？(3种)</p>
<ul>
<li>
</li>
<li><pre><code class="js"><span class="comment">//推荐</span>
<span class="keyword">import</span> {mapState} <span class="keyword">from</span> <span class="string">'vuex'</span>
...
    computed:mapState([<span class="string">'cityName'</span>])    <span class="comment">//跟原本的computed不冲突</span>

&lt;!--￼<span class="number">39</span>--&gt;
&lt;!--￼<span class="number">29</span>--&gt;
</code></pre>
</li>
</ul>
<p>2、修改state数据-mapMutations</p>
<blockquote>
<p>actions和mapMutations都可以改，前者是异步的,比较麻烦需要用commit提交</p>
</blockquote>
<p>（1）比如在state里写了str:123，点击按钮想改变str的值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123; str &#125;&#125;</span><br><span class="line">&lt;button @click=<span class="string">'btn'</span>&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">	methods:&#123;</span></span><br><span class="line"><span class="regexp">        btn()&#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/console.log(this.str)</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/this.str = 456  /</span><span class="regexp">/会报错：不能直接改，看下面</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure>

<p>（2）怎么修改？4步</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>》store.js</span><br><span class="line"></span><br><span class="line">mutations: &#123;</span><br><span class="line">    changeStr(state)&#123;</span><br><span class="line">        state.str=<span class="number">456</span>;		<span class="comment">//1.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>》组件</span><br><span class="line"><span class="keyword">import</span> &#123;mapState,mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span>	<span class="comment">//2.</span></span><br><span class="line">&lt;button @click=<span class="string">'btn'</span>&gt;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">methods:&#123;</span></span><br><span class="line"><span class="regexp">    btn()&#123;</span></span><br><span class="line"><span class="regexp">        this.changeStr()			/</span><span class="regexp">/4.</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    ...mapMutations(['changeStr'])	/</span><span class="regexp">/3.</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>假如<code>&lt;button @click=&#39;btn(&quot;北京&quot;)&#39;&gt;&lt;/button&gt;</code>想传个北京怎么办呢？</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">    changeStr(<span class="keyword">state</span>,cName)&#123;</span><br><span class="line">    	<span class="keyword">state</span>.str=cName;	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">    btn(cName)&#123;</span><br><span class="line">        this.changeStr(cName)		</span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapMutations(['changeStr'])	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="必问面试题"><a href="#必问面试题" class="headerlink" title="必问面试题"></a>必问面试题</h1><p>1.虚拟DOM：</p>
<p>监听数据变化，若哪个节点变化，哪个节点就重新渲染：如在模板中输入了str跟一个加了改str值的事件。</p>
<p>2.双向绑定的原理：</p>
<p>发布者——》订阅者的一种模式。</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">//如h1订阅了input，等后者发布了订阅者会跟着变。（具体操作：当在页面中的输入框输入数据，则h1的str也会发生变化）</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'str'</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; str &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>3、<a href="#生命周期（又叫钩子函数）">生命周期</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>01-Vue基础</title>
    <url>/2020/03/29/01-Vue%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="MVC模式和MVVM模式"><a href="#MVC模式和MVVM模式" class="headerlink" title="MVC模式和MVVM模式"></a>MVC模式和MVVM模式</h1><p>1、MVC模式：</p>
<p>Model——》模型——》数据（js变量）</p>
<p>View——》视图——》用户所见界面（HTML，CSS）</p>
<p>Control——》控制器——》事件交互——》如何根据视图与用户交互后改变数据（通过DOM对象1绑定事件，将变量进行修改）</p>
<a id="more"></a>

<p>2、MVVM模式</p>
<p>视图（view）跟数据（model）通过vue（vm）进行双向绑定</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- view --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span><span class="template-variable">&#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">			</span></span><br><span class="line"><span class="xml">	//vm</span></span><br><span class="line"><span class="xml">var app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">	el:"#app",</span></span><br><span class="line"><span class="xml">	//model</span></span><br><span class="line"><span class="xml">    data:&#123;</span></span><br><span class="line"><span class="xml">		message:"Hello World!"</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure>

<h1 id="一、vue-js基础"><a href="#一、vue-js基础" class="headerlink" title="一、vue.js基础"></a>一、vue.js基础</h1><h1 id="vue的基本使用"><a href="#vue的基本使用" class="headerlink" title="vue的基本使用"></a>vue的基本使用</h1><p>怎么使用？</p>
<p>1、在html引用vue.js。（就产生了Vue这个全局变量，可以<code>console.log(Vue)</code>打印下）</p>
<p>2、写绑定的模板：给div一个id或class，告知vue：要在什么地方使用vue（的模板变量{{变量}}）</p>
<p>3、实例化对象，在()里配置参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,	<span class="comment">//告诉在哪使用vue</span></span><br><span class="line">    data:&#123;		</span><br><span class="line">      title: <span class="string">"Hello Vue!"</span>  		<span class="comment">//告诉vue变量是什么</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>(在这之后也可以<code>console.log(app)</code>打印下；可以输入<code>app.message=“呼呼”</code>，message就改变了，这就是双向绑定)</p>
<p>（这种模式存在问题：是替换的！Vue找到innerHTML，再去替换它——牺牲性能：用户有可能看到替换前的，影响体验。所以后面是用自动化打包工具vue-cli：先编译，绑定内容）</p>
<h1 id="条件渲染v-if、v-show"><a href="#条件渲染v-if、v-show" class="headerlink" title="条件渲染v-if、v-show"></a>条件渲染v-if、v-show</h1><p>1、v-if（、v-else、v-else-if）    不显示时，第一次就直接不渲染；若将显示内容改为不显示，将内容直接从DOM去除。建议<strong>只是渲染一次</strong>，用v-if。</p>
<ul>
<li>值允许写表达式</li>
<li>注意：v-if和v-else、…中间不能有其它的元素，否则报错：<code>v-else used on element &lt;p&gt; without corresponding v-if</code>。</li>
<li>例子：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：&#123;&#123;userName&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"vip &gt; 998"</span>&gt;</span>用户等级：高级VIP<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">"vip &gt; 499"</span>&gt;</span>用户等级：普通VIP<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>用户等级：普通用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">".app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			userName: <span class="string">"小明"</span>,</span></span><br><span class="line">			vip: 999</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、v-show     不显示时，就会改成display:none,会渲染在DOM上。建议<strong>反复需要切换</strong>的内容，使用v-show。</p>
<ul>
<li>值允许写表达式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">		Hello Vue</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"showBtn"</span>&gt;</span>切换显示按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>	<span class="comment">&lt;!-- 绑定点击事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el:<span class="string">"#app"</span>,</span></span><br><span class="line">		data:&#123;</span><br><span class="line"><span class="actionscript">			isShow:<span class="literal">true</span></span></span><br><span class="line">		&#125;,</span><br><span class="line">		methods:&#123;</span><br><span class="line"><span class="actionscript">			showBtn:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;			    <span class="comment">//要将事件函数写在method中</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">this</span>.isShow=!<span class="keyword">this</span>.isShow;	<span class="comment">//注意：函数内语句;建议写上。可以用app或this</span></span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（添加事件之后，可以给事件传个参数e，在事件内添加<code>console.log(e)</code>打印下事件对象）</p>
<p>3、练习题：Tab切换</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"tab==1"</span>&gt;</span>这是首页<span class="tag">&lt;/<span class="name">p</span>&gt;</span>	<span class="comment">&lt;!-- 注意这里只能使用== --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"tab==2"</span>&gt;</span>这是热门<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"tab==3"</span>&gt;</span>这是我的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">"changeTab"</span> <span class="attr">data-id</span>=<span class="string">"1"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- data-id设置鼠标事件id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">"changeTab"</span> <span class="attr">data-id</span>=<span class="string">"2"</span>&gt;</span>热门<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">"changeTab"</span> <span class="attr">data-id</span>=<span class="string">"3"</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line">			tab: 1</span><br><span class="line">		&#125;,</span><br><span class="line">		methods:&#123;</span><br><span class="line"><span class="actionscript">			changeTab:<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;	</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//console.log(e)   //查看e来获取id</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> tabId = e.target.dataset.id; <span class="comment">//获取id	</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">this</span>.tab = tabId;	<span class="comment">//将tab赋值为id</span></span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="列表渲染v-for"><a href="#列表渲染v-for" class="headerlink" title="列表渲染v-for"></a>列表渲染v-for</h1><blockquote>
<p>列表渲染常与条件渲染一起使用，系统会先循环后判断</p>
</blockquote>
<p>v-for        循环反复做什么事</p>
<p>知识复习：一般数组[1,”1”]     对象{a:小明,b:”12”}   对象数组[{a:小明,b:”12”},{a:小红,b:”18”}]</p>
<p><strong>1、关键点：3种情况</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下面的item、key可以随便改 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1、一般数组列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--循环数据的每一项 in 要循环的数据--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in stars"</span>&gt;</span>   </span><br><span class="line">		<span class="comment">&lt;!--拿到每一项--&gt;</span></span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2、对象数组列表（拿属性）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--数据的每一项 in 要循环的数据--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in stars"</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--拿到每一项（对象）的属性用.调用--&gt;</span></span><br><span class="line">		名字：&#123;&#123;item.name&#125;&#125;</span><br><span class="line">        性别：&#123;&#123;item.sex&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 对象数组列表（拿属性、索引值）。注意()，否则不规范--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--数据的每一项 in 要循环的数据--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,key) in stars"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--拿到索引、属性--&gt;</span></span><br><span class="line">		索引值：&#123;&#123;item.key&#125;&#125;、名字：&#123;&#123;item.name&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3、对象列表（拿数组里的对象1、对象1里的索引值）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--数据的每一项 in 要循环的数据（拿对象1）--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,key) in stars[0]"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--拿对象1--&gt;</span></span><br><span class="line">		key:&#123;&#123;key&#125;&#125;--value:&#123;&#123;item&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、</strong></p>
<h2 id="列表条件渲染结合使用"><a href="#列表条件渲染结合使用" class="headerlink" title="列表条件渲染结合使用"></a><strong>列表条件渲染结合使用</strong></h2><p>注意点——添加元素属性<code>key</code>：</p>
<ul>
<li>若赋值是vue数据，则要用”:”绑定：<code>:key</code></li>
<li>若赋值是字符串，则不用绑定：<code>key</code></li>
</ul>
<p>做标识，<strong>避免让vue重复使用内容</strong>。因为若做了修改，系统会在原来界面上修改、去复用、<strong>保留原先数据</strong>而不重新渲染，可能<strong>导致数据冲突</strong>：如登录、注册页面的切换。若只是简单切换，可以不用加key。</p>
<h1 id="模板语法-绑定"><a href="#模板语法-绑定" class="headerlink" title="模板语法(绑定)"></a>模板语法(绑定)</h1><h2 id="插值-绑定数据"><a href="#插值-绑定数据" class="headerlink" title="插值(绑定数据)"></a>插值(绑定数据)</h2><p><strong>{{}}    可反复插值。可在数据里写简单的表达式</strong>（若表达式内容要反复修改、写复杂表达式，则在计算属性中写。否则会降低性能）</p>
<p>v-once、{{}}        一次性插值：如<code>&lt;p v-once&gt;这个将不可改变:{{msg}}&lt;/p&gt;</code></p>
<p>v-html、{{}}        可使值里的html生效。不建议使用，会被XSS攻击！如会被上                            传注入如js文件、ajax、跳转到钓鱼网站等。</p>
<h2 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h2><p>v-bind:    可简写为”:”。如<code>&lt;p :id=&quot;tab&quot;&gt;收藏&lt;/p&gt;</code></p>
<h2 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h2><p>v-on:   可简写为“@”。</p>
<p>1、最基本使用：添加事件名</p>
<p>如<code>&lt;button @click=“changeBg”&gt;&lt;/button&gt;</code>    </p>
<p>vue实例中添加：    </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2种声明形式都行。</span></span><br><span class="line">methods:&#123;</span><br><span class="line">	函数名:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;	<span class="comment">//声明形式1：匿名函数</span></span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	函数名:<span class="function"><span class="params">()</span>=&gt;</span>&#123;	<span class="comment">//声明形式2：ES6箭头函数——（...参数）=&gt;&#123;函数声明&#125;</span></span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、添加表达式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html的：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>点击次数：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 可以使用表达式完成事件操作 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"count+=1"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">js的：</span><br><span class="line">data:&#123;</span><br><span class="line">	count:0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、获取事件对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html的：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>点击次数：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 获取事件对象 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">"clickEvent"</span>&gt;</span>点击2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">js的:</span><br><span class="line">methods:&#123;</span><br><span class="line">    clickEvent:function(event)&#123;</span><br><span class="line">        console.log(event)</span><br><span class="line">        console.log(this)</span><br><span class="line">        this.count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、事件传参</p>
<p>例子：通过点击获取id</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item,index in stars"</span> @<span class="attr">click</span>=<span class="string">"clickEvent(index,item,$event)"</span>&gt;</span>索引值：&#123;&#123;index&#125;&#125;----内容：&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!-- index、item传到事件里 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el:<span class="string">"#app"</span>,</span></span><br><span class="line">		data:&#123;</span><br><span class="line"><span class="actionscript">			stars:[<span class="string">'蔡徐坤'</span>,<span class="string">'范冰冰'</span>,<span class="string">'李晨'</span>]</span></span><br><span class="line">		&#125;,</span><br><span class="line">		methods:&#123;</span><br><span class="line"><span class="actionscript">			clickEvent:<span class="function"><span class="keyword">function</span><span class="params">(index,value,event)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(index)</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(value)</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(event)</span></span><br><span class="line">				alter(123)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>要用时，再来官网翻就好了，不需要记</p>
<ul>
<li><p><code>.stop</code>        阻止事件冒泡（即几个嵌套事件，阻止事件继续向上层触发）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btnParent"</span> @<span class="attr">click</span>=<span class="string">"clickParent"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- stop修饰符，阻止冒泡事件向上传递 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"clickEvent"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">    clickEvent:function(event)&#123;</span><br><span class="line">    	console.log("clickEvent")</span><br><span class="line">    &#125;,</span><br><span class="line">    clickParent:function()&#123;</span><br><span class="line">    	console.log("clickParent")</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.prevent</code>     阻止默认事件。就可以不用跳转页面，而可以进行ajax请求。如表单提交</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 阻止默认事件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> @<span class="attr">click.prevent</span>=<span class="string">"searchWeather"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">searchWeather:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"查询天气"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.capture</code>    </p>
</li>
<li><p><code>.self</code>     自身触发的内容</p>
</li>
<li><p><code>.once</code>      只触发一次，如抽奖活动</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;只触发一次修饰符&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;button <span class="built_in">type</span>=<span class="string">"button"</span> @click.once=<span class="string">'onceEvent'</span>&gt;只触发一次按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">onceEvent:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">	console.<span class="built_in">log</span>(<span class="string">'只触发一次'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.passive</code></p>
</li>
<li><p>.keydown     按键。其它的看官网，还可以自定义。</p>
<ul>
<li>如按回车才能触发 <code>@keydown.enter=&quot;searchWeather&quot;</code></li>
<li>按F1：Vue.config.keyCodes.f1 = 112    F1的键值就是112</li>
<li>若既想要回车、又想F1：<code>@keydown.enter.f1=&quot;searchWeather&quot;</code></li>
</ul>
</li>
</ul>
<h3 id="案例：查询天气，跟回车键才能触发"><a href="#案例：查询天气，跟回车键才能触发" class="headerlink" title="案例：查询天气，跟回车键才能触发"></a>案例：查询天气，跟回车键才能触发</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 绑定输入框回车事件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keydown.enter.f1</span>=<span class="string">"searchWeather"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">v-model</span>=<span class="string">"city"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">		<span class="comment">&lt;!-- 阻止默认事件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> @<span class="attr">click.prevent</span>=<span class="string">"searchWeather"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"weather"</span>&gt;</span>	//显示天气内容</span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;tmp&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;brief&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">"ctrlEvent"</span>&gt;</span>按住ctrl事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">	<span class="comment">// 配置按键的自定义修饰符</span></span></span><br><span class="line">	Vue.config.keyCodes.f1 = 112</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el:<span class="string">"#app"</span>,</span></span><br><span class="line">		data:&#123;</span><br><span class="line"><span class="actionscript">			city:<span class="string">"广州"</span>,</span></span><br><span class="line"><span class="actionscript">			tmp:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">			brief:<span class="string">""</span></span></span><br><span class="line">		&#125;,</span><br><span class="line">		methods:&#123;</span><br><span class="line"><span class="javascript">			searchWeather:<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">"查询天气"</span>)</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="keyword">this</span>.city)	<span class="comment">//拿到值就可进行ajax了：可以引用JQ的或原生的，比如找和风天气的api</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">let</span> httpUrl = <span class="string">`https://free-api.heweather.net/s6/weather/now?location=<span class="subst">$&#123;<span class="keyword">this</span>.city&#125;</span>&amp;key=3c497450d8e44c5280421ceaba1db581`</span><span class="comment">//你要请求的地址</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">let</span> res = <span class="keyword">await</span> fetch(httpUrl)	<span class="comment">//开始做ajax请求：用异步或ES6箭头函数都可以</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">let</span> result = <span class="keyword">await</span> res.json()<span class="comment">//异步，所以要等待。到这就拿到了，可以打印查看。提交查看对应地址的数据</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(result)</span></span><br><span class="line"><span class="javascript">				<span class="keyword">let</span> now = result.HeWeather6[<span class="number">0</span>].now; <span class="comment">//细化数据</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">this</span>.tmp = now.tmp;<span class="comment">//细化数据：温度</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">this</span>.brief = now.cond_txt;<span class="comment">//细化数据：多云</span></span></span><br><span class="line">			&#125;,</span><br><span class="line"><span class="actionscript">			ctrlEvent:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">'ctrlEvent'</span>)</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>应用场景：</p>
<p><strong>若表达式内容要反复修改、写复杂的表达式</strong>(如循环条件渲染，要反复地先循环后判断，比较消耗性能)</p>
<ul>
<li>在一次修改情况下，它和{{}}性能相同</li>
<li>若要反复修改、写复杂的表达式，则计算属性 性能更好：因为它<strong>会将计算结果进行缓存</strong>，只要表达式里数据不改变，就不会重新计算。</li>
</ul>
{{函数名}}、vue实例中添加：

<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">	函数名:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;	<span class="comment">//声明形式1</span></span><br><span class="line">		...</span><br><span class="line">		<span class="keyword">return</span>	...	  <span class="comment">//计算属性必须要有返回值</span></span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	函数名:<span class="function"><span class="params">()</span>=&gt;</span>&#123;	<span class="comment">//声明形式2</span></span><br><span class="line">		...</span><br><span class="line">		<span class="keyword">return</span>	...	  <span class="comment">//计算属性必须要有返回值</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="循环条件渲染改进"><a href="#循环条件渲染改进" class="headerlink" title="循环条件渲染改进"></a>循环条件渲染改进</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 之前已经在vue中添加了student对象数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item,index in oddStudents"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;item.studentName&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">oddStudents:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> results = <span class="keyword">this</span>.students.filter(<span class="function">(<span class="params">item,i</span>)=&gt;</span>&#123;	<span class="comment">//filter:过滤方法</span></span><br><span class="line">		<span class="keyword">return</span> item.age%<span class="number">2</span>==<span class="number">0</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="计算属性的setter-了解"><a href="#计算属性的setter-了解" class="headerlink" title="计算属性的setter(了解)"></a>计算属性的setter(了解)</h3><p>即 计算属性 计算完后，也把计算完后的值给 原来值</p>
<p>内容：</p>
<ul>
<li>getter:<strong>计算</strong>后的值</li>
<li>setter：去<strong>改</strong>原来的值</li>
</ul>
<p>举例：反转vue数据msg，计算之后也能把msg改成计算值</p>
<p>原来的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;reverseMsg&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    reverseMsg:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.msg.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)<span class="comment">//分解、反转、连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后的</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    reverseMsg:&#123;</span><br><span class="line">    	<span class="keyword">get</span>:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;		<span class="comment">//计算</span></span><br><span class="line">        	<span class="keyword">return</span> <span class="keyword">this</span>.msg.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>:<span class="function"><span class="keyword">function</span><span class="params">(val)</span></span>&#123;		<span class="comment">//修改。修改一定要传值</span></span><br><span class="line">        	<span class="keyword">this</span>.msg = value.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><p>用来监听数据的变化。建议少用，会消耗性能</p>
<p>如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">watch</span>:&#123;</span><br><span class="line">	<span class="attribute">msg</span>:<span class="built_in">function</span>(val)&#123;		//参数为：要监听变化的值</span><br><span class="line">		console.<span class="built_in">log</span>(<span class="string">"监听事件————msg"</span>)</span><br><span class="line">		console.<span class="built_in">log</span>(val)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="绑定类名-5种方式"><a href="#绑定类名-5种方式" class="headerlink" title="绑定类名(5种方式)"></a>绑定类名(5种方式)</h2><p>用v-bind:绑定类名，使设置样式的方法更灵活</p>
<p>这样就可以不用在想要获取样式时，给它添加class.</p>
<p>注意：可以在已有class的标签上添加，来追加类。</p>
<p>1、放置字符串</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"styleStr"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    styleStr:<span class="string">"abc cba"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、通过<strong>对象</strong>的方式决定是否存在某个、多个类。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.action</span>&#123;</span></span><br><span class="line">		width: 200px;</span><br><span class="line">		height: 200px;</span><br><span class="line">		background: skyblue;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;active:isTrue&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    isTrue:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、直接放置<strong>对象</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"styleObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    styleObj:&#123;<span class="attr">active</span>:<span class="literal">true</span>,<span class="string">"col-lg-6"</span>:<span class="literal">true</span>&#125;	<span class="comment">//注意：如使用有-的类，如bootstrap类，在对象中是非法的，要用“”括起</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后就可直接用对象的方式操作</p>
<p>4、放置数组</p>
<blockquote>
<p>老放true、false太累了，我们可以直接放置数组</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"styleArr"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    styleArr:[<span class="string">'col-xs-12'</span>,<span class="string">'red-bg'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后就可直接用数组的方式操作：</p>
<p>添加        如app.styleArr.push(‘blue-bg’)</p>
<p>删除        如app.styleArr.pop()</p>
<p>5、数组和对象混合使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"styleArrObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    styleArrObj:[<span class="string">'col-xs-12'</span>,&#123;<span class="attr">active</span>:<span class="literal">true</span>&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h2><p>用v-bind:绑定</p>
<p>1、对象方式的变量拼接（太麻烦）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS内联样式变量拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background: skyblue;"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:style</span>=<span class="string">"&#123; border: borderWidth+'px solid red',padding:paddingWidth+'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">	borderWidth:50,</span><br><span class="line">	paddingWidth:30,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、直接放置对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styleObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    styleObj:&#123;</span><br><span class="line">        width:<span class="string">"200px"</span>,</span><br><span class="line">        height:<span class="string">"300px"</span>,</span><br><span class="line">        padding:<span class="string">"50px"</span>,</span><br><span class="line">        <span class="string">'background-color'</span>:<span class="string">'skyblue'</span>	<span class="comment">//或驼峰命名不加引号</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、直接放置数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styleArr"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    styleArr:[</span><br><span class="line">        &#123;</span><br><span class="line">            width:<span class="string">"200px"</span>,</span><br><span class="line">            height:<span class="string">"300px"</span>,</span><br><span class="line">            padding:<span class="string">"50px"</span>,</span><br><span class="line">            <span class="string">'background-color'</span>:<span class="string">'skyblue'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            border:<span class="string">"30px solid yellow"</span></span><br><span class="line">            &#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小案例：点击按钮，右边弹出侧边栏</p>
<p>用绑定类名实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">		首页</span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toggleMenu"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>切换侧边栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rMenu"</span> <span class="attr">:class</span>=<span class="string">"&#123;active:isShow&#125;"</span>&gt;</span></span><br><span class="line">		侧边栏</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    toggleMenu:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isShow = !<span class="keyword">this</span>.isShow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用绑定内联样式实现</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    &lt;div class=&quot;page&quot;&gt;
        首页
        &lt;button @click=&quot;toggleMenu&quot; type=&quot;button&quot;&gt;切换侧边栏&lt;/button&gt;
    &lt;/div&gt;
    &lt;div class=&quot;rMenu&quot; :style=&quot;{transform: &apos;translateX(&apos;+menuWidth+&apos;vw)&apos;}&quot;&gt;
        侧边栏
    &lt;/div&gt;
&lt;/div&gt;
&lt;script src=&quot;js/vue.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    let app = new Vue({
        el:&quot;#app&quot;,
        data:{
            menuWidth:100
        },
        methods:{
            toggleMenu:function(){
                if(this.menuWidth==100){
                    this.menuWidth = 70
                }else{
                    this.menuWidth = 100
                }
            }
        }
    })
&lt;/script&gt;</code></pre><h2 id="绑定表单输入v-model"><a href="#绑定表单输入v-model" class="headerlink" title="绑定表单输入v-model"></a>绑定表单输入v-model</h2><p>靠<code>v-model</code>来完成操作,而不靠{{}}。</p>
<p>input、textarea、</p>
<p>checkbox（注意v-model和v-for不能混合使用，要<code>:value=&quot;item&quot;</code>）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>复选框:选择喜欢的水果<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"item in fruits"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item&#125;&#125;		//显示复选框文本</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">v-model</span>=<span class="string">"checkFruits"</span> <span class="attr">:value</span>=<span class="string">"item"</span> /&gt;</span>	//显示复选框选项</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;checkFruits&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>	//此处v-model</span><br><span class="line"></span><br><span class="line">js的：</span><br><span class="line">data:&#123;</span><br><span class="line">    fruits:['苹果','雪梨',"香蕉","葡萄"],</span><br><span class="line">    checkFruits:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>radiobox，与上面类似</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>单选框:选择最喜欢的水果<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"item in fruits"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"zfruit"</span> <span class="attr">v-model</span>=<span class="string">"radioFruits"</span> <span class="attr">:value</span>=<span class="string">"item"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;radioFruits&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">js的：</span><br><span class="line">data:&#123;</span><br><span class="line">    fruits:['苹果','雪梨',"香蕉","葡萄"],</span><br><span class="line">    radioFruits:""		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>select    注意：不是给option绑定。因为iOS的bug，所以要提供一个值为空的禁用选项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单选 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>选项框：选择你居住的城市<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"chooseCity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span>	<span class="comment">&lt;!-- 禁用选项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"item in citys"</span> <span class="attr">:value</span>=<span class="string">"item"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;chooseCity&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 多选。要按住ctrl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>选项框：选择你喜欢的城市<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"moreCity"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"item in citys"</span> <span class="attr">:value</span>=<span class="string">"item"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;moreCity&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">js的</span><br><span class="line">chooseCity:"",</span><br><span class="line">moreCity:[]</span><br></pre></td></tr></table></figure>

<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>.trim 忽略空格 </p>
<p>将字符转变为数字获取：<code>.number</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>将字符串变为数字获取<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">JS的：</span><br><span class="line">age:16</span><br></pre></td></tr></table></figure>

<p>小案例：todoList</p>
<h1 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h1><p>提供了transition的封装组件。会自动识别v-if、v-show的true、false</p>
<p>过程：将要过渡的地方<strong>包裹</strong>起来（会给包裹的内容<strong>自动追加</strong>class）；告知transition过渡方式，如<code>name=&quot;fade&quot;</code>、<code>name=&quot;slideRight&quot;</code>（属性name会与框架追加的类名一致）；<strong>需要自己写</strong>会追加的类的样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 前缀与自定义的属性相同，后面的不能改。里面内容可 改 */</span></span><br><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过渡的类名</p>
<p>若想用库，则需要自定义过渡的类名，具体到官网看。</p>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><blockquote>
<p>直接看官网图就够了。</p>
</blockquote>
<p><strong>1、什么是生命周期？</strong>生命周期到底有哪些阶段？</p>
<p>8个生命周期函数，只需要知道生命周期函数即可。</p>
<p>创建前：此时数据data和事件方法methods还未绑定到app对象上</p>
<p>创建后：数据data和方法methods绑定到应用对象app上</p>
<p>加载前：渲染之前,根据数据生成的DOM对象是获取不到的</p>
<p>加载后：渲染之后,可以获取数据生成的DOM对象</p>
<p>更新：内容已更新完毕</p>
<p>销毁。</p>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><blockquote>
<p>组件相当于一个小应用</p>
</blockquote>
<p><strong>1、创建组件</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(“组件名”,&#123;	<span class="comment">//创建完后，是全局的	</span></span><br><span class="line">	template:<span class="string">'&lt;h1&gt;&#123;&#123;laochen&#125;&#125;&lt;/h1&gt;'</span>,<span class="comment">//要设置个模板——写视图内容</span></span><br><span class="line">	data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;	<span class="comment">//注意：这儿不再是&#123;&#125;了而是函数，因为组件要反复使用，需要返回一个新的对象。这儿看情况加，看数据是哪给的</span></span><br><span class="line">    	<span class="keyword">return</span> &#123;</span><br><span class="line">            laochen:<span class="string">"hello laochen"</span></span><br><span class="line">        &#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>2、注册组件</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    components:&#123;	<span class="comment">//注册组件</span></span><br><span class="line">        <span class="string">'组件名'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>3、使用组件</strong></p>
<p>把组件当标签用，放到其它组件中。</p>
<h2 id="父子传值"><a href="#父子传值" class="headerlink" title="父子传值"></a>父子传值</h2><p>父组件传值给子组件：1、给子组件设<strong>props的值</strong>，2、往子组件标签的属性里去传值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 从父组件传值到子组件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 显示组件。注意：这儿属性只能用-而不能用驼峰 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 静态属性：props属性前不加:，就不是动态，不会变 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span> <span class="attr">school-name</span>=<span class="string">"清华北大"</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 动态属性。注意这儿的引号：不然动态属性会认为里面是个变量。加了引号就是字符串 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span> <span class="attr">:school-name</span>=<span class="string">"'上海浙大'"</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 动态属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span> <span class="attr">:school-name</span>=<span class="string">"schoolList[0]"</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 循环传值组件：循环，绑定属性、值给好。可以再拿个索引值：定义属性、把index传进去。建议尽量带key，'abc'+可有可不有：key只是给vue用了计算的，与我们无关--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span> <span class="attr">v-for</span>=<span class="string">"item,index in schoolList"</span> <span class="attr">:key</span>=<span class="string">"'abc'+index"</span> <span class="attr">:index</span>=<span class="string">'index'</span> <span class="attr">:school-name</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	<span class="comment">//产品组件</span></span><br><span class="line">	Vue.component(<span class="string">"school"</span>,&#123;</span><br><span class="line">		props:[<span class="string">'schoolName'</span>,<span class="string">'index'</span>],</span><br><span class="line">		template:<span class="string">`&lt;li&gt;</span></span><br><span class="line"><span class="string">					&lt;h3&gt;&#123;&#123;index&#125;&#125;-学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h3&gt;				</span></span><br><span class="line"><span class="string">				&lt;/li&gt;`</span>	<span class="comment">//1、把父组件传来的变量放到props，2、props再传到模板这，3、最后放到父组件视图中的子组件标签中当属性，给子组件标签使用</span></span><br><span class="line">	&#125;)</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//根组件</span></span><br><span class="line">	<span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">		el:<span class="string">"#app"</span>,</span><br><span class="line">		data:&#123;</span><br><span class="line">			schoolList:[<span class="string">'sxt'</span>,<span class="string">'czbk'</span>,<span class="string">'xmg'</span>]<span class="comment">//父组件数据</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)	</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="子父传值"><a href="#子父传值" class="headerlink" title="子父传值"></a>子父传值</h2><p>将子组件的值 传给 父组件：通过<strong>自定义触发事件<code>$emit</code></strong>、监听函数@、进行数据的修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 循环传值组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span> <span class="attr">v-for</span>=<span class="string">"item,index in schoolList"</span> @<span class="attr">cschool</span>=<span class="string">'changeEvent'</span> <span class="attr">:key</span>=<span class="string">"'abc'+index"</span> <span class="attr">:index</span>=<span class="string">'index'</span> <span class="attr">:school-name</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>选中的学校是：&#123;&#123;chooseSchool&#125;&#125;<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	<span class="comment">//产品组件</span></span><br><span class="line">	Vue.component(<span class="string">"school"</span>,&#123;</span><br><span class="line">		props:[<span class="string">'schoolName'</span>,<span class="string">'index'</span>],</span><br><span class="line">		template:<span class="string">`&lt;li&gt;</span></span><br><span class="line"><span class="string">					&lt;h3&gt;&#123;&#123;index&#125;&#125;-学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h3&gt;				</span></span><br><span class="line"><span class="string">					&lt;button @click="chooseEvent"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">				&lt;/li&gt;`</span>	<span class="comment">//将子组件中点击按钮选择的学校 传给 父组件：子传父</span></span><br><span class="line">    	methods:&#123;</span><br><span class="line">    		chooseEvent:<span class="function"><span class="keyword">function</span>(<span class="params">schoolName</span>)</span>&#123; <span class="comment">//子组件先拿到数据</span></span><br><span class="line">    			<span class="keyword">this</span>.$emit(<span class="string">'cschool'</span>,schoolName)<span class="comment">//给触发事件自定义名。事件可以定义数据、传值数据，现在就把值传进来</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//根组件</span></span><br><span class="line">	<span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">		el:<span class="string">"#app"</span>,</span><br><span class="line">		data:&#123;</span><br><span class="line">			schoolList:[<span class="string">'清华'</span>,<span class="string">'北大'</span>,<span class="string">'浙大'</span>,<span class="string">'中大'</span>]<span class="comment">//父组件数据</span></span><br><span class="line">            chooseSchool:<span class="string">""</span></span><br><span class="line">		&#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            changeEvent:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;	<span class="comment">//监听触发。事件传值完，这里肯定就能拿到数据了！</span></span><br><span class="line">                <span class="keyword">this</span>.chooseSchool = data <span class="comment">//父组件拿到数据了，那此时就可以修改数据了。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;)	</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><p>除了props以外的方法不大建议，组件之间尽量低耦合，不要交互在一起。否则一有改动，可能有些问题不好发现</p>
<p>1、将父元素方法 传给 子元素</p>
<p>不触发事件，改为子组件标签里传父组件的方法：<code>:action=&#39;方法名&#39;</code>、再把这个方法传到子组件中<code>this.action(schoolName)</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 循环传值组件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 因为父元素的方法可以直接修改父元素的数据</span></span><br><span class="line"><span class="comment">			 所以将父元素的方法传递给子元素，</span></span><br><span class="line"><span class="comment">			 然后由子元素进行调用，从而修改父元素的数据</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span> <span class="attr">v-for</span>=<span class="string">"item,index in schoolList"</span> <span class="attr">:action</span>=<span class="string">'changeEvent'</span> <span class="attr">:key</span>=<span class="string">"'abc'+index"</span> <span class="attr">:index</span>=<span class="string">'index'</span> <span class="attr">:school-name</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span>	<span class="comment">&lt;!--绑定方法：2、子组件通过这个方法来修改父组件的数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>选中的学校是：&#123;&#123;chooseSchool&#125;&#125;<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	<span class="comment">//产品组件</span></span><br><span class="line">	Vue.component(<span class="string">"school"</span>,&#123;</span><br><span class="line">		props:[<span class="string">'schoolName'</span>,<span class="string">'index'</span>,<span class="string">'action'</span>],<span class="comment">//方法传进来</span></span><br><span class="line">		template:<span class="string">`&lt;li&gt;</span></span><br><span class="line"><span class="string">					&lt;h3&gt;&#123;&#123;index&#125;&#125;-学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h3&gt;				</span></span><br><span class="line"><span class="string">					&lt;button @click="chooseEvent"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">				&lt;/li&gt;`</span>	</span><br><span class="line">    	methods:&#123;</span><br><span class="line">    		chooseEvent:<span class="function"><span class="keyword">function</span>(<span class="params">schoolName</span>)</span>&#123; </span><br><span class="line">    			<span class="keyword">this</span>.action(schoolName) </span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//根组件</span></span><br><span class="line">	<span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">		el:<span class="string">"#app"</span>,</span><br><span class="line">		data:&#123;</span><br><span class="line">			schoolList:[<span class="string">'清华'</span>,<span class="string">'北大'</span>,<span class="string">'浙大'</span>,<span class="string">'中大'</span>]</span><br><span class="line">            chooseSchool:<span class="string">""</span></span><br><span class="line">		&#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            changeEvent:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;	<span class="comment">//1、把这里父元素的方法传给子组件</span></span><br><span class="line">                <span class="keyword">this</span>.chooseSchool = data <span class="comment">//3、修改父组件的数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;)	</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、不传值了。子元素通过<strong>调用$parent属性的方法</strong>找到父元素的vue对象</p>
<p>去掉绑定方法<code>:action=&quot;事件名&quot;</code>，把子组件里的<code>this.action(schoolName)</code>改为</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$parent.changeEvent(schoolName)</span><br></pre></td></tr></table></figure>

<p>3、直接在子组件的点击事件上写方法（在子元素视图直接<strong>调用父元素方法</strong>）</p>
<p>去掉子元素的methods，在template里改</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;button @<span class="attribute">click</span>=<span class="string">"<span class="variable">$parent</span>.changeEvent(schoolName)"</span>&gt;选择学校&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>4、通过<strong>父元素数据</strong>直接修改(要执行的内容少才能用，“”里不能加分号)</p>
<p>直接</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;button @<span class="attribute">click</span>=<span class="string">"<span class="variable">$parent</span>.chooseSchool = schoolName"</span>&gt;选择学校&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>5、$root    最外层的app根组件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;button @<span class="attribute">click</span>=<span class="string">"<span class="variable">$root</span>.changeEvent(schoolName)"</span>&gt;选择学校&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>6、父组件的$children，使用方式类似（通过mouted()可打印查看）</p>
<h2 id="在组件上使用v-model"><a href="#在组件上使用v-model" class="headerlink" title="在组件上使用v-model"></a>在组件上使用v-model</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input-com</span> <span class="attr">:username</span>=<span class="string">'username'</span> @<span class="attr">input</span>=<span class="string">'username=$event'</span>&gt;</span><span class="tag">&lt;/<span class="name">input-com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input-com</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">input-com</span>&gt;</span>		<span class="comment">&lt;!--2、再使用v-model--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'input-com'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">        props:[<span class="string">'username'</span>],</span></span><br><span class="line"><span class="actionscript">        template:`&lt;input type=<span class="string">"text"</span> @input=<span class="string">"$emit('input',$event.target.value)"</span> :value=<span class="string">"username"</span> /&gt;`,		<span class="comment">//	//1、先写这儿</span></span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            username:<span class="string">""</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">            changeEvent:<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.username = data</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><blockquote>
<p>当网页结构不变时，想插入不同的数据，就可以使用组件的插槽了</p>
<p>怎么让组件标签中的文本有效果，就要用到插槽</p>
<p>按上一节的传值方式也可以，但不够灵活</p>
</blockquote>
<p>1、slot</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-com</span> <span class="attr">:html</span>=<span class="string">'content'</span>&gt;</span><span class="tag">&lt;/<span class="name">alert-com</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- slot里面的内容变量只跟父元素有关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-com1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>小心陈老师,&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">alert-com1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'alert-com'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">        props:[<span class="string">'html'</span>],</span></span><br><span class="line">        template:`</span><br><span class="line"><span class="javascript">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>温馨提示<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="template-variable">&#123;&#123;html&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">`</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'alert-com1'</span>,&#123;</span></span><br><span class="line">        template:`</span><br><span class="line"><span class="javascript">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>温馨提示<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">`,</span><br><span class="line"><span class="actionscript">        data:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                abc:<span class="string">"abc123"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            content:<span class="string">"小心熊出没"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、动态组件<code>:is</code>    切换不同的组件（但在js里写太麻烦，所以vue出了单文件组件——正常开发，用脚手架vue-cli）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(1)"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(2)"</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(3)"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(4)"</span>&gt;</span>个人<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"laochen"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello hello hello vue<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> com1 = Vue.component(<span class="string">"index-com"</span>,&#123;</span></span><br><span class="line"><span class="actionscript">        name:<span class="string">'index'</span>,</span></span><br><span class="line"><span class="actionscript">        template:<span class="string">'#laochen'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> com2 =Vue.component(<span class="string">"list-com"</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>列表内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> com3 =Vue.component(<span class="string">"news-com"</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>新闻内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> com4 =Vue.component(<span class="string">"me-com"</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>个人中心内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            com:com1</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">            chooseContent:<span class="function"><span class="keyword">function</span><span class="params">(id)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(id)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//通过获取id,选择注册好的组件</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.com = <span class="keyword">this</span>.$options.components[<span class="string">'com'</span>+id]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            com1,com2,com3,com4</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><ul>
<li>虚拟DOM</li>
<li>v-if和v-show区别<ul>
<li>v-if：不显示时，第一次就直接不渲染；若将显示内容改为不显示，将内容直接从DOM去除。建议<strong>只是渲染一次</strong>，用v-if。</li>
<li>v-show：不显示时，就会改成display:none,会渲染在DOM上。建议<strong>反复需要切换</strong>的内容，使用v-show。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>01-Node.js</title>
    <url>/2020/03/29/01-Node.js/</url>
    <content><![CDATA[<p>官网<a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></p>
<h2 id="Node是什么？"><a href="#Node是什么？" class="headerlink" title="Node是什么？"></a>Node是什么？</h2><p><strong><em>Node</em>.<em>js</em> 是环境</strong>。一个基于 Chrome V8 引擎的 <strong>JS运行 环境</strong>。</p>
<p>该环境里的JS操作<strong>ECMA</strong>(ECMAscript)。</p>
<a id="more"></a>

<blockquote>
<p>该环境里的js不能操作BOM、DOM。BOM、DOM是浏览器的</p>
</blockquote>
<h2 id="Node的优势"><a href="#Node的优势" class="headerlink" title="Node的优势"></a>Node的优势</h2><p>高并发：处理单一服务器时更好</p>
<p>io密集：文件操作、网络操作、数据库更好（指web端方面，不是指服务器端）</p>
<h2 id="安装Node-环境搭建"><a href="#安装Node-环境搭建" class="headerlink" title="安装Node(环境搭建)"></a>安装Node(环境搭建)</h2><p>node就是环境，只安装它就行。</p>
<blockquote>
<p>node会自带npm安装，不用去单独安装npm。(npm是包管理)</p>
</blockquote>
<p>1.官网下载好，一路下一步即可。</p>
<p>2.安装测试：node -v和npm -v</p>
<p>3.试用测试：随便写个js，<strong>进入该目录中</strong>用cmd或git bash执行它<strong>node xx.js;</strong>，无误即可。</p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="CommonJS规范-模块化"><a href="#CommonJS规范-模块化" class="headerlink" title="CommonJS规范(模块化)"></a>CommonJS规范(模块化)</h2><blockquote>
<p>CommonJS最大特点：模块化。</p>
</blockquote>
<ul>
<li>每一个文件都是一个模块，都有自己的作用域。(如a.js、b.js都是一个模块)</li>
<li>在模块内部，module代表自身。</li>
<li><strong>引出：</strong>模块中module.exports提供对外接口。(如b要用a里的变量，a的module.exports提供一个对外接口module.exports.变量。b如何去用接口也是关键)</li>
</ul>
<p>require语法(引入)</p>
<ul>
<li>/代表绝对路径, ./代表相对路径</li>
<li>默认后缀: js json node。（即执行时可不写这些后缀，会自动依次去找。若都没有，报错。）</li>
<li>require(‘…’) ==&gt;会引用node_modules目录里的文件</li>
</ul>
<h3 id="重要操作：模块间的抛出与引入"><a href="#重要操作：模块间的抛出与引入" class="headerlink" title="重要操作：模块间的抛出与引入"></a>重要操作：模块间的抛出与引入</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模块间的引出与引入:b引用a的内容</span></span><br><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">var</span> t1 = <span class="number">888</span>;</span><br><span class="line"><span class="keyword">var</span> t2 = <span class="number">999</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"fn1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.t1 = t1;</span><br><span class="line"><span class="built_in">module</span>.exports.fn1 = fn1;</span><br><span class="line"><span class="comment">//b.js</span></span><br><span class="line"><span class="keyword">var</span> mod = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mod.t1);</span><br><span class="line">mod.fn1();</span><br></pre></td></tr></table></figure>

<h2 id="全局对象global"><a href="#全局对象global" class="headerlink" title="全局对象global"></a>全局对象global</h2><blockquote>
<p>浏览器的全局对象：window</p>
</blockquote>
<p>node走ECMAscript语法，它的全局对象是global</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模块间的引出与引入:b引用a的内容+全局对象</span></span><br><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">var</span> t1 = <span class="number">888</span>;</span><br><span class="line">global.t2 = <span class="number">999</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"fn1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.t1 = t1;</span><br><span class="line"><span class="built_in">module</span>.exports.fn1 = fn1;</span><br><span class="line"><span class="comment">//b.js</span></span><br><span class="line"><span class="keyword">var</span> mod = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mod.t1);</span><br><span class="line"><span class="built_in">console</span>.log(t2);</span><br><span class="line">mod.fn1();</span><br></pre></td></tr></table></figure>

<h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><h3 id="npm介绍"><a href="#npm介绍" class="headerlink" title="npm介绍"></a>npm介绍</h3><p>包管理器</p>
<p>作用：让js开发者下载别人写的包。也可上传自己写的包。</p>
<p>优势：集中管理包，方便查询下载。（如项目中用到轮播插件swiper，用搜索引擎或进它官网找不难。但项目中要用到秒杀插件、倒计时插件等，搜索引擎难找好的，就可去npm包看下。）</p>
<h3 id="npm常用命令"><a href="#npm常用命令" class="headerlink" title="npm常用命令"></a>npm常用命令</h3><p>npm -v    查看版本</p>
<p>npm init    初始化项目</p>
<p>npm install xxx    下载包</p>
<p>npm list    查看所有包</p>
<p>命令大全<a href="https://www.3mooc.com/front/articleinfo/98" target="_blank" rel="noopener">https://www.3mooc.com/front/articleinfo/98</a></p>
<h3 id="npm下载-包"><a href="#npm下载-包" class="headerlink" title="npm下载 包"></a>npm下载 包</h3><p>如npm install xxx下载完包后，项目目录会出现node_modules文件夹，里面除了包的文件夹，其它都是相关依赖。</p>
<p>测试包下载成功：拿文件去引用包输入下面代码，node运行。</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">express</span> = require('<span class="built_in">express</span>');</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">express</span>);</span><br></pre></td></tr></table></figure>

<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><blockquote>
<p>当npm init初始化后，会在项目目录生成package.json文件。</p>
</blockquote>
<p>是npm包信息。</p>
<p>是和node_modules相辅相成的：如github很多项目没有node_modules目录，项目跑不起来——但有package，在项目目录中运行npm install，就会把项目的所有依赖都下载到node_modules里。</p>
<p>信息有：包的名称、版本、依赖等。</p>
<h3 id="cnmp淘宝镜像"><a href="#cnmp淘宝镜像" class="headerlink" title="cnmp淘宝镜像"></a>cnmp淘宝镜像</h3><p>npm国外的，速度慢；</p>
<p>cnpm国内的</p>
<p>安装命令：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g cnpm --registry=https://registry.<span class="built_in">npm</span>.taobao.org</span><br></pre></td></tr></table></figure>

<h1 id="重要操作"><a href="#重要操作" class="headerlink" title="重要操作"></a>重要操作</h1><h2 id="http创建Node服务器"><a href="#http创建Node服务器" class="headerlink" title="http创建Node服务器"></a>http创建Node服务器</h2><blockquote>
<p>php要跑起来有apache的支持，而Node就有http的支持</p>
<p>Node中的http模块：是内置的系统模块，无需下载。</p>
<p>http.server是一个基于事件的http服务器，内部c++封装实现，接口JS实现</p>
</blockquote>
<p>在项目目录建个server.js，输入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);	<span class="comment">//引入http模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;	<span class="comment">//创建服务器。参数1：封装了客户端请求，参数2：封装了服务器响应</span></span><br><span class="line">	res.write(<span class="string">"1111"</span>);	<span class="comment">//响应输出</span></span><br><span class="line">	res.end();			<span class="comment">//响应结束，每次都要写</span></span><br><span class="line">&#125;)						<span class="comment">//&#125;).listen(8080);</span></span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>);	<span class="comment">//监听端口。或在server的）后.调用，来连写</span></span><br></pre></td></tr></table></figure>

<p>注意：会写一个比较大的端口，因为默认80经常会有各种各样的问题</p>
<p>先不运行该文件，进入localhost:8080会报错。再运行即可。</p>
<h2 id="get请求url数据的操作"><a href="#get请求url数据的操作" class="headerlink" title="get请求url数据的操作"></a>get请求url数据的操作</h2><blockquote>
<p>如果前台发出get请求，那后台如何拿到数据，解析格式呢？</p>
<p>get是路径传值，可通过req.url去拿到</p>
</blockquote>
<p>方法1：得到路径req.url 、引入url模块、url.parse(reqUrl,<strong>true</strong>).query拿到query</p>
<p>方法2：不用写true，引入querystring模块、querystring.parse(…)</p>
<blockquote>
<p>具体看这：</p>
<p>一、拿到数据：</p>
<p>先创建前台页面index.html、server.js创建Node服务器</p>
<p><strong>拿到url数据：req.url</strong></p>
<p>进入项目目录，命令行运行server.js启动服务器，再点击链接，命令行里拿到了数据。</p>
<p>数据是字符串不对，应该拿到json数据对象</p>
<p>二、拿到正确的数据</p>
<p>引入url模块。（它实质是个对象）</p>
<p>引入url模块的方法parse。（方法parse会拿到对象格式，对象中的query值接近正确数据）</p>
<p>添加第二个参数：true。（就显示了正确的对象数据）</p>
<p>追加.query.title。（拿到对象的值）</p>
</blockquote>
<h2 id="get请求表单数据的操作"><a href="#get请求表单数据的操作" class="headerlink" title="get请求表单数据的操作"></a>get请求表单数据的操作</h2><p>其它操作跟上节一样。这儿注意表单的输入框必须加name属性，否则url上不会添加。</p>
<p>客户端打印要加表头转换编码res.writeHead(200,{“Content-Type”:”text/html;charset=utf8”})</p>
<blockquote>
<p>创建前台</p>
<p>创建服务器</p>
<p>通过get请求url数据的操作，拿到了表单数据。</p>
<p>页面显示数据。res.end(“用户名:”+formVal.userName+”—–&gt;”+”密码:”+formVal.userPwd);。（有乱码）</p>
<p>转换。res.writeHead(200,{“Content-Type”:”text/html;charset=utf8”})</p>
</blockquote>
<h2 id="post请求表单数据的操作"><a href="#post请求表单数据的操作" class="headerlink" title="post请求表单数据的操作"></a>post请求表单数据的操作</h2><blockquote>
<p>不能操作url请求，因为post数据不会显示在url上。</p>
<p>操作post：事件接收    2个事件：req.on(‘data’)    每次发送的数据；req.on(‘end’)    数据发送完成</p>
</blockquote>
<p>req.on(‘data’,(chunk)=&gt;{})    参数代表每次的数据，去生成个变量去{}做+=即可。这是过程，在这打印没有用。</p>
<p>req.on(‘data’,()=&gt;{})    这是结果，一定是在结果里打出完整用户输入内容。{}里可做操作：打印、响应结束</p>
<p>转换格式：引入模块querystring，通过querystring.parse打印变量。</p>
<blockquote>
<p>创建前台页面、创建Node服务器</p>
</blockquote>
<h2 id="通过Node连接mysql、查询内容"><a href="#通过Node连接mysql、查询内容" class="headerlink" title="通过Node连接mysql、查询内容"></a>通过Node连接mysql、查询内容</h2><blockquote>
<p>前提：</p>
<p>1.下载mysql：<a href="https://www.3mooc.com/front/articleinfo/99到官网或百度官网，点击下载社区版的第一个Download按钮" target="_blank" rel="noopener">https://www.3mooc.com/front/articleinfo/99到官网或百度官网，点击下载社区版的第一个Download按钮</a></p>
<p>2.novicat数据库管理工具连接mysql，新建数据库实例：库-&gt;表-&gt;字段</p>
</blockquote>
<p>写代码：</p>
<p>1.在目录中下载mysql包npm install mysql</p>
<p>2.引入mysql模块</p>
<p>3.配置mysql信息（默认端口3306，端口可不写。主机名：novicat连接时的ip：如localhost）</p>
<p>4.连接</p>
<p>5.进行什么查询操作（增删改查）</p>
<p>6.关闭</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : <span class="string">'主机名'</span>,</span><br><span class="line">  user     : <span class="string">'用户名'</span>,</span><br><span class="line">  password : <span class="string">'密码'</span>,</span><br><span class="line">  database : <span class="string">'库名称'</span>,</span><br><span class="line">  port     : <span class="string">'端口号'</span><span class="comment">//可不写</span></span><br><span class="line">&#125;);</span><br><span class="line">connection.connect();	<span class="comment">//连接</span></span><br><span class="line">connection.query(<span class="string">'select * from 表名称'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;<span class="comment">//数据库操作函数。查询(增删改查)完后返回的结果：错误信息、结果、字段数据</span></span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(results)</span><br><span class="line">&#125;);</span><br><span class="line">connection.end();	<span class="comment">//查询完关闭</span></span><br></pre></td></tr></table></figure>

<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>创建前台：登录页面</p>
<p>创建服务器：拿到post表单数据</p>
<p>连接数据库，<strong>条件查询</strong>信息。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span> 表名称：查询所有</span><br><span class="line">select * <span class="keyword">from</span> 表名称 where <span class="attribute">userName</span>=? <span class="keyword">and</span> <span class="attribute">userPwd</span>=?</span><br></pre></td></tr></table></figure>

<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">connection.query(<span class="string">'select * from 表名称 where userName=? and userPwd=?'</span>,[第一个?,第二个?],<span class="function"><span class="params">(err,results,fields)</span>=&gt;</span>&#123;		//<span class="number">3</span>个参数：查询语句、数组、函数</span><br><span class="line">	</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>和数据库里的内容对比。查到对应的返回成功，不对应则返回失败</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(results.length &gt;<span class="number">0</span>)&#123;</span><br><span class="line">	res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">"text/html;charset=utf8"</span>&#125;)</span><br><span class="line">	res.<span class="built_in">write</span>(<span class="string">'登录成功'</span>)</span><br><span class="line">	res.<span class="keyword">end</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>创建前台：注册页面</p>
<p>捋一下逻辑，如何去做内容：</p>
<p>​    1.首先要拿到用户输入的内容：通过http创建服务器、事件操作拿到post数据</p>
<p>​    2.然后放到数据库中：连接数据库、执行增语句、过程中有些问题到写时再看。而不是查删改语句了</p>
<p>要点——</p>
<p>​    1.增语句：insert into 表名称 value (100,123,456)    id、userName、userPwd</p>
<p>​    2.http会把网页图标也拿过来，导致每次拿数据，会多一行：要阻止它拿，如何操作呢？问题在于req.url，打印它查看为/favicon.icon。所以要先进行判定，req.url不为图标时才拿过来</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">if</span>(req.url!=<span class="string">'/favicon.icon'</span>)&#123;</span><br><span class="line">	......</span><br><span class="line">    <span class="selector-tag">connection</span><span class="selector-class">.query</span>(<span class="string">'insert into user value (?,?,?)'</span>,[<span class="number">0</span>,userName,userPwd],(err,results,fields)=&gt;&#123;	<span class="comment">//因为id是自增长的，所以用0表示默认自增长</span></span><br><span class="line">                    <span class="selector-tag">if</span>(err) <span class="selector-tag">throw</span> <span class="selector-tag">err</span>;</span><br><span class="line">                    <span class="selector-tag">res</span><span class="selector-class">.write</span>(<span class="string">"注册成功！！！"</span>);</span><br><span class="line">                    <span class="selector-tag">res</span><span class="selector-class">.end</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：数据库特性。如数据库内容id为11的数据删了，那下一条它的id则会从12开始。</p>
<h1 id="express框架"><a href="#express框架" class="headerlink" title="express框架"></a>express框架</h1><p>一个基于node.js的web应用开发<strong>框架</strong>。</p>
<p>建议使用webstrom开发工具：操作项目时更方便、更快捷。</p>
<h2 id="express目录结构"><a href="#express目录结构" class="headerlink" title="express目录结构"></a>express目录结构</h2><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">bin</span><br><span class="line">		www  <span class="comment">===》启动文件【入口文件】</span></span><br><span class="line">app.js   <span class="comment">===》全局配置文件</span></span><br><span class="line">node_modules	<span class="comment">===》项目依赖的包文件</span></span><br><span class="line">routers  <span class="comment">===》路由的配置</span></span><br><span class="line">views    <span class="comment">===》页面</span></span><br><span class="line">public   <span class="comment">===》静态资源  【css、img、js】</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>1.www中里面有端口号、连接到app.js全局配置文件等。（微信小程序的app.js也是全局配置文件）</p>
<p>2.关于访问页面：</p>
<p>过程——www给<strong>端口</strong>、引入app.js=&gt;连接到app.js，引入routes=&gt;routes，引入views，<strong>路由配置</strong>指定页面=&gt;打开视图views里的页面.ejs文件，里面有模板语法。页面中可以放入public里的资源</p>
</blockquote>
<h2 id="创建express项目"><a href="#创建express项目" class="headerlink" title="创建express项目"></a>创建express项目</h2><p>1.webstorm-new-project-选择Node.js EXpress App-选择项目目录-<strong>Template选择EJS模板</strong>-创建(-yes-this windows)-等待安装完毕即可。</p>
<p>2.运行框架：菜单-run-Run bin/www弹出端口号-打开浏览器访问地址-进到express欢迎界面</p>
<blockquote>
<p>了解</p>
<p>1.模板引擎：有模板语句</p>
<p>如php中有模板引擎smarty好用。express里也有模板引擎EJS好用</p>
<p>2.创建完会生成一个完整的工程目录，当然一些东西需要大家去填。但基本框架给你搭好了</p>
<p>3.如何知道端口：在项目目录/bin/www，这是启动文件</p>
</blockquote>
<h2 id="express路由操作"><a href="#express路由操作" class="headerlink" title="express路由操作"></a>express路由操作</h2><p>1.先到app.js引入路由（require()）、给一级路径分配路由(app.use())</p>
<p>2.再到routes里新建或修改.js配置路由（进行输入res.send或渲染res.render）、用键值定义模板语法中的内容，如(res.render(‘index’),{tite:’标题’,msg:’这是xxx信息’});。</p>
<p>3.再到views里新建或修改.ejs，用模板语法写页面去渲染。</p>
<p>二级路径直接在对应一级路径的.js下配置路由</p>
<h2 id="引入静态资源和ejs模板语法"><a href="#引入静态资源和ejs模板语法" class="headerlink" title="引入静态资源和ejs模板语法"></a>引入静态资源和ejs模板语法</h2><p>引入静态资源</p>
<p>1.放到对应目录中</p>
<p>2.views里的对应.ejs引入资源。注意路径：<strong>前面加/</strong>，如</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"/image/1.png"</span> <span class="attribute">alt</span>=<span class="string">""</span>&gt;</span><br></pre></td></tr></table></figure>

<p>模板语法：</p>
<p>(1)内容</p>
<p>1.定义内容：到对应.js中输入。如</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">res.render</span>(<span class="symbol">'index</span>'),&#123; </span><br><span class="line">	tite:<span class="symbol">'标题</span>',</span><br><span class="line">	msg:<span class="symbol">'这是xxx信息</span>'</span><br><span class="line">&#125;)<span class="comment">;。</span></span><br></pre></td></tr></table></figure>

<p>2.输出内容：到对应.ejs中输出。如&lt;%= title %&gt;，注意：<strong>=代表输出内容，，没有=代表js语句</strong></p>
<p>(2)JS语句</p>
<p>1.定义内容：如</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">res.render</span>(<span class="symbol">'index</span>'),&#123; </span><br><span class="line">	tite:<span class="symbol">'标题</span>',</span><br><span class="line">	msg:<span class="symbol">'这是xxx信息</span>',</span><br><span class="line">	arr:[<span class="symbol">'a</span>',<span class="symbol">'b</span>',<span class="symbol">'c</span>']</span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>2.输出js语句：&lt;% %&gt;，先把js语句写好再整理模板避免出错。如</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">%</span> <span class="attr">arr.forEach</span>((<span class="attr">ietm</span>)=&gt;</span>&#123; %&gt;</span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item</span> %&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="开发项目的基本流程"><a href="#开发项目的基本流程" class="headerlink" title="开发项目的基本流程"></a>开发项目的基本流程</h2><blockquote>
<p>这是基本流程，实际做时还要根据情况进行梳理。</p>
</blockquote>
<p>1.设计数据库</p>
<p>表、结构、字段都要设计得比较完美，添加数据（之后才开始做，后面若需求变或哪儿需要添加字段，到时候再添加）</p>
<p>2.封装连接库、连接数据库</p>
<blockquote>
<p>可在笔记中ctrl+f搜索封装连接库能找到怎么封装、怎么连接</p>
</blockquote>
<p>因为项目中很多地方都需要连接mysql，供后期方便使用：封装后查看哪需要连接数据库，引入封装连接库，就可.query进行数据库操作了。其次才是正常的业务逻辑调整</p>
<p>3.各功能的业务逻辑</p>
<blockquote>
<p>创建后台的静态页面可以在做功能时写，也可以先写好或找写好的。</p>
</blockquote>
<h2 id="项目1：express做简单的后台内容管理系统"><a href="#项目1：express做简单的后台内容管理系统" class="headerlink" title="项目1：express做简单的后台内容管理系统"></a>项目1：express做简单的后台内容管理系统</h2><p>这儿没做前台，只做了后台。</p>
<blockquote>
<p>基本流程</p>
<p>0.设计数据库：因为是教程，所以设计数据库是写到哪一块再创建哪一块，如做到登陆，就创建用户表。</p>
<p>0.创建后台的静态页面可以在做功能时写，也可以先写好</p>
<p>1.做登录功能：需要输入用户名、密码登录，才能进入该后台页面</p>
<p>2..做管理功能：做去增删改查等查询操作</p>
</blockquote>
<p>1.创建项目、运行项目测试是否正常</p>
<p>2.引入配置路由文件(.js)：到app.js中require</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var indexRouter</span> = require(<span class="string">'./routes/index'</span>);</span><br></pre></td></tr></table></figure>

<p>配置该文件的路径：到app.js中app.use。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">app</span><span class="selector-class">.use</span>(<span class="string">'/admin'</span>,indexRouter);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除user的require、app.use，没用</p>
</blockquote>
<p>4.修改完刷新，测试表单。查看是否配置路由成功。localhost:端口号/admin</p>
<p>5.编写后台页面。编写前先到对应.js文件删除模板定义内容参数，有用时再编写。</p>
<p>以下是各页面的编写。</p>
<h3 id="后台的登录页面"><a href="#后台的登录页面" class="headerlink" title="后台的登录页面"></a>后台的登录页面</h3><p>要点：路径、登陆</p>
<blockquote>
<p>登录表单index.ejs</p>
</blockquote>
<p>1.写静态</p>
<p>2.写路径：先想下希望跳转的页面</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">localhost:</span><span class="number">3000</span>/admin	登录表单</span><br><span class="line"><span class="symbol">localhost:</span><span class="number">3000</span><span class="meta-keyword">/admin/</span>main	希望跳转的页面</span><br></pre></td></tr></table></figure>

<p>所以action里写/admin/main。注意前面有/。</p>
<p>写完测试是否跳转。</p>
<p>3.实现登陆功能：输入什么才能登陆</p>
<blockquote>
<p>创建数据库，创建用户表user，里字段id、userName、userPwd。</p>
<p>封装连接库：</p>
<p>1.在项目根目录新建一个js文件sql.js，把数据库配置都放到这，后期直接query就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = require(<span class="string">'mysql'</span>); <span class="comment">//引入mysql模块</span></span><br><span class="line"><span class="keyword">var</span> db =mysql.createConnection(&#123;</span><br><span class="line">	host:<span class="string">""</span>,</span><br><span class="line">	user:<span class="string">""</span>,</span><br><span class="line">	password:<span class="string">""</span>,</span><br><span class="line">	database:<span class="string">""</span></span><br><span class="line">&#125;);	<span class="comment">//配置相关信息</span></span><br><span class="line"></span><br><span class="line">db.connect();	<span class="comment">//连接数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = db;	<span class="comment">//全局的抛出去,千万别写成局部的module.exports.db = db;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.在项目里下载mysql</p>
<p>3.封装后去看哪需要连接数据库，去连接</p>
<p>这儿index.js需要连接，引入封装连接库，然后通过.query即可操作</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var db</span> = require(<span class="string">"../sql.js"</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>（1）配置post</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">"/main"</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res,next)</span></span>&#123;	<span class="comment">//post数据要到的地方：/main</span></span><br><span class="line">	...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>写完代码后，在连接里输入res.end(“11”);。进入登陆页面随便输入点登录，跳转到main：NotFound，而数据库已添加了11；刷新项目后再第二次登陆，页面显示11，证明配置成功。</p>
<p>（2）拿到用户输入的内容</p>
<blockquote>
<p>没有express之前，post数据要用事件接受。</p>
<p>而express中封装了过程：直接用req.body即可。在webstorm里就可看到post数据了。</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">"/main"</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res,next)</span></span>&#123;	<span class="comment">//post数据对应的地方：/main</span></span><br><span class="line">	 <span class="keyword">var</span> val = req.body;</span><br><span class="line">	 <span class="keyword">var</span> userName = val.userName;</span><br><span class="line">	 <span class="keyword">var</span> userPwd = val.userPwd;</span><br><span class="line">	 </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>（3）作比较：查询数据库内容，把用户内容去作比较</p>
<p>先连接数据库：引入封装连接库文件：var db = require(“../sql.js”);</p>
<p>直接可以.query进行数据库操作</p>
<figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">db.query(<span class="string">'select * from user where userName=? and userPwd=?'</span>,[userName,userPwd],<span class="function"><span class="keyword">function</span><span class="params">(err,data)</span>&#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(err)&#123;	<span class="comment">//先进行判断</span></span><br><span class="line">		throw err;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(data.<span class="built_in">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		res.<span class="keyword">end</span>(<span class="string">"111"</span>);	<span class="comment">//登陆成功之后，肯定是跳转一个页面的：通过res.render("");可以渲染.但因为我们要找html模板所以先写到这</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		res.writeHead(<span class="number">200</span>,&#123;<span class="string">"Content"</span>:<span class="string">"text/html;charset=utf8"</span>&#125;);</span><br><span class="line">		res.<span class="keyword">end</span>(<span class="string">"登陆失败"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="后台主页渲染"><a href="#后台主页渲染" class="headerlink" title="后台主页渲染"></a>后台主页渲染</h3><blockquote>
<p>做登录以后的页面的展示</p>
<p>上一节最后我们是让主页显示111：res.end(“111”);。应该写res.render(“”);去渲染一个页面。</p>
</blockquote>
<p>1.想好渲染哪个静态页面？</p>
<p>这里渲染的主页是一个index.html</p>
<p>到view里新建个main.ejs，把静态页面的代码复制到这。填好了：res.render(“main”);。</p>
<p>刷新访问，发现有变化即成功。</p>
<p>2.改静态页面：改成路由路径    </p>
<blockquote>
<p>改了多少页面路径，就要配置多少路由、路径、多少js、多少ejs</p>
</blockquote>
<p>查看main.ejs</p>
<p>把页面路径都改好，改成路由形式，不用写后缀：/…    如src=“/top”</p>
<p>3.配置好路由和路径、创建js文件、创建ejs文件</p>
<p>配置路由、指定路径：到app.js中配置,如</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> topRouter = <span class="keyword">require</span>(<span class="string">'./routes/top'</span>);</span><br><span class="line"><span class="params">...</span></span><br><span class="line">app.use(<span class="string">'top'</span>,topRouter);</span><br></pre></td></tr></table></figure>

<p>创建js文件：在routes里创建，代码跟user.js一样，复制过来。改成res.render(“…”); user.js没有用了就把他删掉。</p>
<p>创建ejs文件：在view里创建，把对应页面的静态代码复制过来</p>
<p>4.引入静态资源、改路径（注意前面加/）</p>
<h3 id="菜系管理页面渲染"><a href="#菜系管理页面渲染" class="headerlink" title="菜系管理页面渲染"></a>菜系管理页面渲染</h3><blockquote>
<p>其它管理功能类似，这儿就不做了</p>
<p>把页面调整对了，再到数据库进行增删改查啥的</p>
</blockquote>
<p>1.改静态页面：改成路由路径    </p>
<p>2.创建.ejs</p>
<p>3.调整路由</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> topRouter = <span class="keyword">require</span>(<span class="string">'./routes/top'</span>);</span><br><span class="line"><span class="params">...</span></span><br><span class="line">app.use(<span class="string">'top'</span>,topRouter);</span><br></pre></td></tr></table></figure>

<p>4.创建.js、res.render(“”);渲染哪个页面</p>
<p>5.引入静态资源</p>
<p>6.点击跳转这些后面改。</p>
<h3 id="菜系管理-添加-查询"><a href="#菜系管理-添加-查询" class="headerlink" title="菜系管理-添加-查询"></a>菜系管理-添加-查询</h3><p>如点添加——</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>改静态页面：改成路由路径</span><br><span class="line"><span class="number">2.</span>调整路由</span><br><span class="line"><span class="number">3.</span>创建ejs</span><br><span class="line"><span class="number">4.</span>创建js、渲染</span><br><span class="line"><span class="number">5.</span>引入静态资源</span><br></pre></td></tr></table></figure>

<p>页面调整好后，接下来做往数据库增的操作：</p>
<p>1.找到对应ejs里的表单在哪增：改action，注意前面加/</p>
<p>2.调整路由</p>
<p>3.创建js，注意是post请求方式、res.end(“添加中……”);</p>
<p>4.往数据库添加什么？需要拿到表单里的name</p>
<p>先测试能不能拿到</p>
<figure class="highlight pony"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="meta">val</span> = req.body;</span><br><span class="line"><span class="keyword">var</span> cuisineName = <span class="meta">val</span>.cuisineName;</span><br><span class="line">res.<span class="keyword">end</span>(<span class="string">"cuisineName"</span>);</span><br></pre></td></tr></table></figure>

<p>接下来用数据库增语句放到数据库中</p>
<blockquote>
<p>创建表cuisineList，字段id、cuisineName，添加一行数据</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.先连接数据库</span></span><br><span class="line"><span class="keyword">var</span> db = <span class="built_in">require</span>(<span class="string">"../sql.js"</span>);</span><br><span class="line"><span class="comment">//2.到router.post里进行判断</span></span><br><span class="line"><span class="keyword">if</span>(cuisineName!=<span class="string">''</span>)&#123;</span><br><span class="line">	db.query(<span class="string">'insert into cuisineList value (?,?)'</span>,[<span class="number">0</span>,cuisineName],<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err)&#123;</span><br><span class="line">			<span class="keyword">throw</span> err;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			res.end(<span class="string">"添加成功"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	res.end(<span class="string">"输入内容不能为空"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：看添加成功或失败的响应，数据库的数据变化。测试成功</p>
<p>到ejs的对应位置删除静态数据，注释一组等会参考，使它变成活的：</p>
<p>1.先测试下有没数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.query(<span class="string">'select * from cuisineList'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err)&#123;</span><br><span class="line">			<span class="keyword">throw</span> err;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(data);		<span class="comment">//测试完换回渲染</span></span><br><span class="line">			<span class="comment">//res.render("cuisineList");</span></span><br><span class="line">		&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>有数据后，需要把数据返回过去：返回到cuisineList.ejs中，让页面能拿到对应数据:</p>
<p>js中</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">res</span><span class="selector-class">.render</span>("<span class="selector-tag">cuisineList</span>",&#123;<span class="attribute">cuisineList</span>:data&#125;);</span><br></pre></td></tr></table></figure>

<p>ejs中对应位置，测试能否拿到数据</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">&lt;%= cuisineList %&gt;</span><br></pre></td></tr></table></figure>

<p>拿到后，ejs中改成</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;% cuisineList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; %&gt;	</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">	&lt;td&gt;&lt;% item.id %&gt;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">	&lt;td&gt;&lt;% item.cuisineName %&gt;&lt;/</span>td&gt;</span><br><span class="line">&lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125;) %&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试，成功后再添加条数据测试。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>06-Socket.io</title>
    <url>/2020/03/29/06-Socket.io/</url>
    <content><![CDATA[<p>在看该文档前，建议先看下Node.js。</p>
<a id="more"></a>

<h2 id="什么是Socket-IO"><a href="#什么是Socket-IO" class="headerlink" title="什么是Socket.IO"></a>什么是Socket.IO</h2><p>Socket.IO是一个库，可用于在浏览器和服务器之间进行<strong>实时</strong>，<strong>双向</strong>和基于<strong>事件(异步，不用一直等)</strong>的通信。它包括：</p>
<ul>
<li>使Node.js服务器：<a href="https://github.com/socketio/socket.io" target="_blank" rel="noopener">来源</a> | <a href="https://socket.io/docs/server-api/" target="_blank" rel="noopener">API</a></li>
<li>为浏览器（可从Node.js的也运行）一个JavaScript客户端库：<a href="https://github.com/socketio/socket.io-client" target="_blank" rel="noopener">来源</a> | <a href="https://socket.io/docs/client-api/" target="_blank" rel="noopener">API</a></li>
</ul>
<p>其主要特点是：</p>
<h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>即使存在以下情况，也会建立连接：</p>
<ul>
<li>代理和负载平衡器。</li>
<li>个人防火墙和防病毒软件。</li>
</ul>
<p>为此，它依赖于<a href="https://github.com/socketio/engine.io" target="_blank" rel="noopener">Engine.IO</a>，该<a href="https://github.com/socketio/engine.io" target="_blank" rel="noopener">引擎</a>首先建立长轮询连接，然后尝试升级到在侧面进行“测试”的更好传输，例如WebSocket。请参阅“ <a href="https://github.com/socketio/engine.io#goals" target="_blank" rel="noopener">目标”</a>部分以获取更多信息。</p>
<blockquote>
<p>socket.io既能支持老版本浏览器，又支持新版本浏览器。而WebSocket只支持新版本浏览器</p>
</blockquote>
<h3 id="自动重新连接支持"><a href="#自动重新连接支持" class="headerlink" title="自动重新连接支持"></a>自动重新连接支持</h3><p>除非另有指示，否则断开连接的客户端将尝试永久重新连接，直到服务器再次可用为止。请在<a href="https://socket.io/docs/client-api/#new-Manager-url-options" target="_blank" rel="noopener">此处</a>查看可用的重新连接选项。</p>
<h3 id="断线检测"><a href="#断线检测" class="headerlink" title="断线检测"></a>断线检测</h3><p>心跳机制在Engine.IO级别上实现，使服务器和客户端都可以知道对方何时不再响应。</p>
<p>通过在服务器和客户端上设置计时器，并在连接握手期间共享超时值（pingInterval和pingTimeout参数），可以实现该功能。这些计时器要求将任何后续客户端调用都定向到同一服务器，因此使用多个节点时需要执行粘性会话。</p>
<h3 id="二进制支持"><a href="#二进制支持" class="headerlink" title="二进制支持"></a>二进制支持</h3><p>可以发出任何可序列化的数据结构，包括：</p>
<ul>
<li>浏览器中的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noopener">ArrayBuffer</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">Blob</a></li>
<li>Node.js中的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noopener">ArrayBuffer</a>和<a href="https://nodejs.org/api/buffer.html" target="_blank" rel="noopener">Buffer</a></li>
</ul>
<h3 id="多路传输支持"><a href="#多路传输支持" class="headerlink" title="多路传输支持"></a>多路传输支持</h3><p>为了在应用程序内创建关注点分离（例如，每个模块或基于权限），Socket.IO允许您创建多个<a href="https://socket.io/docs/rooms-and-namespaces/#Namespaces" target="_blank" rel="noopener">Namespaces</a>，它们将充当单独的通信通道，但将共享相同的基础连接。</p>
<blockquote>
<p>比如2个群，群里可以互相通信，但不能与群外去互相通信</p>
</blockquote>
<h3 id="客房支援"><a href="#客房支援" class="headerlink" title="客房支援"></a>客房支援</h3><blockquote>
<p>比如群里面还可以分组，后面组里通信不跟组外通信</p>
</blockquote>
<p>在每个<a href="https://socket.io/docs/rooms-and-namespaces/#Namespaces" target="_blank" rel="noopener">Namespace中</a>，您可以定义套接字可以加入和离开的任意通道，称为<a href="https://socket.io/docs/rooms-and-namespaces/#Rooms" target="_blank" rel="noopener">Rooms</a>。然后，您可以广播到任何给定的房间，到达已加入该房间的每个插槽。</p>
<p>这是有用的功能，用于向一组用户或连接到多个设备的给定用户发送通知。</p>
<p>这些功能附带一个简单便捷的API，如下所示：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">io.on（<span class="string">'connection'</span>，<span class="keyword">function</span>（socket） &#123; </span><br><span class="line">  socket.emit（<span class="string">'request'</span>，<span class="regexp">/ * * /</span>）; <span class="regexp">//</span>向套接字发出事件</span><br><span class="line">   io.emit（<span class="string">'broadcast'</span>，<span class="regexp">/ * * /</span>）; <span class="regexp">/ /</span>向所有连接的套接字发出事件</span><br><span class="line">   socket.on（<span class="string">'reply'</span>，<span class="keyword">function</span>（） &#123; <span class="regexp">/ * * /</span> &#125;）; <span class="regexp">//</span>监听事件</span><br><span class="line"> &#125;）;</span><br></pre></td></tr></table></figure>

<h2 id="什么不是Socket-IO"><a href="#什么不是Socket-IO" class="headerlink" title="什么不是Socket.IO"></a>什么不是Socket.IO</h2><p>Socket.IO <strong>不是</strong> WebSocket实现。尽管Socket.IO确实确实在可能的情况下使用WebSocket作为传输工具，但它会向每个数据包添加一些元数据：当需要消息确认时，数据包类型，名称空间和数据包ID。这就是为什么WebSocket客户端将无法成功连接到Socket.IO服务器，而Socket.IO客户端也将无法连接到WebSocket服务器的原因。请在<a href="https://github.com/socketio/socket.io-protocol" target="_blank" rel="noopener">此处</a>查看协议规范。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//警告：客户端将无法连接！</span></span><br><span class="line"><span class="keyword">const</span> client = io（<span class="symbol">'ws</span>：<span class="comment">//echo.websocket.org'）;</span></span><br></pre></td></tr></table></figure>

<h2 id="怎么安装"><a href="#怎么安装" class="headerlink" title="怎么安装"></a>怎么安装</h2><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save socket.io</span></span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/socketio/socket.io" target="_blank" rel="noopener">资源</a></p>
<h3 id="Javascript客户端"><a href="#Javascript客户端" class="headerlink" title="Javascript客户端"></a>Javascript客户端</h3><blockquote>
<p>也可以下载，点击顶部来源，然后下载或复制dist（打包好的）的socket.io.js(压缩)或… .io.dev.js(不压缩)</p>
</blockquote>
<p>默认情况下，服务器会公开客户端的独立版本<code>/socket.io/socket.io.js</code>。</p>
<p>也可以从CDN提供服务，例如<a href="https://cdnjs.com/libraries/socket.io" target="_blank" rel="noopener">cdnjs</a>。</p>
<p>若要从Node.js的使用就像一个捆绑使用，或<a href="https://webpack.js.org/" target="_blank" rel="noopener">的WebPack</a>或<a href="http://browserify.org/" target="_blank" rel="noopener">browserify</a>，您还可以安装NPM包：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span>-<span class="keyword">save</span> socket.io-<span class="keyword">client</span></span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/socketio/socket.io-client" target="_blank" rel="noopener">资源</a></p>
<h3 id="其他客户端实施"><a href="#其他客户端实施" class="headerlink" title="其他客户端实施"></a>其他客户端实施</h3><p>有几种其他语言的客户端实现，由社区维护：</p>
<ul>
<li>Java：<a href="https://github.com/socketio/socket.io-client-java" target="_blank" rel="noopener">https</a>：<a href="https://github.com/socketio/socket.io-client-java" target="_blank" rel="noopener">//github.com/socketio/socket.io-client-java</a></li>
<li>C ++：<a href="https://github.com/socketio/socket.io-client-cpp" target="_blank" rel="noopener">https</a>：<a href="https://github.com/socketio/socket.io-client-cpp" target="_blank" rel="noopener">//github.com/socketio/socket.io-client-cpp</a></li>
<li>斯威夫特：<a href="https://github.com/socketio/socket.io-client-swift" target="_blank" rel="noopener">https</a> : <a href="https://github.com/socketio/socket.io-client-swift" target="_blank" rel="noopener">//github.com/socketio/socket.io-client-swift</a></li>
<li>飞镖：<a href="https://github.com/rikulo/socket.io-client-dart" target="_blank" rel="noopener">https</a>：<a href="https://github.com/rikulo/socket.io-client-dart" target="_blank" rel="noopener">//github.com/rikulo/socket.io-client-dart</a></li>
<li>Python：<a href="https://github.com/miguelgrinberg/python-socketio" target="_blank" rel="noopener">https</a>：<a href="https://github.com/miguelgrinberg/python-socketio" target="_blank" rel="noopener">//github.com/miguelgrinberg/python-socketio</a></li>
<li>.Net：<a href="https://github.com/Quobject/SocketIoClientDotNet" target="_blank" rel="noopener">https</a>：<a href="https://github.com/Quobject/SocketIoClientDotNet" target="_blank" rel="noopener">//github.com/Quobject/SocketIoClientDotNet</a></li>
</ul>
<h2 id="与Node-http服务器一起使用"><a href="#与Node-http服务器一起使用" class="headerlink" title="与Node http服务器一起使用"></a>与Node http服务器一起使用</h2><h3 id="服务器（app-js）"><a href="#服务器（app-js）" class="headerlink" title="服务器（app.js）"></a>服务器（app.js）</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">var app = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(handler)</span><br><span class="line">var <span class="built_in">io</span> = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(app);</span><br><span class="line">var fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span> <span class="params">(req, res)</span></span> &#123;</span><br><span class="line">  fs.readFile(__dirname + <span class="string">'/index.html'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="params">(err, data)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.writeHead(<span class="number">500</span>);</span><br><span class="line">      <span class="keyword">return</span> res.<span class="keyword">end</span>(<span class="string">'Error loading index.html'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.writeHead(<span class="number">200</span>);</span><br><span class="line">    res.<span class="keyword">end</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(socket)</span></span> &#123;</span><br><span class="line">  socket.emit(<span class="string">'news'</span>, &#123; hello: <span class="string">'world'</span> &#125;);</span><br><span class="line">  socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(data)</span></span> &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="客户端（index-html）"><a href="#客户端（index-html）" class="headerlink" title="客户端（index.html）"></a>客户端（index.html）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/socket.io/socket.io.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> socket = io(<span class="string">'http://localhost'</span>);</span></span><br><span class="line"><span class="actionscript">  socket.on(<span class="string">'news'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="actionscript">    socket.emit(<span class="string">'my other event'</span>, &#123; my: <span class="string">'data'</span> &#125;);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="与Express一起使用"><a href="#与Express一起使用" class="headerlink" title="与Express一起使用"></a>与Express一起使用</h2><h3 id="服务器（app-js）-1"><a href="#服务器（app-js）-1" class="headerlink" title="服务器（app.js）"></a>服务器（app.js）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">80</span>);</span><br><span class="line"><span class="comment">// WARNING: app.listen(80) will NOT work here!</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  socket.emit(<span class="string">'news'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world'</span> &#125;);</span><br><span class="line">  socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="客户端（index-html）-1"><a href="#客户端（index-html）-1" class="headerlink" title="客户端（index.html）"></a>客户端（index.html）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/socket.io/socket.io.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> socket = io.connect(<span class="string">'http://localhost'</span>);</span></span><br><span class="line"><span class="actionscript">  socket.on(<span class="string">'news'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="actionscript">    socket.emit(<span class="string">'my other event'</span>, &#123; my: <span class="string">'data'</span> &#125;);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="发送和接收事件"><a href="#发送和接收事件" class="headerlink" title="发送和接收事件"></a>发送和接收事件</h2><p>Socket.IO允许您发射和接收自定义事件。此外<code>connect</code>，<code>message</code>和<code>disconnect</code>，你可以发出自定义事件：</p>
<h3 id="服务器-1"><a href="#服务器-1" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// note, io(&lt;port&gt;) will create a http server for you</span></span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  io.emit(<span class="string">'this'</span>, &#123; <span class="attr">will</span>: <span class="string">'be received by everyone'</span>&#125;);</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">'private message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">from, msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'I received a private message by '</span>, <span class="keyword">from</span>, <span class="string">' saying '</span>, msg);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    io.emit(<span class="string">'user disconnected'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="将自己限制为名称空间"><a href="#将自己限制为名称空间" class="headerlink" title="将自己限制为名称空间"></a>将自己限制为名称空间</h2><p>如果您可以控制为特定应用程序发出的所有消息和事件，则可以使用默认值/命名空间。如果您想利用第三方代码或生成与他人共享的代码，socket.io提供了一种命名套接字的方式。</p>
<p>这具有<code>multiplexing</code>单个连接的优点。不是使用两个<code>WebSocket</code>连接，而是使用一个连接。</p>
<h3 id="服务器（app-js）-2"><a href="#服务器（app-js）-2" class="headerlink" title="服务器（app.js）"></a>服务器（app.js）</h3><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> io = require(<span class="string">'socket.io'</span>)(<span class="number">80</span>);</span><br><span class="line"><span class="keyword">var</span> chat = io</span><br><span class="line">  .of(<span class="string">'/chat'</span>)</span><br><span class="line">  .on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> </span>(socket) &#123;</span><br><span class="line">    socket.emit(<span class="string">'a message'</span>, &#123;</span><br><span class="line">        that: <span class="type"></span>'only<span class="string">'</span></span><br><span class="line"><span class="string">      , '</span>/chat<span class="string">': '</span>will <span class="keyword">get</span><span class="string">'</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    chat.emit('</span>a message<span class="string">', &#123;</span></span><br><span class="line"><span class="string">        everyone: '</span><span class="keyword">in</span><span class="string">'</span></span><br><span class="line"><span class="string">      , '</span>/chat<span class="string">': '</span>will <span class="keyword">get</span><span class="string">'</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">var news = io</span></span><br><span class="line"><span class="string">  .of('</span>/<span class="keyword">new</span><span class="type">s</span>')</span><br><span class="line">  .on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> </span>(socket) &#123;</span><br><span class="line">    socket.emit(<span class="string">'item'</span>, &#123; <span class="keyword">new</span><span class="type">s</span>: <span class="string">'item'</span> &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="客户端（index-html）-2"><a href="#客户端（index-html）-2" class="headerlink" title="客户端（index.html）"></a>客户端（index.html）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> chat = io.connect(<span class="string">'http://localhost/chat'</span>)</span></span><br><span class="line"><span class="actionscript">    , news = io.connect(<span class="string">'http://localhost/news'</span>);</span></span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  chat.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    chat.emit(<span class="string">'hi!'</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  news.on(<span class="string">'news'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    news.emit(<span class="string">'woot'</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="发送易失性消息"><a href="#发送易失性消息" class="headerlink" title="发送易失性消息"></a>发送易失性消息</h2><p>有时可能会丢弃某些消息。假设您有一个应用程序可显示关键字的实时推文<code>bieber</code>。</p>
<p>如果某个客户端尚未准备好接收消息（由于网络速度慢或其他问题，或者由于它们是通过长时间轮询连接的，并且处于请求-响应周期的中间），则它没有接收到所有推文与bieber相关，您的应用程序不会受到影响。</p>
<p>在这种情况下，您可能希望将这些消息作为易失性消息发送。</p>
<h3 id="服务器-2"><a href="#服务器-2" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tweets = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    getBieberTweet(<span class="function"><span class="keyword">function</span> (<span class="params">tweet</span>) </span>&#123;</span><br><span class="line">      socket.volatile.emit(<span class="string">'bieber tweet'</span>, tweet);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearInterval(tweets);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="发送和获取数据（确认）"><a href="#发送和获取数据（确认）" class="headerlink" title="发送和获取数据（确认）"></a>发送和获取数据（确认）</h2><p>有时，当客户端确认消息接收后，您可能希望获得回调。</p>
<p>为此，只需将函数作为<code>.send</code>或的最后一个参数传递即可<code>.emit</code>。而且，当您使用时<code>.emit</code>，确认是由您完成的，这意味着您还可以传递数据：</p>
<h3 id="服务器（app-js）-3"><a href="#服务器（app-js）-3" class="headerlink" title="服务器（app.js）"></a>服务器（app.js）</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">var <span class="built_in">io</span> = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(socket)</span></span> &#123;</span><br><span class="line">  socket.on(<span class="string">'ferret'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(name, word, fn)</span></span> &#123;</span><br><span class="line">    fn(name + <span class="string">' says '</span> + word);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="客户端（index-html）-3"><a href="#客户端（index-html）-3" class="headerlink" title="客户端（index.html）"></a>客户端（index.html）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> socket = io(); <span class="comment">// TIP: io() with no args does auto-discovery</span></span></span><br><span class="line"><span class="actionscript">  socket.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; <span class="comment">// TIP: you can avoid listening on `connect` and listen on events directly too!</span></span></span><br><span class="line"><span class="actionscript">    socket.emit(<span class="string">'ferret'</span>, <span class="string">'tobi'</span>, <span class="string">'woot'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123; <span class="comment">// args are sent in order to acknowledgement function</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data); <span class="comment">// data will be 'tobi says woot'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="广播消息"><a href="#广播消息" class="headerlink" title="广播消息"></a>广播消息</h2><p>要广播，只需<code>broadcast</code>在<code>emit</code>和<code>send</code>方法调用中添加一个标志。广播意味着将消息发送到其他人（除了启动该消息的套接字之外）。</p>
<h3 id="服务器-3"><a href="#服务器-3" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">var <span class="built_in">io</span> = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(socket)</span></span> &#123;</span><br><span class="line">  socket.broadcast.emit(<span class="string">'user connected'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="像跨浏览器的WebSocket一样使用它"><a href="#像跨浏览器的WebSocket一样使用它" class="headerlink" title="像跨浏览器的WebSocket一样使用它"></a>像跨浏览器的WebSocket一样使用它</h2><p>如果只需要WebSocket语义，也可以这样做。只需利用<code>send</code>并收听<code>message</code>事件：</p>
<h3 id="服务器（app-js）-4"><a href="#服务器（app-js）-4" class="headerlink" title="服务器（app.js）"></a>服务器（app.js）</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">var <span class="built_in">io</span> = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(socket)</span></span> &#123;</span><br><span class="line">  socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123; &#125;);</span><br><span class="line">  socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123; &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="客户端（index-html）-4"><a href="#客户端（index-html）-4" class="headerlink" title="客户端（index.html）"></a>客户端（index.html）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> socket = io(<span class="string">'http://localhost/'</span>);</span></span><br><span class="line"><span class="actionscript">  socket.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    socket.send(<span class="string">'hi'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(msg)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// my msg</span></span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果您不关心此类的重新连接逻辑，请查看<a href="https://github.com/socketio/engine.io" target="_blank" rel="noopener">Engine.IO</a>，这是Socket.IO使用的WebSocket语义传输层。</p>
<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><blockquote>
<p>要知道连接是以事件来进行操作：connection、emit、on</p>
</blockquote>
<h2 id="使用方法1：基本的"><a href="#使用方法1：基本的" class="headerlink" title="使用方法1：基本的"></a>使用方法1：基本的</h2><p>客户端</p>
<p>1、先下载，点击顶部来源，然后下载或复制dist（打包好的）的socket.io.js(压缩)或… .io.dev.js(不压缩)</p>
<p>2、创建新项目(这里为了方便可以使用Hbuilder创建基本html项目，无需自己创建目录结构)，引入（引入后就会创建个io对象给你使用。输出下io，有，说明引入成功）</p>
<p>服务器端</p>
<p>最基础操作：</p>
<p>1、创建新项目，复制与Node http服务器一起使用下的服务器(app.js)的代码，放入到.js文件中。</p>
<p>下面开始分析下（可跳过）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(handler)<span class="comment">//1、创建serve</span></span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(app);<span class="comment">//3、创建服务里，需要用到实时通讯的话，只需要把socket.io引用进来，引进来后，就把app这个我们创建的应用服务传进去就可以了。2个括号：引用socket.io对象、然后用socket.io去实例化一个io对象 ：app。就可以通过这个id对象去实行数据的双向绑定、连接。可以写成var socketio = require('socket.io') var io = socketio(app);</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>);	<span class="comment">//4、启动监听80的端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//处理WEB服务器正常的请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span> (<span class="params">req, res</span>) </span>&#123;<span class="comment">//2、创建serve后，这里就会有个handler函数。这个内容其实写不写都无所谓，因为这个只是告诉你怎么去出来这个服务</span></span><br><span class="line">  fs.readFile(__dirname + <span class="string">'/index.html'</span>, <span class="comment">//读文件。就会读当前文件夹下有没index.html。如果有，就输入index.html。（它这没有去判断请求，只是把整个html输出出去，很简单的一个操作）</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;<span class="comment">//读出来之后输出</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.writeHead(<span class="number">500</span>);</span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="string">'Error loading index.html'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.writeHead(<span class="number">200</span>);</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、实时通讯的连接（on）</span></span><br><span class="line"><span class="comment">//io.on('connection',事件的回调函数)监听socketio的连接事件：一旦有哪个客户端向我连接了，就会触发这个事件的内容（即一旦连接进来，我就会执行这个函数）</span></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;<span class="comment">//执行这个函数之后我都做了什么事情呢？1.传入连接的套接字对象</span></span><br><span class="line">    <span class="comment">//socket.emit() 发送客户端数据：发送事件名、发送的内容</span></span><br><span class="line">  socket.emit(<span class="string">'news'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world'</span> &#125;);<span class="comment">//2.这个连接对象触发了一个事件news：向客户端发送news事件，并将news的数据对象发送给客户端</span></span><br><span class="line">    <span class="comment">//监听客户端发送过来的内容</span></span><br><span class="line">  socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="comment">//3.同时又监听了另一个事件my other event，如果别人有什么操作进来，就在这里进行一个相对应的执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>2、创建服务器的index.html,随便写个hello socketio</p>
<p>3、运行服务器看一下能不能收到socket.emit()发送的数据：打开终端，运行node index.js</p>
<blockquote>
<p>(错误处理：没有发现socktet.io的模块。应对：运行或再一次运行npm install –save socket-io。–save表示保存到package.json中，我们可以不写)</p>
</blockquote>
<p>4、客户端进行连接（服务器不要关）：（之前我们已经引入了socket.io.js。）现在告诉服务器   连接的是谁（在客户端的index.html中写）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> con = io.connect(<span class="string">"http://localhost"</span>)	<span class="comment">//告诉 连接的是谁</span></span><br><span class="line">con.on(<span class="string">'news'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)	<span class="comment">//监听有没人给你发news，来得到数据;一旦有数据触发，就进行相应操作：这里先试着输出下数据看有没拿到。因为服务器跟客户端连接时，给客户端发了个带数据的news事件</span></span><br><span class="line">con.emit(<span class="string">'my other event'</span>,&#123;</span><br><span class="line">    uaername:<span class="string">"大哥"</span>,</span><br><span class="line">    chatcontent:<span class="string">"吃饭了没？"</span></span><br><span class="line">&#125;)	<span class="comment">//收到数据后要反馈才能得到对方的又一次发送数据。所以emit()发送个数据对象给服务器：比如发吃饭了没</span></span><br></pre></td></tr></table></figure>

<p>5、看下服务器有没收到客户端的数据（注意：一刷新，又会多一条客户端的数据）</p>
<blockquote>
<p>（为什么会收到？因为客户端在写代码时就会<strong>实时</strong>进行更新：客户端一更新，socketio就会立马执行客户端内容，然后立马发送消息）</p>
</blockquote>
<p>6、客户端也有监听连接的事件（不只服务器有），写完下面代码，运行客户端查看效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> con = io.connect(<span class="string">"http://localhost"</span>) <span class="comment">//可以去控制台输入con，查看下连接事件长啥样（里面的id是唯一标识，服务器也可以通过id向你发送消息。服务端发送的二进制出数据、json数据这里也能看得到）	</span></span><br><span class="line">con.on(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="comment">//监听连接，触发后执行相应操作</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"连接事件"</span>)</span><br><span class="line">    <span class="comment">//console.log(data)	//data这时是没有的，因为服务器没有给它发送数据</span></span><br><span class="line">&#125;)</span><br><span class="line">con.on(<span class="string">'news'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">con.emit(<span class="string">'my other event'</span>,&#123;</span><br><span class="line">    uaername:<span class="string">"大哥"</span>,</span><br><span class="line">    chatcontent:<span class="string">"吃饭了没？"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>7、一般情况下，不会自己去写一个服务器，都会用express框架</p>
<h2 id="使用方法2：与exprss框架一起使用"><a href="#使用方法2：与exprss框架一起使用" class="headerlink" title="使用方法2：与exprss框架一起使用"></a>使用方法2：与exprss框架一起使用</h2><blockquote>
<p>用express来实现服务器功能</p>
</blockquote>
<blockquote>
<p>用express框架该怎么实现服务器功能呢？express也会得到一个app，也是一样对它进行操作即可。下面会讲如何创建express对象，来进行连接操作</p>
</blockquote>
<h3 id="简化版-直接引入express"><a href="#简化版-直接引入express" class="headerlink" title="简化版(直接引入express)"></a>简化版(直接引入express)</h3><p>1、创建新项目，复制与express一起使用下的服务器(app.js)的代码，放入到.js文件中。</p>
<p>下面进行分析（可跳过）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();	<span class="comment">//1、引入express对象，实例化一个app。</span></span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);<span class="comment">//2、创建serve</span></span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);<span class="comment">//3、与socketio进行一个连接。这样socketio就会自动地与require('http')关联起来</span></span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">80</span>);</span><br><span class="line"><span class="comment">// WARNING: app.listen(80) will NOT work here!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//socketio就会自动地与require('http')关联起来，所以app.get、io.on就会同时启用，而且可以访问首页index.html</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  socket.emit(<span class="string">'news'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world'</span> &#125;);</span><br><span class="line">  socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>2、运行服务器：node expressApp.js。（需要先安装express：npm install –save express）。访问的还是80端口</p>
<p>3、接下来的操作跟使用方法1的2-6一样</p>
<h3 id="正常版-通过express生成器"><a href="#正常版-通过express生成器" class="headerlink" title="正常版(通过express生成器)"></a>正常版(通过express生成器)</h3><p>正常情况下，是通过express生成器自动生成一个项目</p>
<p>先安装express命令生成器npm install -g express-generator</p>
<p>1、创建express项目。终端运行</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">express</span> --<span class="built_in">view</span>=ejs chatapp</span><br></pre></td></tr></table></figure>

<p>2、进入项目目录，安装下</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>为了能看到客户端和服务器的全局内容，这儿我们换用VS Code：把包含客户端和服务器的目录拖到VS Code</p>
</blockquote>
<p>3、打开www，在www里 实例化socket.io</p>
<blockquote>
<p>它换成了在www中引用http、创建server——app</p>
<p>原先：是在app.js中创建app，再与io关联起来，再在app.js中去使用它们（的方法）</p>
<p>现在：不在app.js和www中直接使用它们，要新建个js来把io导出来，再导到www中，让别人可以拿到并且去使用它</p>
</blockquote>
<p>1、新建个socketio.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> socketio = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSocket</span>(<span class="params">server</span>)</span>&#123;	<span class="comment">//1、把server传进来</span></span><br><span class="line">	socketio.io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);	<span class="comment">//拿到io</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">socketio.getSocket = getSocket;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = socketio	<span class="comment">//把它导出来</span></span><br></pre></td></tr></table></figure>

<p>2、在www的创建server——app后面写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> socketio = <span class="built_in">require</span>(<span class="string">'../socketio'</span>)  <span class="comment">//导进来</span></span><br><span class="line">socketio.getSocket(server)</span><br></pre></td></tr></table></figure>

<p>3、若在哪个地方用，就是这样用的：比如要在app.js中用，写在module.export = app; 之前。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">let socketio = <span class="built_in">require</span>(<span class="string">'../socketio'</span>);</span><br><span class="line">let <span class="built_in">io</span> = socketio.<span class="built_in">io</span>;</span><br><span class="line"><span class="built_in">io</span>.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(socket)</span></span> &#123;</span><br><span class="line">  socket.emit(<span class="string">'news'</span>, &#123; hello: <span class="string">'world'</span> &#125;);</span><br><span class="line">  socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(data)</span></span> &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>4、先查看下package.json中没有有socket.io，没有就安装下。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save socket.io</span></span><br></pre></td></tr></table></figure>

<p>5、注意：该项目的地址是3000或8080，所以你的客户端的io.connect里面的链接里要加个<code>:8080</code>。（客户端的做法跟之前的一样，这儿就不写了）</p>
<p>6、运行：npm start（运行失败就重新安装下，再不行就npm install）</p>
<p>如果还不行就在第3个做个小延时</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span>&#123;	<span class="comment">//做个100ms的小延时，把3的代码放进来</span></span><br><span class="line">	<span class="keyword">let</span> socketio = <span class="built_in">require</span>(<span class="string">'../socketio'</span>);</span><br><span class="line">    <span class="keyword">let</span> io = socketio.io;</span><br><span class="line">    io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">      socket.emit(<span class="string">'news'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world'</span> &#125;);</span><br><span class="line">      socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<h3 id="推荐版"><a href="#推荐版" class="headerlink" title="推荐版"></a>推荐版</h3><p>只用在socketio.js中使用就好了。（没有必要在app.js里做，还要进行额外操作，把之前在app.js写的剪切出来修改下）</p>
<p>直接socketio.js中写入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> socketio = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSocket</span>(<span class="params">server</span>)</span>&#123;	<span class="comment">//1、把server传进来</span></span><br><span class="line">	socketio.io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);	<span class="comment">//拿到io</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">let</span> io = socketio.io;</span><br><span class="line">	io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">		socket.emit(<span class="string">'news'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world'</span> &#125;);</span><br><span class="line">		socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(data);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">socketio.getSocket = getSocket;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = socketio</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Socket.io</tag>
      </tags>
  </entry>
  <entry>
    <title>05-AjAX</title>
    <url>/2020/03/29/05-AjAX/</url>
    <content><![CDATA[<p>产生背景：没有对比就没有伤害，如过去的上传/下载/延迟速度。</p>
<p>用谷歌来模拟不同网速下的网站加载速率：</p>
<p>Network-&gt;右上的下标Add…-&gt;Add custom profile…-&gt;文件名、上传/下载/延迟速度-&gt;返回点右上下标中的该文件名，可以在该模式测试当前网页加载速度。</p>
<a id="more"></a>

<h2 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h2><p>之前学到的 让浏览器<strong>发出对服务端的请求</strong>，获得服务端的数据的几种方式：</p>
<ul>
<li>地址栏输入地址，回车，刷新 </li>
<li>特定元素的 href 或 src 属性 </li>
<li>表单提交</li>
</ul>
<p>但都无法通过、很难通过<strong>代码/编程</strong>来进行对服务端发出请求<strong>并且接受服务端返回的响应</strong>。</p>
<p>过<strong>代码/编程</strong>来进行对服务端发出请求并且接受服务端返回的响应这叫网络编程（发送请求、接收响应）。</p>
<p>编程语言能做的事情取决于API（提供某种特定能力的事物，有输入有输出）。</p>
<p>没学ajax之前不能通过js发请求，必须要将页面刷新一下才能做这操作，所以要学Ajax。</p>
<p>通过Network点XHR可以看到AJAX请求。</p>
<p>XML：最早的服务端返回的响应（数据格式）、描述数据的手段。被json取代了，因为历史原因所以ajax有些内容不改。</p>
<p>学习核心：基本使用、使用封装API、跨域</p>
<h2 id="AJAX简介"><a href="#AJAX简介" class="headerlink" title="AJAX简介"></a>AJAX简介</h2><p>全称：Asynchronous JavaScript and XML。</p>
<p>什么是AJAX：浏览器提供的<strong>一套 API</strong></p>
<p>作用：可以通过 JavaScript 直接发送请求接收响应，从而<strong>实现网络编程</strong>（发送请求、接收响应）。</p>
<p>为什么要有AJAX：能让js发送请求，解决不刷新时想拿到数据的问题。因为之前没办法及时拿到服务端的数据（因为要刷新），不想刷新又想在表格中呈现数据——那只能把数据写死在js代码中，还不如直接写死在html中但也不方便。</p>
<p>学习重点：不是在于我要发个请求，而在于要如何通过代码来发请求（网络编程）</p>
<h2 id="AJAX快速上手"><a href="#AJAX快速上手" class="headerlink" title="AJAX快速上手"></a>AJAX快速上手</h2><p><strong>不考虑兼容就4行代码</strong>。不懂就跳过这块代码看下面的发送请求、接收响应。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个 XMLHttpRequest 类型的对象 —— 相当于打开了一个浏览器 </span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() </span><br><span class="line"><span class="comment">// 2. 打开与一个网址之间的连接 —— 相当于在地址栏输入访问地址 </span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'./time.php'</span>) </span><br><span class="line"><span class="comment">// 3. 通过连接发送一次请求 —— 相当于回车或者点击访问发送请求 </span></span><br><span class="line">xhr.send(<span class="literal">null</span>) </span><br><span class="line"><span class="comment">// 4. 指定 xhr 状态变化事件处理函数 —— 相当于处理网页呈现后的操作 </span></span><br><span class="line"><span class="comment">//onload是HTML5中提供的XMLHttpRequest2.0定义的，否则用onreadystatechange</span></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   </span><br><span class="line">	<span class="comment">// 通过 xhr 的 readyState 判断此次请求的响应是否接收完成   </span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span>;     </span><br><span class="line">	<span class="comment">// 通过 xhr 的 responseText 获取到响应的响应体   </span></span><br><span class="line">    <span class="comment">//到这ajax操作就结束了。到这里，就是放我们之前所熟悉的代码js。进行发送请求动态获取数据呈现到页面上等</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="AJAX发送请求"><a href="#AJAX发送请求" class="headerlink" title="AJAX发送请求"></a>AJAX发送请求</h3><p>AJAX提供的核心类型：XMLHttpRequest。作用——模拟平时上网过程：这三行代码就是ajax的核心</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 涉及到 AJAX 操作的页面“不能”使用文件协议访问（文件的方式访问，某些情况可以；可以http方式访问）</span></span><br><span class="line"><span class="comment">// 1. 安装浏览器（用户代理）</span></span><br><span class="line">    <span class="comment">//  xhr js用户代理对象，就类似于浏览器的作用（发送请求接收响应）</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="type">XMLHttpRequest</span>()</span><br><span class="line">    <span class="comment">// 2. 打开浏览器 输入网址</span></span><br><span class="line">    <span class="comment">//参数：请求方式 网址/相对路径/绝对路径(用/或./表示根目录)</span></span><br><span class="line">    xhr.open(<span class="string">'GET'</span>, <span class="string">'http://day-11.io/time.php'</span>)</span><br><span class="line">    <span class="comment">// 3. 敲回车键 开始请求</span></span><br><span class="line">    xhr.send()</span><br><span class="line">    <span class="comment">// 4. 等待响应（较复杂，先不写）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 看结果</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在js中类型就是构造函数，可以通过new出来。</p>
</blockquote>
<p>通过Network的XHR可以看到ajax请求，发送完了之后重点就是：接收响应——如何把服务端响应给我们的数据显示/打印出来（怎样把它从js里面拿到）。</p>
<h3 id="AJAX接收响应"><a href="#AJAX接收响应" class="headerlink" title="AJAX接收响应"></a>AJAX接收响应</h3><blockquote>
<p>首先注意：不能通过变量去接收xhr.send()，原因：因为响应需要时间，所以无法通过返回值的方式返回响应。</p>
<p>AJAX是通过<strong>onreadystatechange事件</strong>获取响应（再通过xhr.readState获取响应的内容）。在HTML5中可用<strong>onload事件</strong>代替。</p>
<p>不建议用on的方式注册事件，而是用xhr.addEventListener(‘事件名’, function () {…}) 防止事件注册多次，虽然该事件一般只注册一次但仍建议这样。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//发送响应过程：1.创建浏览器（代理用户）</span></span><br><span class="line">   <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果需要补货第一个状态的变化，需要注意代码执行顺序的问题（不要出现来不及的情况）</span></span><br><span class="line">   <span class="comment">// xhr.onreadystatechange = function () &#123;</span></span><br><span class="line">   <span class="comment">//   // 这个事件并不是只在响应时触发，状态改变就触发</span></span><br><span class="line">   <span class="comment">//   // console.log(1)</span></span><br><span class="line">   <span class="comment">//   console.log(this.readyState)</span></span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//2.打开一个地址（以get的方式请求一个地址，请求响应可以用到相对/绝对地址，原因：在同一个网站下面）</span></span><br><span class="line">   xhr.open(<span class="string">'GET'</span>, <span class="string">'./time.php'</span>)</span><br><span class="line"><span class="comment">//3.发送请求</span></span><br><span class="line">   xhr.send()</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收响应过程：4.接收响应</span></span><br><span class="line">   <span class="comment">// 因为客户端永远不知道服务端何时才能返回我们需要的响应，所以 AJAX API 采用事件的机制（通知的感觉）。</span></span><br><span class="line">   xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 这个事件并不是只在响应时触发，而是XHR 状态改变就触发。注册事件时间的早晚决定接收的数据，所以如果需要补货第一个状态的变化，需要注意代码执行顺序的问题（不要出现来不及的情况）。</span></span><br><span class="line">     <span class="comment">// console.log(1)确认事件能否执行</span></span><br><span class="line"><span class="comment">//我们只关心readState=4接收完响应的状态。写出非的形式代码就不会嵌套了</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">     <span class="comment">// 获取响应的内容responseText（即响应体），获取响应头的情况较少</span></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="readState"><a href="#readState" class="headerlink" title="readState"></a>readState</h4><table>
<thead>
<tr>
<th>readyState</th>
<th>状态描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>UNSENT</td>
<td><strong>初始化</strong>：（请求）代理对象</td>
</tr>
<tr>
<td>1</td>
<td>OPENED</td>
<td>open方法已经调用，<strong>建立</strong>一个与服务端特定端口的<strong>连接</strong></td>
</tr>
<tr>
<td>2</td>
<td>HEADERS_RECEIVED</td>
<td>send() 方法已经被调用，且已<strong>接受到</strong>了响应报文的<strong>响应头</strong>，但没拿到响应体（xhr.getAllResponseHeaders(’指定键可省略‘)可拿到，注意是否用到分割）</td>
</tr>
<tr>
<td>3</td>
<td>LOADING</td>
<td><strong>响应体下载中</strong>（在这里处理响应体不可靠）</td>
</tr>
<tr>
<td>4</td>
<td>DONE</td>
<td>响应体<strong>下载完成</strong>，可以直接使用 responseText 。</td>
</tr>
</tbody></table>
<p>出现阶段：0（代码中写new后）、1（写open后、send后）、（2、3、4）（写接收响应时）</p>
<h2 id="如何在ajax设置请求、响应"><a href="#如何在ajax设置请求、响应" class="headerlink" title="如何在ajax设置请求、响应"></a>如何在ajax设置请求、响应</h2><blockquote>
<p>本质上 XMLHttpRequest 就是 JavaScript 在 Web 平台中发送 HTTP 请求的手段，所以我们发送出去的请求仍然是 HTTP 请求，同样符合 HTTP 约定的格式</p>
</blockquote>
<p>请求：仍然是HTTP请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置请求报文的请求行（协议版本是自动设置的）</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'./time.php'</span>) </span><br><span class="line"><span class="comment">// 设置请求头（设置多个请求头：多执行几次即可）</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Accept'</span>, <span class="string">'text/plain'</span>) </span><br><span class="line"><span class="comment">// 一旦你的请求体是 urlencoded 格式的内容，一定要设置请求头中 Content-Type 'application/x-www-form-urlencoded'。   json的：'application/json'</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line"><span class="comment">// 设置请求体，不设置就为null或不写参数 xhr.send('请求体') </span></span><br><span class="line">xhr.send(<span class="string">'key1=value1&amp;key2=value2'</span>) <span class="comment">// 以 urlencoded 格式设置请求体 '&#123;"foo": "123"&#125;'json格式</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;     </span><br><span class="line">	<span class="comment">// 获取响应状态码     </span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.status)    </span><br><span class="line">    <span class="comment">// 获取响应状态描述     </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.statusText)     </span><br><span class="line">    <span class="comment">// 获取响应头信息     </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.getResponseHeader(<span class="string">'Content‐Type'</span>)) <span class="comment">// 指定响应头     </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.getAllResponseHeader())<span class="comment">// 全部响应头     </span></span><br><span class="line">    <span class="comment">// 获取响应体     </span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText) <span class="comment">// 文本形式   </span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseXML) <span class="comment">// XML 形式，了解即可不用了   </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考链接：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a> </p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest</a></p>
<h2 id="具体用法："><a href="#具体用法：" class="headerlink" title="具体用法："></a>具体用法：</h2><h3 id="数据接口的概念"><a href="#数据接口的概念" class="headerlink" title="数据接口的概念"></a>数据接口的概念</h3><blockquote>
<p>接口（API）概念：只要能提供特定能力、有输入有输出都可以叫接口。2种：编程语言的一些函数、web API（<strong>对于返回数据的地址我们称为接口或数据接口</strong>，只不过形式上是Web形式，如api.douban.com/v2/movie/top250,可以给它？后传参数。可以用自己写的，也可以用别人提供的（前提：别人让你用），如github.com/zce/weapp-demo就是用这个豆瓣接口做的app）。</p>
<p>而ajax操作大部分就是以这种接口的地址作为我们需要去请求的（xhr.open的第二个参数），因为一般是拿数据。</p>
</blockquote>
<h3 id="GET请求及实例"><a href="#GET请求及实例" class="headerlink" title="GET请求及实例"></a>GET请求及实例</h3><p>AJAX发送GET请求并传递参数：</p>
<blockquote>
<p>通常在一次 GET 请求过程中，参数传递都是通过 URL 地址中的 ? 参数传递。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() </span><br><span class="line"><span class="comment">// GET 请求传递参数通常使用的是问号传参 </span></span><br><span class="line"><span class="comment">// 这里可以在请求地址后面加上参数，从而传递数据到服务端 </span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'./delete.php?id=1'</span>) </span><br><span class="line"><span class="comment">// 一般在 GET 请求时无需设置响应体，可以传 null 或者干脆不传 </span></span><br><span class="line">xhr.send(<span class="literal">null</span>) xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;     <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)   </span><br><span class="line">	&#125; </span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">// 一般情况下 URL 传递的都是参数性质的数据，而 POST 一般都是业务数据</span></span><br></pre></td></tr></table></figure>

<p>实例：要求在界面上把所有用户的名字打印到列表中，然后点击用户名可以再发送个请求——alert拿到用户年龄。</p>
<p>步骤：1.拿到所有的数据2.拿到想要的结果</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//07-ajax-get.html的</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX发送GET请求并传递参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  //3.的</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//3.的</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> listElement = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 发送请求获取列表数据呈现在页面</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// =======================================</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line">	1.拿到所有的数据</span><br><span class="line"><span class="actionscript">    xhr.open(<span class="string">'GET'</span>, <span class="string">'users.php'</span>)</span></span><br><span class="line"></span><br><span class="line">    xhr.send()</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//2.拿到想要的结果。注意：转换字符串成json格式。之后先console.log(data)打印测试下再操作</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText)</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// data =&gt; 数据</span></span></span><br><span class="line"><span class="actionscript">	  <span class="comment">//3.有了结果后就可以对它进行遍历了。写了循环后一样console.log测试下。可以挨个打印每一个对象后，就在html中动态创建个li放到ul中：给ul加个id方便操作它，在js一开始的地方把id获取到。</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//console.log(data[i])</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//4.在这动态创建每个li的元素，然后li放东西</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> liElement = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span></span><br><span class="line">        liElement.innerHTML = data[i].name</span><br><span class="line">        liElement.id = data[i].id</span><br><span class="line"><span class="actionscript">		<span class="comment">//5.把li元素放到ul中</span></span></span><br><span class="line">        listElement.appendChild(liElement)</span><br><span class="line"><span class="actionscript"><span class="comment">//6.2 客户端：给每个li元素注册点击事件</span></span></span><br><span class="line"><span class="actionscript">        liElement.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 7.<span class="doctag">TODO:</span> 通过AJAX操作获取服务端对应数据的信息</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 如何获取当前被点击元素对应的数据的ID——通过创建liElement.id = data[i].id拿到</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(this.id)</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> xhr1 = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="actionscript">          xhr1.open(<span class="string">'GET'</span>, <span class="string">'users.php?id='</span> + <span class="keyword">this</span>.id)</span></span><br><span class="line">          xhr1.send()</span><br><span class="line"><span class="actionscript">          xhr1.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText)</span></span><br><span class="line">            alert(obj.age)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript"><span class="comment">//6.客户端：给每个li元素注册点击事件（由于不是JQ，所以要找到所以li遍历注册点击事件）。又因为 li 是后来动态创建的，而必须要创建时注册事件，所以不能这样注册事件。所以要到6.2那。</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// for (var i = 0; i &lt; listElement.children.length; i++) &#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   listElement.children[i].addEventListener('click', function () &#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//     console.log(111)</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   &#125;)</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// var xhr = new XMLHttpRequest()</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// // 这里任然是使用URL中的问号参数传递数据</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// xhr.open('GET', 'users.php?id=2')</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// xhr.send(null)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// xhr.onreadystatechange = function () &#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   if (this.readyState !== 4) return</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   console.log(this.responseText)</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//users.php的</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header(<span class="string">'Content-Type: application/json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// `/users.php?id=1` =&gt; id 为 1 的用户信息</span></span><br><span class="line"></span><br><span class="line">$data = <span class="keyword">array</span>(</span><br><span class="line">  <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'id'</span> =&gt; <span class="number">1</span>,</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'张三'</span>,</span><br><span class="line">    <span class="string">'age'</span> =&gt; <span class="number">18</span></span><br><span class="line">  ),</span><br><span class="line">  <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'id'</span> =&gt; <span class="number">2</span>,</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'李四'</span>,</span><br><span class="line">    <span class="string">'age'</span> =&gt; <span class="number">20</span></span><br><span class="line">  ),</span><br><span class="line">  <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'id'</span> =&gt; <span class="number">3</span>,</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'二傻子'</span>,</span><br><span class="line">    <span class="string">'age'</span> =&gt; <span class="number">18</span></span><br><span class="line">  ),</span><br><span class="line">  <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'id'</span> =&gt; <span class="number">4</span>,</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'三愣子'</span>,</span><br><span class="line">    <span class="string">'age'</span> =&gt; <span class="number">19</span></span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_GET[<span class="string">'id'</span>])) &#123;</span><br><span class="line">  <span class="comment">// 没有 ID 获取全部</span></span><br><span class="line">  <span class="comment">// 因为 HTTP 中约定报文的内容就是字符串，而我们需要传递给客户端的信息是一个有结构的数据</span></span><br><span class="line">  <span class="comment">// 这种情况下我们一般采用 JSON 作为数据格式</span></span><br><span class="line">  $json = json_encode($data); <span class="comment">// =&gt; [&#123;"id":1,"name":"张三"&#125;,&#123;...&#125;]</span></span><br><span class="line">  <span class="keyword">echo</span> $json;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 传递了 ID 只获取一条</span></span><br><span class="line">  <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $item) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($item[<span class="string">'id'</span>] != $_GET[<span class="string">'id'</span>]) <span class="keyword">continue</span>;</span><br><span class="line">    $json = json_encode($item); <span class="comment">// =&gt; [&#123;"id":1,"name":"张三"&#125;,&#123;...&#125;]</span></span><br><span class="line">    <span class="keyword">echo</span> $json;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POST请求及实例"><a href="#POST请求及实例" class="headerlink" title="POST请求及实例"></a>POST请求及实例</h3><blockquote>
<p>POST 请求过程中，都是采用请求体承载需要提交的数据。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() </span><br><span class="line"><span class="comment">// open 方法的第一个参数的作用就是设置请求的 method </span></span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'./add.php'</span>) </span><br><span class="line"><span class="comment">// 设置请求头中的 Content‐Type 为 application/x‐www‐form‐urlencoded </span></span><br><span class="line"><span class="comment">// 标识此次请求的请求体格式为 urlencoded 以便于服务端接收数据 </span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content‐Type'</span>, <span class="string">'application/x‐www‐form‐urlencoded'</span>) <span class="comment">// 需要提交到服务端的数据可以通过 send 方法的参数传递 // 格式：key1=value1&amp;key2=value2 </span></span><br><span class="line">xhr.send(<span class="string">'key1=value1&amp;key2=value2'</span>) xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;     <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)   </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：实际开发中不能一会写js一会写php，一般先写好结果先测试下防止服务端出问题再写客户端功能。</p>
<blockquote>
<p>（但用浏览器直接去请求它，浏览器发的是get请求。怎么测试post请求？用个小工具Postman，它可以专门用来发各种类型请求、调试接口等。</p>
<p>测试post请求：输入.php所在网址，选post请求，多出来个body选项，点对应请求体格式，添加键值对如用户名、密码等，按send提交即可测试）</p>
<p>调试接口:输入接口地址，添加？后的参数按send</p>
</blockquote>
<p>实例：要求页面不刷新把数据提交到服务端去（用form肯定会刷新，所以用table，技术用js+ajax）。</p>
<p>这里的loading代码块可以去掉：在网络请求慢时做加载效果</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//08-ajax-post.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX发送POST请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> &#123;</span></span><br><span class="line">      display: none;</span><br><span class="line">      position: fixed;</span><br><span class="line">      top: 0;</span><br><span class="line">      left: 0;</span><br><span class="line">      right: 0;</span><br><span class="line">      bottom: 0;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#555</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.5</span>;</span></span><br><span class="line">      text-align: center;</span><br><span class="line">      line-height: 300px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">      content: '加载中...';</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span> : <span class="selector-id">#fff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 写客户端js有一句话：找一个合适的时机，做一件合适的事情（做任何功能时首先要考虑这个东西在什么时候去工作：登录时，工作的内容是什么：把界面上的数据通过ajax提交到服务端）</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//0.时机：（怎么判断登陆时：通过点击按钮），所以给按钮注册点击事件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1. 事情：1.1获取界面上的元素 value </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> txtUsername = <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> txtPassword = <span class="built_in">document</span>.getElementById(<span class="string">'password'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> loading = <span class="built_in">document</span>.getElementById(<span class="string">'loading'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//发请求就显示这个</span></span></span><br><span class="line"><span class="actionscript">      loading.style.display = <span class="string">'block'</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//1.1获取界面上的元素 value</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> username = txtUsername.value</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> password = txtPassword.value</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 1.2 通过 XHR 发送一个 POST 请求</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="actionscript">      xhr.open(<span class="string">'POST'</span>, <span class="string">'login.php'</span>)</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// !!! 一定注意 如果请求体是 urlencoded 格式 必须设置这个请求头 ！！！</span></span></span><br><span class="line"><span class="actionscript">      xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// xhr.send('username=' + username + '&amp;password=' + password)</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//可以换成js中的模板字符串$&#123;变量名&#125;，可以解析变量。    xhr.send(`username=$&#123;username&#125;&amp;password=$&#123;password&#125;`)</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 1.3 根据服务端的反馈 作出界面提示</span></span></span><br><span class="line"><span class="actionscript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//一般响应处理完做这些操作：请求完就关掉加载效果</span></span></span><br><span class="line"><span class="actionscript">        loading.style.display = <span class="string">'none'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>login.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 接收用户提交的用户名密码：校验、响应</span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$_POST</span>[<span class="string">'username'</span>]) || empty(<span class="variable">$_POST</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line">  <span class="regexp">//</span> echo ;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'请提交用户名和密码'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">//</span> 校验</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">'username'</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> === <span class="string">'admin'</span> &amp;&amp; <span class="variable">$password</span> === <span class="string">'123'</span>) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'恭喜你登陆成功'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span>(<span class="string">'用户名或者密码错误'</span>);</span><br><span class="line"><span class="regexp">//</span> 响应</span><br></pre></td></tr></table></figure>

<h2 id="同步模式和异步模式"><a href="#同步模式和异步模式" class="headerlink" title="同步模式和异步模式"></a>同步模式和异步模式</h2><blockquote>
<p>同步：一个人在同一个时刻只能做一件事情。在执行一些耗时的操作（不需要看管）不去做别的事，只是等 待</p>
<p>异步：在执行一些耗时的操作（不需要看管）去做别的事，而不是等待</p>
</blockquote>
<p>open 方法的第三个参数是 async (异步)可以传入一个布尔值，默认为 true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同步、异步涉及到这段代码执行时间的长短不一样：如在这段代码前后都用console.log输出，则异步会同时执行这2个输出，同步会出现愣等（阻塞）情况导致时间慢。可以用开始秒表console.time('秒表名')、结束秒表console.timeEnd('秒表名')来计时（计算中间代码执行的时候）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhrAsync= <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhrAsync.open(<span class="string">'GET'</span>, <span class="string">'time.php'</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'async'</span>)</span><br><span class="line">xhrAsync.send()</span><br><span class="line"><span class="built_in">console</span>.log(xhrAsync.responseText)</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'async'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步模式 ajax 操作会有楞等的情况</span></span><br><span class="line"><span class="comment">// 区别在于 send 方法会不会出现等待情况</span></span><br><span class="line"><span class="comment">// 同步模式下send方法会直接给我们结果。一定要注意事件注册时间问题：若有事件注册，会来不及，而异步则是发send信号时，就去注册事件。</span></span><br><span class="line"><span class="comment">//不建议用同步模式，会降低用户体验。只有在封装时才有可能会使用</span></span><br><span class="line"><span class="keyword">var</span> xhrSync= <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhrSync.open(<span class="string">'GET'</span>, <span class="string">'time.php'</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'sync'</span>)</span><br><span class="line">xhrSync.send()</span><br><span class="line"><span class="built_in">console</span>.log(xhrSync.responseText)</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'sync'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="响应的数据格式XML、JSON"><a href="#响应的数据格式XML、JSON" class="headerlink" title="响应的数据格式XML、JSON"></a>响应的数据格式XML、JSON</h2><p>提问：如果希望服务端返回一个复杂数据，该如何处理？</p>
<blockquote>
<p>只要涉及到响应类型不同时，服务端应就要设置上合理的Content-Type。（告诉客户端；用上JQ等时，JQ会帮忙转换，若遇到不设置的JQ应对方法如$.getJSON）</p>
<p>不管服务端采用XML还是JSON，本质上都是将数据返回给客户端</p>
</blockquote>
<ul>
<li>XML</li>
</ul>
<p>一种数据描述手段，老掉牙的东西。淘汰的原因：数据冗余太多</p>
<p>用途：ajax里、或一些程序的配置文件里有用到</p>
<blockquote>
<p>XML也可以设样式，最早的网页就是用XML做的，如网易rss</p>
</blockquote>
<p>问题在于：如果你客户端发一个AJAX请求，服务端返回个XML，那客户端怎么去解析它？了解即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//xml.php</span><br><span class="line">//如果想返回XML，一定要设Content-Type。否则客户端会当HTML解析</span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">header(<span class="string">'Content-Type: application/xml'</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line">//XML的文档头</span><br><span class="line"><span class="meta">&lt;?xml version="1.1" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">girl_friend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">girl_friend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">//<span class="number">11</span>-ajax-<span class="type">xml</span>.html:AJAX请求<span class="type">XML</span>格式的数据</span><br><span class="line">	var xhr = <span class="built_in">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.<span class="keyword">open</span>(<span class="string">'GET'</span>, <span class="string">'xml.php'</span>)</span><br><span class="line">    xhr.send()</span><br><span class="line">    xhr.onreadystatechange = <span class="keyword">function</span> () &#123;</span><br><span class="line">      <span class="keyword">if</span> (this.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">      //console.log(this.responseText)到这，能成功打印，问题是：怎么把<span class="type">xml</span>中的数据解析拿出来。应对：只打印this时this还包含了responsexml:document</span><br><span class="line">      // this.responseXML 专门用于获取服务端返回的 <span class="type">XML</span> 数据，操作方式就是通过 DOM 的方式操作</span><br><span class="line">      // 但是需要服务端响应头中的 Content-<span class="keyword">Type</span> 必须是 application/<span class="type">xml</span>。否则Content-<span class="keyword">Type</span>会被客户端认为是<span class="type">text</span>/html，则responsexml:<span class="keyword">null</span></span><br><span class="line">      console.log(this.responseXML.documentElement.children[<span class="number">0</span>].innerHTML)//张三      console.log(this.responseXML.documentElement.getElementsByTagName(<span class="string">'name'</span>)[<span class="number">0</span>])//张三</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JSON</li>
</ul>
<p>一种数据描述手段，类似于 JavaScript 字面量方式</p>
<p>服务端采用 JSON 格式返回数据，客户端按照 JSON 格式解析数据。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line"> <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line"> <span class="attr">"girl_friend"</span>: &#123;</span><br><span class="line">	<span class="attr">"name"</span>: <span class="string">"李四"</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不管是 JSON 也好，还是 XML，只是在 AJAX 请求过程中用到，并不代表它们之间有必然的联系，它们只是 数据协议罢了</p>
</blockquote>
<h2 id="客户端如何处理服务端响应的数据（处理响应数据渲染）"><a href="#客户端如何处理服务端响应的数据（处理响应数据渲染）" class="headerlink" title="客户端如何处理服务端响应的数据（处理响应数据渲染）"></a>客户端如何处理服务端响应的数据（处理响应数据渲染）</h2><p>学习目的：一个（有结构的）数据怎么从服务端拿回来：通过json方式。拿回来过后，在客户端这边处理很麻烦（过往：大量DOM或拼接），可以拿模板引擎去处理。</p>
<h3 id="以往操作：代码方式"><a href="#以往操作：代码方式" class="headerlink" title="以往操作：代码方式"></a>以往操作：代码方式</h3><p>动态渲染数据到表格中案例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//12-ajax-table.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="actionscript">    xhr.open(<span class="string">'GET'</span>, <span class="string">'test.php'</span>)</span></span><br><span class="line">    xhr.send()</span><br><span class="line"><span class="actionscript">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//console.log(this.responseText)就能拿到JSON，直接把它转换解析了拿到服务端返回的结果res</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText)</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// res =&gt; 服务端返回的结果</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//再拿到res对象里的data数据，我们真正要遍历的数据</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> data = res.data </span></span><br><span class="line"><span class="actionscript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">       <span class="comment">// console.log(data[i]) 拿到数据的每一行需要显示的东西</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 用创建的方式</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 先创建行</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 再创建列</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 再将列添加到行</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 再将行添加到tbody</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>)</span></span><br><span class="line">        td.innerHTML = data[i].id</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>)</span></span><br><span class="line">        td.innerHTML = data[i].id</span><br><span class="line">        ...</span><br><span class="line">        tr.append...</span><br><span class="line">        ...</span><br><span class="line"><span class="actionscript">        <span class="comment">// 或用innerHTML拼接的方式</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>)</span></span><br><span class="line"><span class="handlebars"><span class="xml">        tr.innerHTML = '<span class="tag">&lt;<span class="name">td</span>&gt;</span>' + data[i].id + '<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>到了以后学到agule、vue就不会写这些东西了：大量DOM操作、拼接，连整个document都不用再写了</p>
<h3 id="模板方式"><a href="#模板方式" class="headerlink" title="模板方式"></a>模板方式</h3><p>一个（有结构的）数据怎么从服务端拿回来：通过json方式。拿回来过后，在客户端这边处理很麻烦，可以拿模板引擎去处理。</p>
<p>采用技术：模板引擎。目的：更容易将数据渲染到html中</p>
<p>核心：给我个数据，给我个模板，我根据一个规则帮你执行完得到一个结果</p>
<blockquote>
<p>实际并不陌生，php就好像个大号的模板引擎（与HTML混编才不觉得恶心），在服务端做的。</p>
</blockquote>
<p>客户端开发技术：也有个模板引擎——如artTemplate：<a href="https://aui.github.io/art-template/，国内的，最重要的一点：有中文文档（切换语言再点文档按钮）。自己去熟悉" target="_blank" rel="noopener">https://aui.github.io/art-template/，国内的，最重要的一点：有中文文档（切换语言再点文档按钮）。自己去熟悉</a></p>
<p>​    用法：把一个js文件引到页面当中，先写一个模板，写完模板之后准备一个数据，把数据跟模板同时扔到一个js文件所提供的一个方式里，就可以出结果了。</p>
<p>​    中文文档-安装-在浏览器中实时编译-下载js-保存起来。然后到页面当中去引用这个文件，再用script的方式去定义模板。</p>
<p>学东西的套路：照着手册一步步学</p>
<p>常见的流行模板引擎：Jade/pug、Handlebars、ejs、Nunjucks。用法都一样，看的就是一个套路。（一般选用一个东西：根据它在github上的活跃程度、协议、加星程度、关注程度一系列数字去决定）</p>
<p>参考：github.com/tj/consolidate.js#supported-template-engines（做node开发一个比较出名的作者做的常见模板引擎列表）</p>
<h4 id="使用模板引擎动态渲染表格实例"><a href="#使用模板引擎动态渲染表格实例" class="headerlink" title="使用模板引擎动态渲染表格实例"></a>使用模板引擎动态渲染表格实例</h4><blockquote>
<p>1.选择一个模板引擎     https:github.com/tj/consolidate.js#supported-template-engines<br>2.下载模板引擎JS文件<br>3.引入到页面中<br>4.准备一个模板<br>5.准备一个数据<br>6.通过模板引擎的JS提供的一个函数将模板和数据整合得到渲染结果HTML<br>7.将渲染结果HTML 设置到 默认元素的 innerHTML 中</p>
<pre><code>注意：
一、script 标签的特点是（模板引擎盯上了）
1. innerHTML 永远不会显示在界面上
    2. 如果 type 不等于 text/javascript 的话，内部的内容不会作为 JavaScript 执行</code></pre><p>二、为什么不在JS变量中写模板？<br>        如果将模板写到JS中，维护不方便，不能换行，没有着色。如var tmpl = ‘{{if user}}<h2>{{user.name}}</h2>{{/if}}‘<br> 三、为什么使用script标记写模板？<br>        script不会显示在界面</p>
</blockquote>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--4的，建议type这样写,其它模板引擎就text/x-... --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"tmpl"</span> <span class="attr">type</span>=<span class="string">"text/x-art-template"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    //该模板引擎的遍历方法</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;<span class="builtin-name">each</span> comments&#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- each 内部 $value 拿到的是当前被遍历的那个元素。 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;$value.author&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;$value.content&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;$value.created&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--3的--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"template-web.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    var xhr = new XMLHttpRequest()</span></span><br><span class="line"><span class="xml">    xhr.open('GET', 'test.php')</span></span><br><span class="line"><span class="xml">    xhr.send()</span></span><br><span class="line"><span class="xml">    xhr.onreadystatechange = function () &#123;</span></span><br><span class="line"><span class="xml">      if (this.readyState !== 4) return</span></span><br><span class="line"><span class="xml">//5的</span></span><br><span class="line"><span class="xml">      var res = JSON.parse(this.responseText)</span></span><br><span class="line"><span class="xml">      // 模板所需数据</span></span><br><span class="line"><span class="xml">      var context = &#123; comments: res.data &#125;</span></span><br><span class="line"><span class="xml">      // 6的：借助模板引擎的API 渲染数据，参数：模板标记的id，数据</span></span><br><span class="line"><span class="xml">      var html = template('tmpl', context)</span></span><br><span class="line"><span class="xml">      console.log(html)//-&gt;渲染过后的结果</span></span><br><span class="line"><span class="xml">      //7的</span></span><br><span class="line"><span class="xml">      document.getElementById('demo').innerHTML = html</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="XMLHttpRequest的兼容方案（面试）"><a href="#XMLHttpRequest的兼容方案（面试）" class="headerlink" title="XMLHttpRequest的兼容方案（面试）"></a>XMLHttpRequest的兼容方案（面试）</h2><p>XMLHttpRequest 在老版本浏览器（<strong>IE5/6</strong>）中有兼容问题，可以通过另外一种方式代替（三元表达式判断一下支持、不支持）</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = window.XMLHttpRequest ? <span class="keyword">new</span><span class="type"></span> XMLHttpRequest() :<span class="type"></span> <span class="keyword">new</span><span class="type"></span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>)</span><br></pre></td></tr></table></figure>

<p>面试时考ajax时一定把这点写上，ajax考的就是这点</p>
<h2 id="AJAX的封装"><a href="#AJAX的封装" class="headerlink" title="AJAX的封装"></a>AJAX的封装</h2><p>封装的套路：</p>
<ol>
<li><p>写一个相对比较完善的用例</p>
</li>
<li><p>写一个空函数，没有形参，将刚刚的用例直接作为函数的函数体</p>
</li>
<li><p>根据使用过程中的<strong>需求</strong>抽象参数</p>
</li>
</ol>
<p>接下来开始进行封装</p>
<p>1.写一个相对比较完善的用例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'GET'</span>,<span class="string">'time.php'</span>)</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line">xhr.onreadstatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.readyState !==<span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.写一个空函数funcion ajax(){}，没有形参，将刚刚的用例直接作为函数的函数体。到这就能调用ajax()了，但到这只是最基本的封装，差得还很远</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">funcion ajax()&#123;</span><br><span class="line">	<span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(<span class="string">'GET'</span>,<span class="string">'time.php'</span>)</span><br><span class="line">    xhr.send(<span class="literal">null</span>)</span><br><span class="line">    xhr.onreadstatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !==<span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">ajax()</span><br></pre></td></tr></table></figure>

<p>3.<strong>根据</strong>使用过程中的*<em>需求 *</em>抽象参数</p>
<p>版本1：</p>
<p>根据不同的需求：open的请求方式、地址会发生变化；当请求方式为POST，send的参数会变化；所以要把它们从写死的状态换成一个传入的参数。method(问题：当open请求方式是小写也能传入，我们的封装代码却不能正常执行，所以要转大写。), url, params(问题1：当传入第三个参数时，下面的调用1也要有对应的参数null。但调用1要也要写参数麻烦-&gt;最好有个默认值var params=params||null。问题2:params传入urlencoded型数据时需要告诉服务端Content-Type，要设置响应头-&gt;必须要有个设置操作xhr.setRequestHeader(‘Content-Type’, ‘application/x-www-form-urlencoded’)。问题2.1：不为POST请求时，不设置响应头-&gt;给个判断,但到这里发现send参数的设置就不大好了，所以优化掉，进入版本2)</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">funcion ajax(<span class="function"><span class="keyword">method</span>, <span class="title">url</span>, <span class="title">params</span>)<span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">	method = method.toUpperCase()</span></span></span><br><span class="line"><span class="function"><span class="comment">	var xhr = new XMLHttpRequest()</span></span></span><br><span class="line"><span class="function"><span class="comment">    xhr.open(method, url)</span></span></span><br><span class="line"><span class="function"><span class="comment">    if (method === 'POST') &#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    	xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')</span></span></span><br><span class="line"><span class="function"><span class="comment">    &#125;</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="title">var</span> <span class="title">params</span> = <span class="title">params</span> || <span class="title">null</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="title">xhr</span>.<span class="title">send</span><span class="params">(<span class="keyword">params</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">xhr</span>.<span class="title">onreadstatechange</span> = <span class="title">function</span> <span class="params">()</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">        if (this.readyState !==4) return</span></span></span><br><span class="line"><span class="function"><span class="comment">        console.log(this.responseText)</span></span></span><br><span class="line"><span class="function"><span class="comment">    &#125;</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">//调用</span></span><br><span class="line"><span class="function"><span class="title">ajax</span><span class="params">(<span class="string">'GET'</span>, <span class="string">'time.php'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">ajax</span><span class="params">(<span class="string">'POST'</span>, <span class="string">'add.php'</span>, <span class="string">'key1=value1&amp;key2=value2'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">ajax</span><span class="params">(<span class="string">'get'</span>, <span class="string">'time.php'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">ajax</span><span class="params">(<span class="string">'post'</span>, <span class="string">'add.php'</span>, <span class="string">'key1=value1&amp;key2=value2'</span>)</span></span></span><br></pre></td></tr></table></figure>

<p>版本2：也是基本封装，只是相对完善</p>
<p>参数params的问题1.1：params设置优化——如果不是POST请求就永远是null，是POST就取params；如果是get请求，除了null也有可能传参数（如id这参数放url里），所以要对url进行处理。</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">funcion ajax(method, <span class="built_in">url</span>, params)&#123;</span><br><span class="line">	method = method.toUpperCase()</span><br><span class="line">	<span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">      <span class="built_in">url</span> += <span class="string">'?'</span> + params</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    xhr.open(method, <span class="built_in">url</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> data = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    	xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">    	data = params</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    xhr.send(data)</span><br><span class="line">    xhr.onreadstatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !==<span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">ajax(<span class="string">'GET'</span>, <span class="string">'time.php'</span>,<span class="string">'id=1'</span>)</span><br><span class="line">ajax(<span class="string">'POST'</span>, <span class="string">'add.php'</span>, <span class="string">'key1=value1&amp;key2=value2'</span>)</span><br></pre></td></tr></table></figure>

<p>版本3：</p>
<p>问题1：上个版本中params传入参数是像key1=value1&amp;key2=value2这样结构，看着太恶心写起来也麻烦，所以改进：希望params传入的是个对象而不是字符串。而调用时直接传入对象查看Network请求不行，所以要把params（的对象实参）转成key1=value1&amp;key2=value2这样格式</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function">funcion <span class="title">ajax</span>(<span class="params">method, url, <span class="keyword">params</span></span>)</span>&#123;</span><br><span class="line">	method = method.toUpperCase()</span><br><span class="line">	<span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">params</span> === <span class="string">'object'</span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> tempArr = []</span><br><span class="line">		<span class="comment">//遍历对象的每一个键</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">params</span>) &#123;</span><br><span class="line">		   <span class="comment">//拿到它每一个值</span></span><br><span class="line">           <span class="keyword">var</span> <span class="keyword">value</span> = <span class="keyword">params</span>[key]</span><br><span class="line">           <span class="comment">//把每对键值拼接起来：tempArr =&gt; [ 'key1=value1', 'key2=value2' ]</span></span><br><span class="line">           tempArr.push(key + <span class="string">'='</span> + <span class="keyword">value</span>)</span><br><span class="line">           <span class="comment">//要得到格式：params =&gt; 'key1=value1&amp;key2=value2'。所以要join连接起来</span></span><br><span class="line">           <span class="keyword">params</span> = tempArr.<span class="keyword">join</span>(<span class="string">'&amp;'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">      url += <span class="string">'?'</span> + <span class="keyword">params</span></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    xhr.open(method, url)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> data = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    	xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">    	data = <span class="keyword">params</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    xhr.send(data)</span><br><span class="line">    xhr.onreadstatechange = function () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !==<span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">        console.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">ajax(<span class="string">'GET'</span>, <span class="string">'time.php'</span>,&#123; id: <span class="number">1</span> &#125;)</span><br><span class="line">ajax(<span class="string">'POST'</span>, <span class="string">'add.php'</span>, &#123; key1: <span class="string">'value1'</span>,key2: <span class="string">'value2'</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>版本4：</p>
<p>核心问题：不应该在封装的函数中主观地处理响应结果（把我们之前写的console.log()去掉，alert()也不能写），所以要有返回值。</p>
<blockquote>
<p>但无法在内部包含的函数中通过return  给外部函数的调用返回结果，所以要用作用链的方式拿到返回值：</p>
<p>function foo () {<br>    var res<br>    function bar () {<br>    res = 123<br>    }<br>    bar()<br>    return res<br>}</p>
</blockquote>
<p>但又引起来了新的问题：代码执行顺序：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function">funcion <span class="title">ajax</span>(<span class="params">method, url, <span class="keyword">params</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> res = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">	method = method.toUpperCase()</span><br><span class="line">	<span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">params</span> === <span class="string">'object'</span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> tempArr = []</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">params</span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> <span class="keyword">value</span> = <span class="keyword">params</span>[key]</span><br><span class="line">           tempArr.push(key + <span class="string">'='</span> + <span class="keyword">value</span>)</span><br><span class="line">           <span class="keyword">params</span> = tempArr.<span class="keyword">join</span>(<span class="string">'&amp;'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">      url += <span class="string">'?'</span> + <span class="keyword">params</span></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    xhr.open(method, url)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> data = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    	xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">    	data = <span class="keyword">params</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    xhr.send(data)</span><br><span class="line">    xhr.onreadstatechange = function () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !==<span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="comment">//不应该在封装的函数中主观的处理响应结果</span></span><br><span class="line">     	<span class="comment">//console.log(this.responseText)</span></span><br><span class="line">        <span class="comment">//无法在内部包含的函数中通过 return 给外部函数的调用返回结果</span></span><br><span class="line">        <span class="comment">// return this.responseText</span></span><br><span class="line">		<span class="comment">// 由于异步模式下（这儿代码刚开始执行外部代码比这儿早且仍在执行） 这里的代码最后执行 所以不可能在外部通过返回值的方式返回数据</span></span><br><span class="line">		<span class="comment">//用同步：oepn参数加个false，且事件移到send前。但强烈拒绝使用，所以到这代码就写不下去了。就要用到js的一个操作：委托（回调）</span></span><br><span class="line">		res = <span class="keyword">this</span>.responseText</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">ajax(<span class="string">'GET'</span>, <span class="string">'time.php'</span>,&#123; id: <span class="number">1</span> &#125;)</span><br><span class="line">ajax(<span class="string">'POST'</span>, <span class="string">'add.php'</span>, &#123; key1: <span class="string">'value1'</span>,key2: <span class="string">'value2'</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>版本5：最终版，未成形</p>
<p>由于版本4的方向错误，所以回到版本4前，回到开始的问题是：不应该在封装的函数中主观的处理响应结果（即封装者不能去主观地处理调用者的事情，如console.log就不行）-&gt;版本4用返回值的做法不行，无法返回-&gt;怎么样不主观：你告诉我该做什么事情。用委托（js中叫回调）：即调用者委托（让）封装者拿到数据后，<strong>再告诉封装者拿着数据去做什么事情</strong>-&gt;参数4：done</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">method, url, params, done</span>) </span>&#123;</span><br><span class="line">   method = method.toUpperCase()</span><br><span class="line">   <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> params === <span class="string">'object'</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> tempArr = []</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">        <span class="keyword">var</span> value = params[key]</span><br><span class="line">        tempArr.push(key + <span class="string">'='</span> + value)</span><br><span class="line">      &#125;</span><br><span class="line">      params = tempArr.join(<span class="string">'&amp;'</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">        <span class="built_in">url</span> += <span class="string">'?'</span> + params</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     xhr.open(method, <span class="built_in">url</span>, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> data = <span class="literal">null</span></span><br><span class="line">     <span class="keyword">if</span> (method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">       xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">       data = params</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">       <span class="comment">// 不应该在封装的函数中主观的处理响应结果</span></span><br><span class="line">       <span class="comment">// console.log(this.responseText)</span></span><br><span class="line">       <span class="comment">// 你说我太主观，那么你告诉我应该做什么</span></span><br><span class="line">       done(<span class="keyword">this</span>.responseText)</span><br><span class="line">     &#125;</span><br><span class="line">     xhr.send(data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 调用者,这儿分步骤好理解</span></span><br><span class="line">   <span class="keyword">var</span> onDone = <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'hahahahaha'</span>)</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'hohohohoho'</span>)</span><br><span class="line">     <span class="built_in">console</span>.log(res)</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'做完了'</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ajax(<span class="string">'get'</span>, <span class="string">'time.php'</span>, &#123;&#125;, onDone)</span><br><span class="line">   <span class="comment">//实际调用写</span></span><br><span class="line">   ajax(<span class="string">'get'</span>, <span class="string">'time.php'</span>, &#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'hahahahaha'</span>)</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'hohohohoho'</span>)</span><br><span class="line">     <span class="built_in">console</span>.log(res)</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'做完了'</span>)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="最终版"><a href="#最终版" class="headerlink" title="最终版"></a>最终版</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**  * 发送一个 AJAX 请求  * <span class="doctag">@param  <span class="type">&#123;String&#125;</span>   </span>method 请求方法  * <span class="doctag">@param  <span class="type">&#123;String&#125;</span>   </span>url    请求地址  * <span class="doctag">@param  <span class="type">&#123;Object&#125;</span>   </span>params 请求参数  * <span class="doctag">@param  <span class="type">&#123;Function&#125;</span> </span>done   请求完成过后需要做的事情（委托/回调）  */</span> <span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">method, url, params, done</span>) </span>&#123;   <span class="comment">// 统一转换为大写便于后续判断   method = method.toUpperCase()   </span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 对象形式的参数转换为 urlencoded 格式   var pairs = []   </span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> params) &#123;     pairs.push(key + <span class="string">'='</span> + params[key])   </span><br><span class="line"> &#125;   </span><br><span class="line"> <span class="keyword">var</span> querystring = pairs.join(<span class="string">'&amp;'</span>)     </span><br><span class="line"> 	<span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span>  ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>)  </span><br><span class="line"> 		 xhr.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;     </span><br><span class="line"> 	<span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span>      </span><br><span class="line"> 	<span class="comment">// 尝试通过 JSON 格式解析响应体     </span></span><br><span class="line"> 	<span class="keyword">try</span> &#123;       </span><br><span class="line"> 		done(<span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText))     &#125; <span class="keyword">catch</span> (e) &#123;       </span><br><span class="line"> 		done(<span class="keyword">this</span>.responseText)     </span><br><span class="line"> 		&#125;   </span><br><span class="line"> 	&#125;)     </span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 如果是 GET 请求就设置 URL 地址 问号参数   if (method === 'GET') &#123;     url += '?' + querystring   </span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  xhr.open(method, url)  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果是 POST 请求就设置请求体   </span></span><br><span class="line">  <span class="keyword">var</span> data = <span class="literal">null</span>  </span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span>) &#123;     xhr.setRequestHeader(<span class="string">'Content‐Type'</span>, <span class="string">'application/x‐www‐form‐urlencoded'</span>)     data = querystring   </span><br><span class="line">  &#125;   </span><br><span class="line">  xhr.send(data) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">'get'</span>, <span class="string">'./get.php'</span>, &#123; <span class="attr">id</span>: <span class="number">123</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;   </span><br><span class="line">	<span class="built_in">console</span>.log(data) </span><br><span class="line">&#125;)  </span><br><span class="line">ajax(<span class="string">'post'</span>, <span class="string">'./post.php'</span>, &#123; <span class="attr">foo</span>: <span class="string">'posted data'</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;   </span><br><span class="line">	<span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>但一般我们都是使用别人封装好的，功能比较完善。</p>
<p>jQuery 中有一套专门针对 AJAX 的封装，功能十分完善，经常使用，需要着重注意。1.几版兼容性最好，3.几最新。简单使用可看code，详细看下面官方手册。</p>
<p>这些（原生、封装）API记住使用过程就好。</p>
<p>参考：<br><a href="http://www.jquery123.com/category/ajax/" target="_blank" rel="noopener">http://www.jquery123.com/category/ajax/</a></p>
<p><a href="http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp</a></p>
<h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><p>简单实例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getTimestamp</span> <span class="params">(done)</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 执行调用者指定的事情</span></span></span><br><span class="line"><span class="javascript">        done(<span class="built_in">Date</span>.now())</span></span><br><span class="line"></span><br><span class="line">      &#125;, 1000)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// ========================================</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 指定拿到数据过后怎么做</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> done = <span class="function"><span class="keyword">function</span> <span class="params">(timestamp)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(timestamp / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">    getTimestamp(done)</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>js核心：回调</p>
<h3 id="回调的嵌套情况"><a href="#回调的嵌套情况" class="headerlink" title="回调的嵌套情况"></a>回调的嵌套情况</h3><p>以后的js代码可能会出现这种情况：需要请求一个a地址，拿到响应的结果之后再去请求b地址-&gt;那么代码中会出现回调函数中可能会再出现ajax，如下面这种恶心的结构：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)<span class="comment">//第1次执行</span></span><br><span class="line">ajax(<span class="string">'time.php'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)<span class="comment">//第3次执行</span></span><br><span class="line">  ajax(<span class="string">'time.php'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    ajax(<span class="string">'time.php'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">      ajax(<span class="string">'time.php'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        ajax(<span class="string">'time.php'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          ajax(<span class="string">'time.php'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)<span class="comment">//第4次执行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)<span class="comment">//第2次执行</span></span><br></pre></td></tr></table></figure>

<p>那么可能会有这样的方案：（then然后）</p>
<figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">'time.php'</span>)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> ajax(<span class="string">'time.php'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> ajax(<span class="string">'time.php'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> ajax(<span class="string">'time.php'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> ajax(<span class="string">'time.php'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">//注意回调黑洞（死循环）问题，如：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span> <span class="params">()</span> &#123;</span></span><br><span class="line">  ajax(<span class="string">'time.php'</span>, <span class="built_in">load</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JQ的ajax"><a href="#JQ的ajax" class="headerlink" title="JQ的ajax"></a>JQ的ajax</h2><p>$.ajax、$.get、$.post、$.getJSON、load方法、$.getScript</p>
<p>如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(<span class="string">'./time.php'</span>, &#123;</span><br><span class="line">  type: <span class="string">'post'</span>, <span class="comment">// method 请求方法</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// res =&gt; 拿到的只是响应体</span></span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="JQ的load方法-局部刷新"><a href="#JQ的load方法-局部刷新" class="headerlink" title="JQ的load方法(局部刷新)"></a>JQ的load方法(局部刷新)</h2><p>实现页面的  局部刷新 效果，能节省请求，如不用再请求css、js等文件</p>
<p>在jQuery封装的ajax下。跟ajax关系不大，但是用ajax实现的</p>
<p>在某一个div或元素中面去载入另外一个页面的另外一个区域</p>
<p>实例：局部刷新（加载）、在页面上做一些加载提示</p>
<p>如何做得更好？切换时希望知道在加载过程中。看下栏</p>
<h3 id="全局事件处理函数"><a href="#全局事件处理函数" class="headerlink" title="全局事件处理函数"></a>全局事件处理函数</h3><p>全局事件处理函数作用：如将所有ajax请求的公共操作注册成ajax的全局事件，让它只要发ajax请求就去自动帮我们执行</p>
<p>参考：<a href="http://www.jquery123.com/category/ajax/global-ajax-event-handlers/" target="_blank" rel="noopener">http://www.jquery123.com/category/ajax/global-ajax-event-handlers/</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">     $(<span class="built_in">document</span>)</span></span><br><span class="line"><span class="actionscript">       .ajaxStart(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">// 只要有 ajax 请求发生 就会执行</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.loading'</span>).fadeIn()</span></span><br><span class="line"><span class="actionscript">         <span class="comment">// 显示加载提示</span></span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">'注意即将要开始请求了'</span>)</span></span><br><span class="line">       &#125;)</span><br><span class="line"><span class="actionscript">       .ajaxStop(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">// 只要有 ajax 请求结束 就会执行</span></span></span><br><span class="line"><span class="javascript">         $(<span class="string">'.loading'</span>).fadeOut()</span></span><br><span class="line"><span class="actionscript">         <span class="comment">// 结束提示</span></span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">'请求结束了'</span>)</span></span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">'.list-group-item'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> url = $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>)</span></span><br><span class="line"><span class="javascript">      $(<span class="string">'#main'</span>).load(url + <span class="string">' #main &gt; *'</span>)</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="literal">false</span> </span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="最常见的加载进度方式"><a href="#最常见的加载进度方式" class="headerlink" title="最常见的加载进度方式"></a>最常见的加载进度方式</h3><p>配合NProgress显示加载进度。</p>
<p>github、知乎等都有在用：只在网址栏下面走进度条——请求响应，响应结果完就一下过了。</p>
<p>要想用：有个NProgress库——使用其中的js、css文件。且最好都在页头引入。</p>
<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>跨域实际跟ajax无关。</p>
<p>过去不支持不同源地址之前的ajax请求，现在支持了（存在兼容、需要服务端进行一些配置），但我们仍要了解。</p>
<p>同源策略是浏览器的一种<strong>安全策略</strong>。所谓同源是指<strong>域名，协议，端口完全相同</strong>，只有同源的地址才可以相互通过 AJAX 的方式请求。</p>
<p>同源或者不同源说的是两个地址之间的关系，不同源地址之间请求我们称之为<strong>跨域请求</strong></p>
<blockquote>
<p>之前学的能自动发送请求的方式：img、link、script、iframe。表单、a连接要点或做些操作才能</p>
<p>iframe:浏览器自带的功能，在页面中挖一个坑去载入另一个页面，跟load类似（而load是通过ajax、自己代码实现的）。</p>
</blockquote>
<p>如何解决：通过JSONP技巧</p>
<h3 id="JSONP技巧"><a href="#JSONP技巧" class="headerlink" title="JSONP技巧"></a>JSONP技巧</h3><p>JSON with Padding，是一种借助于 script 标签发送跨域请求的技巧。</p>
<p>原理：客户端通过 script 标签请求服务端的 一个动态网页(如php文件)。该文件返回一段 能调用一个函数的JS。该JS作用：<strong>调用</strong>我们事先定义好的一个<strong>函数</strong>，从而将服务端想要给客户端发过去的<strong>数据发送给客户端</strong></p>
<blockquote>
<p>注意：1. JSONP 需要服务端配合，服务端按照客户端的要求返回一段 JavaScript 调用客户端的函数<br>2.只能发送 GET 请求<br>3.jQuery 中使用 JSONP 就是将 dataType 设置为 jsonp<br>4.其他常见的 AJAX 封装 库：Axios</p>
</blockquote>
<p>实例：server.php、client.html（较多）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>server.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>, <span class="string">'demo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span> = mysqli_query(<span class="variable">$conn</span>, <span class="string">'select * from users'</span>);</span><br><span class="line"><span class="regexp">//</span>这儿的<span class="variable">$data</span>就是我们想要的数据。数据库代码写完进网页看能否正常请求或用Postman</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$row</span> = mysqli_fetch_assoc(<span class="variable">$query</span>)) &#123;</span><br><span class="line">  <span class="variable">$data</span>[] = <span class="variable">$row</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 如果客户端采用的是 script 标记对我发送的请求</span><br><span class="line"><span class="regexp">//</span> 一定要返回一段 JavaScript</span><br><span class="line"><span class="regexp">//</span> 输出的内容不能再是普通的json字符串了，而要在外面包裹一个函数的调用。注意：这里客户端指定函数名字aaabbb</span><br><span class="line">header(<span class="string">'Content-Type: application/javascript'</span>);</span><br><span class="line"><span class="variable">$result</span> = json_encode(<span class="variable">$data</span>);</span><br><span class="line"><span class="regexp">//</span>echo <span class="string">"aaabbb(&#123;$result&#125;)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>如果没有传入callback参数不想以jsonp方式操作，就设json支持普通方式，不然继续往下走</span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$_GET</span>[<span class="string">'callback'</span>])) &#123;</span><br><span class="line">  header(<span class="string">'Content-Type: application/json'</span>);</span><br><span class="line">  echo json_encode(<span class="variable">$data</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>服务端接收随机函数名。注意：关联数组必须要写花括号。</span><br><span class="line"><span class="regexp">//</span>echo <span class="string">"&#123;$_GET['callback']&#125;(&#123;$result&#125;)"</span>;</span><br><span class="line"><span class="regexp">//</span>优化：若明确定义了函数，采取调用函数，就不会报错。</span><br><span class="line"><span class="variable">$callback_name</span> = <span class="variable">$_GET</span>[<span class="string">'callback'</span>];</span><br><span class="line">echo <span class="string">"typeof &#123;$callback_name&#125; === 'function' &amp;&amp; &#123;$callback_name&#125;(&#123;$result&#125;)"</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//client.html JSONP基本使用</span><br><span class="line">//在客户端发起跨域请求</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//var script = //document.createElement('script')</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//script.src = 'http://localhost/jsonp/server.php'</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//document.body.appendChild(script)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">////准备一个函数，让服务端去调用</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//function aaabbb (data) &#123;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//   console.log('1111', data)</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//&#125;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//但以上代码重复执行2次就会出问题：第二次的console.log会覆盖第一次的。所以要给每一次请求设置唯一的（或不同的回调）函数</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span></span><br><span class="line"><span class="actionscript">script.src = <span class="string">'http://localhost/jsonp/server.php?callback='</span> + funcName</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.appendChild(script)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//2.随机生成一个函数名，可去测试下。随机数也可能会重复，所以加毫秒数就不大可能了。注意随机数格式。随机生成的函数，服务端不知道，所以要加到请求中</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> funcName = <span class="string">'jsonp_'</span> + <span class="built_in">Date</span>.now() + <span class="built_in">Math</span>.random().toString().substr(<span class="number">2</span>, <span class="number">5</span>)</span></span><br><span class="line"><span class="actionscript"><span class="comment">//1.全局函数都在window底下。那['']用一个字符串去传递函数的名字，好处：[]里可以通过随机数或时间戳等来生成随机性函数名，这样就不重复了</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>[funcName] = <span class="function"><span class="keyword">function</span>  (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(<span class="string">'1111'</span>, data)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JSONP封装"><a href="#JSONP封装" class="headerlink" title="JSONP封装"></a>JSONP封装</h3><p>有了个用例之后，开始封装。1.封装的参数跟$.get一样    2.url替换 3.callback替换 4.get会传入如id等参数——params，解析下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span> (<span class="params">url, params, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> funcName = <span class="string">'jsonp_'</span> + <span class="built_in">Date</span>.now() + <span class="built_in">Math</span>.random().toString().substr(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">  <span class="comment">//解析url传入的参数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> params === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tempArr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = params[key]</span><br><span class="line">      tempArr.push(key + <span class="string">'='</span> + value)</span><br><span class="line">    &#125;</span><br><span class="line">    params = tempArr.join(<span class="string">'&amp;'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  <span class="comment">//2的</span></span><br><span class="line">  script.src = url + <span class="string">'?'</span> + params + <span class="string">'&amp;callback='</span> + funcName</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>[funcName] = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//3的</span></span><br><span class="line">    callback(data)</span><br><span class="line">    <span class="comment">//每次用完了就删除随机函数，然后移除scirpt标记</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">window</span>[funcName]    	<span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">jsonp(<span class="string">'http://localhost/jsonp/server.php'</span>, &#123; <span class="attr">id</span>: <span class="number">123</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">jsonp(<span class="string">'http://localhost/jsonp/server.php'</span>, &#123; <span class="attr">id</span>: <span class="number">123</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>JQ也有封装JSONP，使用跟$.get类似</p>
<p>基本使用如：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">      ur<span class="variable">l:</span> <span class="string">'http://localhost/jsonp/server.php'</span>,</span><br><span class="line">      dataType: <span class="string">'jsonp'</span>,</span><br><span class="line">      succes<span class="variable">s:</span> <span class="function"><span class="keyword">function</span> <span class="params">(res)</span> &#123;</span></span><br><span class="line">        console.<span class="built_in">log</span>(<span class="keyword">res</span>)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>总结：因为 XMLHttpRequest 这个对象不支持对不同源地址之间的跨域请求，所以我们找到了script标记</p>
<p>面试回答：它实际上是借用了script标记可以发送不同源地址请求的一个特性去完成的一个跨域请求</p>
<h3 id="AJAX跨域（CORS）"><a href="#AJAX跨域（CORS）" class="headerlink" title="AJAX跨域（CORS）"></a>AJAX跨域（CORS）</h3><p>Cross Origin Resource Share，跨域资源共享</p>
<p>现在支持不同源地址之前的ajax请求，不过存在兼容问题、需要进行一些服务端的配置。</p>
<p>之前有个问题：涉及到AJAX操作的页面”不能“通过文件方式访问——就是跨域问题，现在也可以解决了。</p>
<p>1.服务端只需一行代码搞定：允许跨域请求header(‘Access-Control-Allow-Origin: *’);</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php">$conn = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>, <span class="string">'demo'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="php">$query = mysqli_query($conn, <span class="string">'select * from users'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">while</span> ($row = mysqli_fetch_assoc($query)) &#123;</span></span><br><span class="line"><span class="php">  $data[] = $row;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="comment">// 一行代码搞定</span></span></span><br><span class="line"><span class="php"><span class="comment">// 允许跨域请求：允许所有源对我这个源发起请求</span></span></span><br><span class="line"><span class="php"><span class="comment">//指定源：就把*换成网址</span></span></span><br><span class="line"><span class="php">header(<span class="string">'Access-Control-Allow-Origin: *'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="php">header(<span class="string">'Content-Type: application/json'</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> json_encode($data);</span></span><br></pre></td></tr></table></figure>

<p>2.客户端不用做任何修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    $.<span class="keyword">get</span>('http://localhost/cors.php', &#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(res)</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>04-MySQL</title>
    <url>/2020/03/29/04-MySQL/</url>
    <content><![CDATA[<h2 id="主要目的"><a href="#主要目的" class="headerlink" title="主要目的"></a>主要目的</h2><p>学习数据库怎么安装、怎么使用、怎么通过代码的方式去操作它。</p>
<a id="more"></a>

<h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h2><p>数据库是一种数据存储的手段，只不过为了便于我们对数据的操作做了很多功能。</p>
<p>数据库就是数据的仓库，用来按照特定的结构去组织和管理我们的数据，有了数据库我们就可以更加方便、便捷的 操作（C / R / U / D）我们需要保存的数据。</p>
<p><strong>数据库查询</strong>：指的是操作数据库的过程（增、删、改、查）</p>
<p><strong>数据库查询语言</strong>：SQL（结构化查询语言）。基本查询语句、常用查询函数如果忘了去看pdf</p>
<p>分页查询数据的子语句：limit <skip>,<length></p>
<p>​                                        （有个公式skip=（page-1）*size）</p>
<p>select * from users limit 2；//限制取几条</p>
<p>select * from users limit <skip>,<length>；//越过多少条取几条</p>
<h2 id="安装与配置-MySQL"><a href="#安装与配置-MySQL" class="headerlink" title="安装与配置 MySQL"></a>安装与配置 MySQL</h2><ul>
<li>在开发领域，存储数据一般用<strong>专门的数据库服务器专门提供的数据库服务</strong>。</li>
<li>如果需要<strong>让自己的机器也可以 提供数据库服务</strong>，那么就需要安装特定的数据库服务器软件，这种类型的软件也有很多：Oracle、MySQL、SQL Server</li>
</ul>
<p>解压版安装过程：</p>
<ol>
<li><p>解压到纯英文路径 </p>
</li>
<li><p>解压目录添加 my.ini （可选，先不添加）</p>
<p>参考：<br><a href="http://www.cnblogs.com/Ray-xujianguo/p/3322455.html" target="_blank" rel="noopener">http://www.cnblogs.com/Ray-xujianguo/p/3322455.html</a></p>
<p><a href="https://gist.github.com/hanjong/1205199" target="_blank" rel="noopener">https://gist.github.com/hanjong/1205199</a></p>
<p><a href="https://dev.mysql.com/doc/refman/5.5/en/mysqld-option-tables.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.5/en/mysqld-option-tables.html</a></p>
</li>
</ol>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[mysqld] </span><br><span class="line"># MySQL 安装目录 </span><br><span class="line">basedir=C:/Develop/mysql </span><br><span class="line"># 数据文件所在目录 datadir=C:/Develop/mysql/data</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>以管理员身份运行 CMD 执行以下命令，<strong>安装MySQL 服务</strong></li>
</ol>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 定位到安装目录下的 bin 文件夹 （因为安装服务的工具在里面）</span><br><span class="line">$ <span class="built_in">cd</span> &lt;MySQL安装目录&gt;/bin </span><br><span class="line"># 初始化 数据所需文件以及获取一个临时的访问密码，把它复制保存下来，不然要重新安装。要手打，复印会错</span><br><span class="line">#若重新执行命令，会报错，因为mysal/data里的文件已经存在。不让初始化原因：考虑到可能有些重要的商业数据</span><br><span class="line">$ mysqld ‐‐initialize ‐‐user=mysql ‐‐console </span><br><span class="line"># 将 MySQL 安装为服务 可以指定服务名称（可不写，会有个默认服务名） 。安装成功后，可到服务面板查看是否有MySQL服务，建议将启动方式设成手动启动。</span><br><span class="line">$ mysqld ‐‐install MySQL</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>登入 MySQL 服务器，重置密码</li>
</ol>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 先通过用户名密码进入 MySQL 操作环境 </span><br><span class="line">$ mysql ‐u root ‐p </span><br><span class="line">Enter password: # 输入临时密码   </span><br><span class="line"># 设置数据库访问密码，一定要加分号 mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> root@localhost = password('<span class="number">123</span>');</span><br><span class="line"># 输入<span class="keyword">exit</span>;可退出，再登陆一遍测试数据库可登陆，再输入show databases;确保数据库成功。</span><br></pre></td></tr></table></figure>

<p>启动服务，可以通过服务面板启动 或命令行（net不管当前目录在哪都可执行，可启动、停止系统上任何一个服务）中输入<strong>net start MySQL</strong>。每次启动完要记得登陆MySQL：$ mysql ‐u root ‐p。</p>
<p>mysql&gt;show databases; 可以查看内置的数据库。</p>
<p>解压版卸载过程：服务卸载、文件删除即可。</p>
<p>​    先到服务面板停止服务，再到命令行（sc不管当前目录在哪都可执行，可删除系统上任何一个服务）卸载服务：<strong>sc delete MySQL</strong>。（服务名称，不是服务面板的显示名称，而要双击显示名称才能看到服务名称）。把解压文件删除掉就好。</p>
<h1 id="数据库管理工具："><a href="#数据库管理工具：" class="headerlink" title="数据库管理工具："></a>数据库管理工具：</h1><p>以后可视化工具会很少使用，所以要熟悉命令行去操作</p>
<h2 id="MySQL-的-REPL-环境对数据库的基本操作"><a href="#MySQL-的-REPL-环境对数据库的基本操作" class="headerlink" title="MySQL 的 REPL 环境对数据库的基本操作"></a>MySQL 的 REPL 环境对数据库的基本操作</h2><p>R E P L：输入、执行、打印、循环</p>
<p>一般如果只是简单操作数据库，推荐使用 MySQL 内置的命令行工具完成：<br>通过命令行运行解压目录下 bin 目录中的 mysql.exe ：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 定位到 bin 目录</span><br><span class="line">$ <span class="built_in">cd</span> &lt;解压目录&gt;/bin </span><br><span class="line"># 运行 mysql，‐u 指定数据库用户名，‐p 指定密码 </span><br><span class="line">$ mysql ‐u root ‐p wanglei </span><br><span class="line"># 一般不建议在命令中填写密码，因为这样会暴露你的密码，一般只加一个 ‐p 但是不给值 </span><br><span class="line">$ mysql ‐u root ‐p </span><br><span class="line">Enter password: # 这时会要求你输入密码</span><br></pre></td></tr></table></figure>

<p>进入 MySQL 客户端的 REPL 环境过后，可以通过标准的 SQL 语句操作数据库。</p>
<p>常见的操作指令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;  ‐‐ 显示全部数据库 </span><br><span class="line">mysql&gt; create database &lt;db‐name&gt;;  ‐‐ 创建一个指定名称的数据库 mysql&gt; use &lt;db‐name&gt;;  ‐‐ 使用一个数据库，相当于进入指定的数据库 mysql&gt; show tables;  ‐‐ 显示当前数据库中有哪些表 mysql&gt; create table &lt;table‐name&gt; (id int, name varchar(<span class="number">20</span>), age int);  ‐‐ 创建一个指定名称的数据 表，并添加 <span class="number">3</span> 个列 </span><br><span class="line">mysql&gt; desc &lt;table‐name&gt;;  ‐‐ 查看指定表结构 mysql&gt; source ./<span class="built_in">path</span>/to/sql‐file.sql  ‐‐ 执行本地 SQL 文件中的 SQL 语句 </span><br><span class="line">mysql&gt; drop table &lt;table‐name&gt;;  ‐‐ 删除（放弃）一个指定名称的数据表 mysql&gt; drop database &lt;db‐name&gt;;  ‐‐ 删除（放弃）一个指定名称的数据库 mysql&gt; <span class="keyword">exit</span>|quit;  ‐‐ 退出数据库终端</span><br></pre></td></tr></table></figure>

<p>drop少用，不可逆的操作。除了有些数据库管理软件提供的策略：每天晚上12点定期把数据库备份到另一个软件上面，如果你有需求了可以回滚到之前备份的状态</p>
<h2 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h2><p>如果需要复杂的操作，推荐 Navicat Premium(付费)、SQLyog</p>
<p>注意默认字符集及排序规则：utf8、gbk支持中文、排序规则按常规的（general）。默认为拉丁文的。怎样统一设置？</p>
<p>​    在新建/编辑数据库、常规中设置字符集、排序规则。建议为没有汉字的表设不同的字符集</p>
<p>​    或改下MySQL服务的默认字符集：在mysql目录下新建配置文件my.ini（要么只用sublime或记事本编辑，切记不能切换着用，编码类型会变），也可到mysql官方文档看配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span> </span><br><span class="line"><span class="comment"># 设置默认字符集,只会影响新建数据库的默认字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=uft8</span><br></pre></td></tr></table></figure>

<h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><p>将导出的.sql中的代码复制黏贴到 数据库新建查询 上 执行，然后刷新出现即可。</p>
<h1 id="数据库查询语言：SQL"><a href="#数据库查询语言：SQL" class="headerlink" title="数据库查询语言：SQL"></a>数据库查询语言：SQL</h1><ol>
<li><p>SQL（结构化查询语言）。</p>
</li>
<li><p>基本查询语句、常用查询函数如果忘了去看pdf</p>
</li>
<li><p>分页查询数据的子语句：limit <skip>,<length></p>
</li>
</ol>
<p>​                                        （有个公式skip=（page-1）*size）</p>
<p>select * from users limit 2；//限制取几条</p>
<p>select * from users limit <skip>,<length>；//越过多少条取几条</p>
<h1 id="通过代码执行SQL语句来操作数据库"><a href="#通过代码执行SQL语句来操作数据库" class="headerlink" title="通过代码执行SQL语句来操作数据库"></a>通过代码执行SQL语句来操作数据库</h1><p>1.大体流程：</p>
<p>2.如何在 PHP 代码中操作数据库是我们能否在自己的程序中使用数据库的核心。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">数据库扩展：http:<span class="regexp">//</span>php.net<span class="regexp">/manual/</span>zh<span class="regexp">/refs.database.php</span></span><br></pre></td></tr></table></figure>

<p>如果需要使用 MySQLi 扩展，需要在 php.ini 文件中打开这个扩展（解除注释）</p>
<p>配置完扩展之后，可以用phpinfo();看下配置扩展有没成功（ctrl+F查找下有没存在mysqil的二级标题，有即成功）</p>
<p>3.代码：前提——开启MySQLi 扩展，才能使用该扩展提供的函数</p>
<p>版本1：只是看一下逻辑，不是最终版本</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 能通过PHP代码执行一个SQL语句得到查询的结果</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span>. 建立与数据库服务器之间的连接。连别人数据库也是知道对方的ip、用户名、密码、数据库名，让对方开启数据库访问权限即可</span><br><span class="line"><span class="regexp">//</span>为啥用该API？之前的mysql_connect已被淘汰，这里的i表示提高版</span><br><span class="line"><span class="regexp">//</span>建立连接就涉及到一个问题——指定哪个。参数：IP、用户名、密码、数据库名</span><br><span class="line"><span class="regexp">//</span>写完这句代码就可以到浏览器看下有没报错，没报错就没问题。</span><br><span class="line"><span class="regexp">//</span>用变量来接收，表示一个“桥”，装着web服务器与数据库服务器的连接</span><br><span class="line"><span class="variable">$connection</span> = mysqli_connect(<span class="string">'127.0.0.1'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>, <span class="string">'demo2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>判断一下这个桥能否正常打通,不报错即可。</span><br><span class="line"><span class="regexp">//</span>var_dump(<span class="variable">$connection</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$connection</span>) &#123;</span><br><span class="line">  <span class="regexp">//</span> 连接数据库失败提示</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;连接数据库失败&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>建立完连接后，进行查询（增删改查）——mysqli_query（基于哪个连接去查询，查询语句（但建议先在数据库查询窗口试好，再回到代码这执行））</span><br><span class="line"><span class="variable">$query</span> = mysqli_query(<span class="variable">$connection</span>, <span class="string">'select * from users;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 基于刚刚创建的连接对象执行一次查询操作，这儿进行查询数据的呈现。但第一次测试，发现呈现的不是想要的数据。</span><br><span class="line"><span class="regexp">//</span>因为得到的<span class="variable">$query</span>是一个查询对象，这个查询对象可以用来再到数据一行一行拿数据</span><br><span class="line"><span class="regexp">//</span>var_dump(<span class="variable">$query</span>);</span><br><span class="line"><span class="regexp">//</span>再以关联数组的方式 取一行 数据mysqli_fetch_assoc(<span class="variable">$query</span>)</span><br><span class="line"><span class="regexp">//</span><span class="variable">$row</span> = mysqli_fetch_assoc(<span class="variable">$query</span>);</span><br><span class="line"><span class="regexp">//</span>var_dump(<span class="variable">$row</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>最终结果：循环去呈现查询结果的每行数据</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$row</span> = mysqli_fetch_assoc(<span class="variable">$query</span>)) &#123;</span><br><span class="line">  var_dump(<span class="variable">$row</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>版本2：由于1不够严谨</p>
<p>查部分：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 查询数据的查询语句</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span>. 建立与数据库服务器之间的连接</span><br><span class="line"><span class="variable">$connection</span> = mysqli_connect(<span class="string">'127.0.0.1'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>, <span class="string">'demo2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span>. 必须在查询数据之前</span><br><span class="line"><span class="regexp">//</span> <span class="number">2</span>. 必须传入连接对象和编码</span><br><span class="line"><span class="regexp">//my</span>sqli_set_charset(<span class="variable">$connection</span>, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="regexp">//</span> mysqli_query(<span class="variable">$connection</span>, <span class="string">'set names utf8;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$connection</span>) &#123;</span><br><span class="line">  <span class="regexp">//</span> 连接数据库失败</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;连接数据库失败&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 基于刚刚创建的连接对象执行一次查询操作</span><br><span class="line"><span class="variable">$query</span> = mysqli_query(<span class="variable">$connection</span>, <span class="string">'select * from users;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$query</span>) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;查询失败&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 遍历结果集</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$row</span> = mysqli_fetch_assoc(<span class="variable">$query</span>)) &#123;</span><br><span class="line">  var_dump(<span class="variable">$row</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 释放查询结果集</span><br><span class="line">mysqli_free_result(<span class="variable">$query</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 炸桥 关闭连接。原因：释放占用</span><br><span class="line">mysqli_close(<span class="variable">$connection</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PHP查询中文数据的编码问题：通过mysqli_set_charset(连接对象，编码类型)，必须要在查询数据之前设置，必须传入连接对象和编码。或mysqli_query($connection, ‘set names utf8;’)。第一种常用</p>
</blockquote>
<p>增删改部分：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 增删改数据的查询语句</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span>. 建立与数据库服务器之间的连接</span><br><span class="line"><span class="variable">$connection</span> = mysqli_connect(<span class="string">'127.0.0.1'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>, <span class="string">'demo2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$connection</span>) &#123;</span><br><span class="line">  <span class="regexp">//</span> 连接数据库失败</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;连接数据库失败&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 基于刚刚创建的连接对象执行一次查询操作</span><br><span class="line"><span class="variable">$query</span> = mysqli_query(<span class="variable">$connection</span>, <span class="string">'delete from users where id = 5;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$query</span>) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;查询失败&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 如何拿到受影响行——mysqli_affected_rows(<span class="variable">$connection</span>)</span><br><span class="line"><span class="regexp">//</span> 注意：传入的一定是连接对象，而不是查询对象。因为该API返回的是这个连接对象上一次查询受影响的行数</span><br><span class="line"><span class="variable">$rows</span> = mysqli_affected_rows(<span class="variable">$connection</span>);</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$rows</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 炸桥 关闭连接</span><br><span class="line">mysqli_close(<span class="variable">$connection</span>);</span><br></pre></td></tr></table></figure>

<p>作业：将音乐列表的json文件换成个数据库。</p>
<h2 id="基于数据库增删改查实例"><a href="#基于数据库增删改查实例" class="headerlink" title="基于数据库增删改查实例"></a>基于数据库增删改查实例</h2><p>具体看code</p>
<p>这儿静态页面已经有了（列表页、添加/编辑页（2者区别：有没默认值））</p>
<p>1.页面拿过来先分析：数据库设计——看下数据库要存什么信息（设计表、设计表里的字段）？</p>
<p>通过界面能得到这些信息，不够回头再来数据库加。表结构添加完，加（改）数据：（通过语句去加或可视化界面加，语句加更方便。原因：insert语句多执行几次数据就多了，不用像后者一行行加）</p>
<h3 id="（列表）查功能"><a href="#（列表）查功能" class="headerlink" title="（列表）查功能"></a>（列表）查功能</h3><p>概括：先通过数据库连接查询出来我们要的数据，查询出来后在html代码中遍历出来即可。</p>
<p>2.现在有静态页面也有数据源了。看列表功能怎么去做。把静态页面写活（动态渲染把代码黏贴到.php，改下css路径。把html代码中需要动态生成的写死的地方给它动态生成：）</p>
<p>把html代码中需要动态生成的写死的地方给它动态生成：</p>
<p>（1）前提：获取已有数据——1.建立连接2.开始查询3.遍历结果集</p>
<p>以前是读文件的方式把数据拿出来，现在是通过读数据库的方式拿数据。现在看起来复杂：代码中要查询、数据库也要查询，之后我们会学怎么封装这些步骤成一个公共函数，调用起来就非常方便了。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span>. 建立连接</span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>, <span class="string">'test'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;连接数据库失败&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="number">2</span>. 开始查询</span><br><span class="line"><span class="variable">$query</span> = mysqli_query(<span class="variable">$conn</span>, <span class="string">'select * from users;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$query</span>) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;查询数据失败&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="number">3</span>. 遍历结果集。装满了我们之前所查到的数据，再到html代码中遍历一下，但这是闲得蛋疼：循环一下把它装在数组里面（这儿没必要），再到html代码中循环一下这个数组</span><br><span class="line"><span class="regexp">//</span> <span class="keyword">while</span> (<span class="variable">$item</span> = mysqli_fetch_assoc(<span class="variable">$query</span>)) &#123;</span><br><span class="line">	 <span class="regexp">//</span>先测试</span><br><span class="line">	 <span class="regexp">//</span>var_dump(<span class="variable">$item</span>);</span><br><span class="line">	 <span class="regexp">//</span>想办法把数据装起来</span><br><span class="line"><span class="regexp">//</span>   <span class="variable">$data</span>[] = <span class="variable">$item</span>;</span><br><span class="line"><span class="regexp">//</span> &#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>有了数据之后，就把要改的写死的代码删掉，然后写php遍历代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">while</span> ($item = mysqli_fetch_assoc($query)): <span class="meta">?&gt;</span></span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"row"</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $item[<span class="string">'id'</span>] <span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;?php echo $item['avatar']; ?&gt;"</span> <span class="attr">class</span>=<span class="string">"rounded"</span> <span class="attr">alt</span>=<span class="string">"&lt;?php echo $item['name']; ?&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $item[<span class="string">'name'</span>]; <span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $item[<span class="string">'gender'</span>] == <span class="number">0</span> ? <span class="string">'♀'</span> : <span class="string">'♂'</span>; <span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          //注意这儿拿当前时间做个减法</span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $item[<span class="string">'birthday'</span>]; <span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-info btn-sm"</span> <span class="attr">href</span>=<span class="string">"edit.php"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">endwhile</span> <span class="meta">?&gt;</span></span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="删功能-及批量删除思路"><a href="#删功能-及批量删除思路" class="headerlink" title="删功能 及批量删除思路"></a>删功能 及批量删除思路</h3><p>概括：当我们点击删除按钮时，把对应的当前数据删掉（不可能只是在客户端界面上把当前数据删掉，而是发一个请求到服务端，告诉服务端我们要删掉id为几的这条数据）</p>
<p>具体做法:给删除 一个a链接，让a链接点击时发送一次请求，跟服务端产生一次交互。</p>
<p>注意：要获取一下通过？参数传过来的要删数据的id（因为？的方式可以告诉服务端我们这想删什么）</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;a <span class="attribute">class</span>=<span class="string">"btn btn-danger btn-sm"</span> <span class="attribute">href</span>=<span class="string">"delete.php?id=&lt;?php echo <span class="variable">$item</span>['id'] ?&gt;"</span>&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>delete.php中代码：</p>
<p>套路跟之前一样，只是语句不太一样：从查语句变成删语句。但html中要先获取一下通过？参数传过来的要删数据的id（因为？的方式可以告诉服务端我们这想删什么），再delete.php中通过代码接收参数</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 接收要删除的数据 ID</span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$_GET</span>[<span class="string">'id'</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;必须传入指定参数&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">//</span>继续往下走，意味着传了id，我们把id接收下来</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">'id'</span>]; <span class="regexp">//</span> =&gt; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span>. 建立连接</span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>, <span class="string">'test'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;连接数据库失败&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="number">2</span>. 开始查询</span><br><span class="line"><span class="regexp">//</span>如SQL语句<span class="keyword">delete</span> from users where id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)一样，把id = <span class="string">' . $id . '</span>;<span class="string">')改成id in ('</span> . <span class="variable">$id</span> . <span class="string">');'</span>)，再在网址上输入<span class="keyword">delete</span>.php?id=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>就批量删除了。原因：上面的<span class="variable">$id</span>接收到的就不再是单个数字，而是<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>这样格式的数据，就完成了批量删除的功能</span><br><span class="line"><span class="variable">$query</span> = mysqli_query(<span class="variable">$conn</span>, <span class="string">'delete from users where id in ('</span> . <span class="variable">$id</span> . <span class="string">');'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$query</span>) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;查询数据失败&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">//</span>获取受影响行数，以后可不写，这只是为了锻炼调用API能力</span><br><span class="line"><span class="variable">$affected_rows</span> = mysqli_affected_rows(<span class="variable">$conn</span>);</span><br><span class="line"><span class="regexp">//</span>这儿用&lt;=判断，而非&gt;判断。因为我们之后要做个批量删除功能：批量删除那这就也不&gt;<span class="number">0</span>了</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$affected_rows</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;删除失败&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">//</span>跳转回去</span><br><span class="line">header(<span class="string">'Location: index.php'</span>);</span><br></pre></td></tr></table></figure>

<p>批量删除思路：checkbox选择/不选择时，删除按钮（有a链接，怎么看出来：底下地址栏有个链接地址显示、地址？后有参数）的显示/隐藏。涉及到一些js功能，PHP与js混在一起情况（js：处理界面上的东西php：处理服务端的逻辑）、js全选不全选功能。自己去做</p>
<h3 id="增（-添加）功能"><a href="#增（-添加）功能" class="headerlink" title="增（/添加）功能"></a>增（/添加）功能</h3><p>静态页面-&gt;动态页面.php（改添加链接、表单添加form属性、给每个input加name、label、给laber加for、option加value）。如</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">option</span> <span class="keyword">value</span>="-1"&gt;请选择性别&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">option</span> <span class="keyword">value</span>="1"&gt;男&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">option</span> <span class="keyword">value</span>="0"&gt;女&lt;/<span class="keyword">option</span>&gt;</span><br></pre></td></tr></table></figure>

<p>给表单测试下能否正常提交再去处理功能：看Network、点add.php看下Request Payload请求体的name及值是不是都有了</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;form <span class="attribute">action</span>=<span class="string">"&lt;?php echo <span class="variable">$_SERVER</span>['PHP_SELF']; ?&gt;"</span> <span class="attribute">method</span>=<span class="string">"post"</span> <span class="attribute">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attribute">autocomplete</span>=<span class="string">"off"</span>&gt;bootstrap的自动完成也关掉，实际项目时打开，测试时关掉影响操作</span><br></pre></td></tr></table></figure>

<p>写一段php脚本（在当前页面被post请求时去处理些对应的逻辑：处理方式、自定义函数优化else嵌套过深、校验（验证非空（一些文本域：文本框及文件域、而一些特殊的，如性别、生日，它们提交的也是可以直接去判断的）、取（文本域）值、接收文件并验证、持久化（保存）、响应</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">add_user</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="comment">// 验证非空</span></span></span><br><span class="line"><span class="php">  <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'name'</span>])) &#123;</span></span><br><span class="line"><span class="php">    $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'请输入姓名'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="keyword">if</span> (!(<span class="keyword">isset</span>($_POST[<span class="string">'gender'</span>]) &amp;&amp; $_POST[<span class="string">'gender'</span>] !== <span class="string">'-1'</span>)) &#123;</span></span><br><span class="line"><span class="php">    $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'请选择性别'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'birthday'</span>])) &#123;</span></span><br><span class="line"><span class="php">    $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'请输入日期'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="comment">// 取值</span></span></span><br><span class="line"><span class="php">  $name = $_POST[<span class="string">'name'</span>];</span></span><br><span class="line"><span class="php">  $gender = $_POST[<span class="string">'gender'</span>];</span></span><br><span class="line"><span class="php">  $birthday = $_POST[<span class="string">'birthday'</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="comment">// 接收文件并验证</span></span></span><br><span class="line"><span class="php">  <span class="keyword">if</span> (<span class="keyword">empty</span>($_FILES[<span class="string">'avatar'</span>])) &#123;</span></span><br><span class="line"><span class="php">    $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'请上传头像'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  </span></span><br><span class="line"><span class="php">  <span class="comment">//获取扩展名，注意没有.</span></span></span><br><span class="line"><span class="php">  $ext = pathinfo($_FILES[<span class="string">'avatar'</span>][<span class="string">'name'</span>], PATHINFO_EXTENSION);</span></span><br><span class="line"><span class="php">  <span class="comment">// =&gt; jpg</span></span></span><br><span class="line"><span class="php">  <span class="comment">//屏蔽掉中文路径的问题：让目标路径没有中文——文件名字有中文就不要这文件名字</span></span></span><br><span class="line"><span class="php">  <span class="comment">//两个点表示跳过2层上级文件夹 找到uploads。若想给文件名加个前缀avatar-，就'../uploads/avatar-'。再拼接上扩展名.和$ext</span></span></span><br><span class="line"><span class="php">  $target = <span class="string">'../uploads/avatar-'</span> . uniqid() . <span class="string">'.'</span> . $ext;</span></span><br><span class="line"><span class="php">  <span class="comment">//移动到目标路径</span></span></span><br><span class="line"><span class="php">  <span class="keyword">if</span> (!move_uploaded_file($_FILES[<span class="string">'avatar'</span>][<span class="string">'tmp_name'</span>], $target)) &#123;</span></span><br><span class="line"><span class="php">    $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'上传头像失败'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="comment">//取值：头像的地址，这儿注意是用绝对路径/uploads... 用API字符串截取</span></span></span><br><span class="line"><span class="php">  $avatar = substr($target, <span class="number">2</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="comment">//打印检测下有没问题	</span></span></span><br><span class="line"><span class="php">  <span class="comment">// var_dump($name);</span></span></span><br><span class="line"><span class="php">  <span class="comment">// var_dump($gender);</span></span></span><br><span class="line"><span class="php">  <span class="comment">// var_dump($birthday);</span></span></span><br><span class="line"><span class="php">  <span class="comment">// var_dump($avatar);</span></span></span><br><span class="line"><span class="php">  <span class="comment">// 保存</span></span></span><br><span class="line"><span class="php">  <span class="comment">//数据有了之后，接下来就是插入到数据库里面去</span></span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="comment">// 1. 建立连接</span></span></span><br><span class="line"><span class="php">  $conn = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>, <span class="string">'test'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="keyword">if</span> (!$conn) &#123;</span></span><br><span class="line"><span class="php">    $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'连接数据库失败'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="php">  &#125; </span></span><br><span class="line"><span class="php">  </span></span><br><span class="line"><span class="php">  <span class="comment">// 写完打印测试下</span></span></span><br><span class="line"><span class="php">  <span class="comment">// var_dump("insert into users values (null, '&#123;$name&#125;', &#123;$gender&#125;, '&#123;$birthday&#125;', '&#123;$avatar&#125;');");</span></span></span><br><span class="line"><span class="php">  <span class="comment">// 2. 开始查询。修改成添加语句（在数据库执行成功后复制过来，将里面的假数据换成真数据，注意  里面有单引号外面就该用双引号  及解析变量外加花括号来声明变量避免问题提高可读性）</span></span></span><br><span class="line"><span class="php">  $query = mysqli_query($conn, <span class="string">"insert into users values (null, '&#123;$name&#125;', &#123;$gender&#125;, '&#123;$birthday&#125;', '&#123;$avatar&#125;');"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="keyword">if</span> (!$query) &#123;</span></span><br><span class="line"><span class="php">    $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'查询过程失败'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">  $affected_rows = mysqli_affected_rows($conn);</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="keyword">if</span> ($affected_rows !== <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="php">    $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'添加数据失败'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="comment">// 响应：header跳转</span></span></span><br><span class="line"><span class="php">  header(<span class="string">'Location: index.php'</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($_SERVER[<span class="string">'REQUEST_METHOD'</span>] === <span class="string">'POST'</span>) &#123;</span></span><br><span class="line"><span class="php">  add_user();</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">html种添加错误信息：</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"heading"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($error_message)): <span class="meta">?&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span>&gt;</span></span><br><span class="line">      <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $error_message; <span class="meta">?&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">endif</span> <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>客户端（界面）方面：</p>
<ul>
<li>性别文本域最终提交的是什么？option加了value，提交value；若没，提交innertext。 注意这儿value给-1（请选择性别）、0（女）、1（男）</li>
<li>关于生日界面处理：html5的日期选择框（移动端用得多）或一些JQ的日期选择器插件（有些可以配合bootstrap样式）</li>
</ul>
<h3 id="改（-编辑）功能"><a href="#改（-编辑）功能" class="headerlink" title="改（/编辑）功能"></a>改（/编辑）功能</h3><p>点编辑跳转到编辑页（页面：跟添加页面差不多，复制粘贴改一下部分信息）</p>
<p>注意：头像部分问题留着。文件域不能设置默认值（选不到客户端上用户自己的文件）</p>
<p>逻辑：1.接收处理：接收要修改ID、查询（对应ID）数据、加入SQL更改语句、传入参数（在html中：注意null在==情况跟0相等，所以要===‘0’） 2.提交更改了的表单：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> <span class="number">1</span>. 建立连接</span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>, <span class="string">'test'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;连接数据库失败&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="number">2</span>. 开始查询。只有一条数据但也一定要加limit <span class="number">1</span>.上面的删除语句也要加：使数据找到这条就不会往下找了，提高效率。</span><br><span class="line"><span class="variable">$query</span> = mysqli_query(<span class="variable">$conn</span>, <span class="string">"select * from users where id = &#123;$id&#125; limit 1;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$query</span>) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;查询数据失败&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="variable">$user</span> = mysqli_fetch_assoc(<span class="variable">$query</span>);</span><br><span class="line"><span class="regexp">//</span>因为找不到，就不用呈现下面的html了。所以跳转</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$user</span>) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">'&lt;h1&gt;找不到你要编辑的数据&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 2.提交更改了的表单：</p>
<p>分析业务：点击编辑按钮（a链接，点击链接肯定会有请求响应的过程发生）,跳转到另一个地址。</p>
<p>在html传上id：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;a <span class="attribute">class</span>=<span class="string">"btn btn-info btn-sm"</span> <span class="attribute">href</span>=<span class="string">"edit.php?id=&lt;?php echo <span class="variable">$item</span>['id'] ?&gt;"</span>&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>跳转到编辑页面edit.php后，表单提交时也要提交给index.php id，必须在action地址后面加上id</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/%E7%BC%96%E8%BE%91%E5%8A%9F%E8%83%BD%E6%B5%81%E7%A8%8B.png" alt=""></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;form <span class="attribute">action</span>=<span class="string">"&lt;?php echo <span class="variable">$_SERVER</span>['PHP_SELF']; ?&gt;?id=&lt;?php echo <span class="variable">$user</span>['id']; ?&gt;"</span></span><br></pre></td></tr></table></figure>

<p>3.提交添加后，请求方式从get拿变成了post发：执行最后一张图的红色三步</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/%E7%BC%96%E8%BE%91%E5%8A%9F%E8%83%BD%E6%B5%81%E7%A8%8B.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">edit</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">global</span> $user;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 验证非空</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'name'</span>])) &#123;</span><br><span class="line">    $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'请输入姓名'</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">isset</span>($_POST[<span class="string">'gender'</span>]) &amp;&amp; $_POST[<span class="string">'gender'</span>] !== <span class="string">'-1'</span>)) &#123;</span><br><span class="line">    $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'请选择性别'</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'birthday'</span>])) &#123;</span><br><span class="line">    $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'请输入日期'</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取值，到这儿复制上面的</span></span><br><span class="line">  $user[<span class="string">'name'</span>] = $_POST[<span class="string">'name'</span>];</span><br><span class="line">  $user[<span class="string">'gender'</span>] = $_POST[<span class="string">'gender'</span>];</span><br><span class="line">  $user[<span class="string">'birthday'</span>] = $_POST[<span class="string">'birthday'</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 有上传就修改。这儿接收文件部分需要重新去处理，因为有文件接收文件，没有文件就不修改这头像（新增不用）</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($_FILES[<span class="string">'avatar'</span>]) &amp;&amp; $_FILES[<span class="string">'avatar'</span>][<span class="string">'error'</span>] === UPLOAD_ERR_OK) &#123;</span><br><span class="line">    <span class="comment">// 用户上传了新头像 -&gt; 用户希望修改头像</span></span><br><span class="line">    $ext = pathinfo($_FILES[<span class="string">'avatar'</span>][<span class="string">'name'</span>], PATHINFO_EXTENSION);</span><br><span class="line">    $target = <span class="string">'../uploads/avatar-'</span> . uniqid() . <span class="string">'.'</span> . $ext;</span><br><span class="line">    <span class="keyword">if</span> (!move_uploaded_file($_FILES[<span class="string">'avatar'</span>][<span class="string">'tmp_name'</span>], $target)) &#123;</span><br><span class="line">      $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'上传头像失败'</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $user[<span class="string">'avatar'</span>] = substr($target, <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// $user =&gt; 修改过后的信息</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> 将数据更新回数据库</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'REQUEST_METHOD'</span>] === <span class="string">'POST'</span>) &#123;</span><br><span class="line">  edit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文件域要呈现原有头像：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"&lt;?php echo <span class="variable">$user</span>['avatar']; ?&gt;"</span> <span class="attribute">alt</span>=<span class="string">""</span>&gt;//这条代码。</span><br><span class="line">      &lt;div <span class="attribute">class</span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">        &lt;label <span class="attribute">for</span>=<span class="string">"avatar"</span>&gt;头像&lt;/label&gt;</span><br></pre></td></tr></table></figure>

<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>字段类型：char 只适合存固定长度的数据。</p>
<p>​                            varchar 可变长度，如名字，一个汉字3个字符的话长度一般设20；性别，tinyint最小字符；数据库不存年龄这种会变的，而是存生日；头像，一般varchar、200长度来存路径</p>
<p>一般表名起名都是复数形式。</p>
<p>表结构添加完，加、改数据：（通过语句去加或可视化界面加，语句加更方便。原因：insert语句多执行几次数据就多了，不用像后者一行行加）</p>
<p>一般每张表都有id，给id设自动增值</p>
<p>性别用数字存，日期SQL语句存给有特殊格式的字符串如2010-12-12</p>
<p>每次代码中要执行查询语句，都先到数据库里试一下</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>03-PHP</title>
    <url>/2020/03/29/03-PHP/</url>
    <content><![CDATA[<p>在看该笔记前，要先看动态网页站开发基础</p>
<a id="more"></a>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>php学习笔记有的中间不用看，看最后总结</li>
<li>手册查找：在索引里找</li>
<li>php代码与html代码 <ul>
<li>php不会受html执行的影响。</li>
<li>什么时候执行：PHP在服务器运行环境执行。html在浏览器执行。</li>
<li>php执行时只关心字符串。</li>
</ul>
</li>
<li>但真正开发时，配环境：不会一个个装，而是直接用集成环境去装（将apche、php、mysql等全部装好）。而初学：不这样做，是因为容易把这些软件的职责搞乱</li>
<li>学习重心：如何去跟HTML混编。</li>
<li>php所有能力都是函数，内置1000多个函数</li>
<li>适用工具：sublime写php很方便，如if后tab键，会直接出现指令式的代码段。要不知道有哪些代码端，ctrl+shift+p命令面板里输入Snippet:，列出的都是代码端、对应方式<ul>
<li>sublime高效、没有太多提示类的东西、纯粹点</li>
</ul>
</li>
</ul>
<h2 id="配置-PHP-支持"><a href="#配置-PHP-支持" class="headerlink" title="配置 PHP 支持"></a>配置 PHP 支持</h2><p>大致过程：解压php-&gt;loadmodule-&gt;addtype</p>
<blockquote>
<p>实验：尝试在网站中添加一个扩展名为 php 的文件，然后到浏览器中访问它。</p>
<p>实验结果：并没有显示我们想要的 Hello PHP ，而是将代码原封不动的返回给浏览器了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!‐‐</span> <span class="attr">demo.php</span> ‐‐&gt;</span> </span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">'Hello PHP'</span>; <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>原因很简单：Apache 只能处理静态文件请求，对于后缀名为 .php 这种动态文件，它无法执行，所以就当成是一 个静态文件直接返回了。</p>
</blockquote>
<p>解决方法——配置PHP支持：</p>
<ol>
<li><p>下载PHP，在服务器（电脑）上安装 PHP </p>
<ol>
<li>解压 php 到纯英文路径目录中 （PHP是辅助工具，放这就好，剩下是Apache的事）</li>
</ol>
<blockquote>
<p>你可以理解为：Apache 是一家没有太多能力的公司，只能处理一些简单的业务（静态网站），但是心很大想 做更多的事（动态网站），所以就想到了外包，所有额外的业务都需要外包给其他程序，而 PHP 就是理解为 一个专门能够处理 php 业务的外包公司</p>
</blockquote>
</li>
<li><p>在 Apache 中添加支持 PHP 的配置  </p>
<ol>
<li><p>在 Apache 的配置文件httpd.conf，找到添加位置，添加 PHP 处理模块（如果目录有空格，给目录加“”）</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"># php sup<span class="keyword">port</span> LoadModule php7_module C:/Develop/php/php7apache2_4.dll</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <IfModule mime_module> 节点中添加 .php 扩展名解析支持（因为PHP不根据后缀判断是否工作，是根据MIME Type工作：如text/html。在conf/mime.types中没有将这类型与扩展名关联，所以要加载）</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># parse .php files </span></span><br><span class="line">AddType <span class="built_in">application</span>/x‐httpd‐php .php</span><br></pre></td></tr></table></figure>
</li>
<li><p>默认文档配置节点 <IfModule dir_module> 中添加 index.php</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">dir_module</span>&gt;</span>     </span><br><span class="line">	DirectoryIndex index.html index.php <span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="什么是PHP"><a href="#什么是PHP" class="headerlink" title="什么是PHP"></a>什么是PHP</h2><ul>
<li>嵌入在HTML中的脚本语言，适合做动态网页开发（因为：动态网站核心：界面上的内容可以变化）</li>
<li>松散的弱类型语言（如js，现在流行）</li>
<li>PHP的价值：通过执行某些PHP代码<strong>获取</strong>到指定的数据（API），<strong>填充</strong>到HTML的指定位置（混编）。</li>
<li>PHP就好像一个大号的模板引擎，只是比模板引擎较复杂</li>
<li>PHP的工作核心：字符串拼接：<strong>php标记以外的</strong>代码原封不动地输出，<strong>php标记以内的</strong>根据执行得到结果（根据代码逻辑来控制）。</li>
</ul>
<h2 id="PHP写在哪"><a href="#PHP写在哪" class="headerlink" title="PHP写在哪"></a>PHP写在哪</h2><p>跟html混编在一块。（最终执行时：<strong>php标记以外的</strong>代码原封不动地输出，<strong>php标记以内的</strong>就根据代码逻辑来控制。）所以，注意！不要在.php写注释</p>
<h2 id="PHP使用"><a href="#PHP使用" class="headerlink" title="PHP使用"></a>PHP使用</h2><h3 id="PHP-标记"><a href="#PHP-标记" class="headerlink" title="PHP 标记"></a>PHP 标记</h3><ul>
<li><p>&lt;?php 可以让代码进入“PHP 模式” （进入标记）</p>
</li>
<li><p>?&gt; 可以让代码退出“PHP 模式”（结束标记）</p>
</li>
<li><p>只有处于 PHP 标记内部的代码才是 PHP 代码，PHP 标记以外都原封不动。</p>
</li>
<li><p>注意PHP内部代码有；</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> date(<span class="string">'Y‐m‐d'</span>); <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="省略结束标记"><a href="#省略结束标记" class="headerlink" title="省略结束标记"></a>省略结束标记</h3><p>原因：若在php结束标记后面打换行，虽然界面中不显示，但浏览器源代码中会出现换行</p>
<p>建议删除结束标记情况：</p>
<ul>
<li>PHP 代码段处于整个文件的末尾</li>
<li>这个文件只用php代码，没有混编情况</li>
</ul>
<p>这样不会有额外的空行产生。</p>
<h3 id="输出内容方式"><a href="#输出内容方式" class="headerlink" title="输出内容方式"></a>输出内容方式</h3><ul>
<li><p>echo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; 用途：只能打印字符串（打印布尔值会true——1，false——没有）</span><br><span class="line">&#x2F;&#x2F; 注意：echo后面紧跟着一个空格;字符串一般用单引号括起，因为双引号功能强大导致效率低些。</span><br><span class="line">&#x2F;&#x2F; 可以同时输出多个内容，用“，”隔开。输出结果会拼接起来</span><br><span class="line">echo &#39;hello php&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>print</p>
<ul>
<li>用法跟echo一样，但只能打印一个数据。</li>
</ul>
</li>
<li><p>var_dump</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">&#x2F;&#x2F; 用途：可打印各种值，一般调试用。用于输出数据类型及数据、布尔值</span><br><span class="line">&#x2F;&#x2F;	var_dump 是一个函数，必须跟上 () 调用</span><br><span class="line">&#x2F;&#x2F; 可以将数据以及数据的类型打印为特定格式 </span><br><span class="line">var_dump(&#39;hello php&#39;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">还有一些输出函数（可以通过查手册自学，用到再说），例如： <span class="keyword">exit</span>() <span class="regexp">/ print_r() 等等</span></span><br></pre></td></tr></table></figure>

<h3 id="与HTML混编"><a href="#与HTML混编" class="headerlink" title="与HTML混编"></a>与HTML混编</h3><p>普通嵌入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;?php echo &#39;hello&#39;; ?&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p>语句混编</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php if ($age &gt;&#x3D; 18) &#123; ?&gt; 	&#x2F;&#x2F;js+&#123; 不容易看</span><br><span class="line">	&lt;p&gt;成年人&lt;&#x2F;p&gt; </span><br><span class="line">&lt;?php &#125; else &#123; ?&gt;  </span><br><span class="line">	&lt;p&gt;小朋友&lt;&#x2F;p&gt;</span><br><span class="line">&lt;?php &#125; ?&gt;</span><br></pre></td></tr></table></figure>

<p>更常见的用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php if ($age &gt; 18): ?&gt;	&#x2F;&#x2F;js+指令式代码  易看</span><br><span class="line">	&lt;p&gt;成年人&lt;&#x2F;p&gt; </span><br><span class="line">&lt;?php else: ?&gt;   </span><br><span class="line">	&lt;p&gt;小朋友&lt;&#x2F;p&gt; </span><br><span class="line">&lt;?php endif ?&gt;</span><br></pre></td></tr></table></figure>

<p>注意：换行——要在html页面换行，要</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> ’&lt;br&gt;‘； <span class="string">//</span>而不是<span class="keyword">echo</span> ’\n‘；</span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>#、//    单行注释</p>
<p>/**/    多行注释</p>
<p>注意：不要在与HTML混编时写注释。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">&#x2F;&#x2F; 这是一条单行注释 </span><br><span class="line"># 井号也可以做注释（不要用，有点生僻）</span><br><span class="line">&#x2F;*</span><br><span class="line">多行注释</span><br><span class="line">*&#x2F;</span><br><span class="line">$foo &#x3D; &#39;hello&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="编程语言常见的语法（学习新语言的方法）"><a href="#编程语言常见的语法（学习新语言的方法）" class="headerlink" title="编程语言常见的语法（学习新语言的方法）"></a>编程语言常见的语法（学习新语言的方法）</h3><p>所有编程语言都可以这样学习，按顺序跟上一门旧语言对比，那不同重点看哪儿</p>
<ul>
<li><p>变量 —— 用于临时存放数据的容器 </p>
</li>
<li><p>顺序结构 —— 先干什么再干什么 </p>
</li>
<li><p>分支结构 —— 如果怎样就怎样否则怎样 </p>
</li>
<li><p>循环结构 —— 不断的做某件相同的事 </p>
</li>
<li><p>函数 —— 提前设计好一件事怎么干，然后想什么时候干就什么时候干 </p>
</li>
<li><p>运算符 —— 数学运算和字符串拼接 </p>
</li>
<li><p>字面量 —— 在代码中用某些字符组成，能够表达一个具体的值 这些字符之间表示数据的方式叫做字面量</p>
</li>
</ul>
<p>如php：跟js不同的地方——这些重点来学，其它跟js一样报错了再说</p>
<ol>
<li><p>变量 </p>
</li>
<li><p>双引号字符串和单引号字符串的差异 </p>
</li>
<li><p>指令式的语法 </p>
</li>
<li><p>foreach </p>
</li>
<li><p>函数作用域问题</p>
</li>
<li><p>字符串拼接</p>
</li>
</ol>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li><p>申明变量：$变量名</p>
</li>
<li><p>变量名同样是区分大小写的。</p>
</li>
<li><p>变量无需声明类型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$foo; &#x2F;&#x2F; 申明一个变量，变量名为 &#96;foo&#96;，未对其进行赋值 $bar &#x3D; &#39;baz&#39;; &#x2F;&#x2F; 申明一个变量，将一个值为 &#96;baz&#96; 的字符串赋值给它 </span><br><span class="line">echo $foo; &#x2F;&#x2F; 输出一个变量名为 &#96;foo&#96; 的变量 fn($bar); &#x2F;&#x2F; 将一个变量名为 &#96;foo&#96; 的变量作为 &#96;fn&#96; 的实参传递</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>常见的 PHP 数据类型与 JavaScript 基本一致：    </p>
<ul>
<li><p>string（字符串）</p>
</li>
<li><p>integer（整型）—— 只能存整数 </p>
</li>
<li><p>ﬂoat（浮点型）—— 可以存带小数位的数字 </p>
</li>
<li><p>boolean（布尔型） </p>
</li>
<li><p>array（数组） </p>
</li>
<li><p>object（对象） </p>
</li>
<li><p>NULL（空） </p>
</li>
<li><p>Resource（资源类型） </p>
</li>
<li><p>Callback / Callable（回调或者叫可调用类型）</p>
</li>
</ul>
<h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>单引号字符串 (只对字符串有用，对函数参数没用相当于)</p>
<p>​    不支持特殊的转义符号，例如 \n </p>
<p>​    如果要表示一个单引号字符内容，可以通过 &#39; 表达 </p>
<p>​    如果要表示一个反斜线字符内容，可以通过 \ 表达</p>
<p>双引号字符串（一般不使用，因为功能强导致效率低）<br>    支持转义符号 (只对字符串有用，对函数参数没用不相当于)</p>
<p>​    支持变量解析</p>
<blockquote>
<p>字符串函数<br><a href="http://php.net/manual/zh/ref.strings.php" target="_blank" rel="noopener">http://php.net/manual/zh/ref.strings.php</a></p>
<p> <a href="http://www.w3school.com.cn/php/php_string.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/php/php_string.asp</a></p>
</blockquote>
<p>数组<br>PHP 中数组可以分为两类：<br>索引数组<br>    与 JavaScript 中的数组基本一致</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;?php</span> <span class="string">//</span> <span class="string">定义一个索引数组</span> <span class="string">$arr</span> <span class="string">=</span> <span class="string">array(1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="number">4</span><span class="string">,</span> <span class="number">5</span><span class="string">);</span> </span><br><span class="line"><span class="string">var_dump($arr);</span>   </span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">PHP</span> <span class="number">5.4</span> <span class="string">以后定义的方式可以用</span> <span class="string">`[]`</span> <span class="string">$arr2</span> <span class="string">=</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="number">4</span><span class="string">,</span> <span class="number">5</span><span class="string">];</span> </span><br><span class="line"><span class="string">var_dump($arr2);</span></span><br></pre></td></tr></table></figure>

<p>关联数组<br>    有点类似于 JavaScript 中的对象</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">&lt;?php // 注意：键只能是<span class="string">`integer`</span>或者<span class="string">`string`</span> $arr = array(<span class="string">'key1'</span> =&gt; <span class="string">'value1'</span>, <span class="string">'key2'</span> =&gt; <span class="string">'value2'</span>); </span><br><span class="line">var_dump($arr);   </span><br><span class="line"></span><br><span class="line">// PHP <span class="number">5.4</span> 以后定义的方式可以用 <span class="string">`[]`</span> $arr2 = [<span class="string">'key1'</span> =&gt; <span class="string">'value1'</span>, <span class="string">'key2'</span> =&gt; <span class="string">'value2'</span>]; var_dump($arr2);</span><br></pre></td></tr></table></figure>

<h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><blockquote>
<p>参考：<a href="http://php.net/manual/zh/language.types.type-juggling.php" target="_blank" rel="noopener">http://php.net/manual/zh/language.types.type-juggling.php</a></p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="variable">$str</span> = <span class="string">'132'</span>;</span><br><span class="line"><span class="regexp">//</span> 将一个内容为数字的字符串强制转换为一个整形的数字 <span class="variable">$num</span> = (int)<span class="variable">$str</span>; </span><br><span class="line"><span class="regexp">//</span> 将一个数字强制转换为布尔值 </span><br><span class="line"><span class="variable">$flag</span> = (bool)<span class="variable">$num</span>;</span><br></pre></td></tr></table></figure>

<p>作业：</p>
<p>sublime ctrl+K、L转小写， ctrl+K、U转大写</p>
<h2 id="关于API的定义"><a href="#关于API的定义" class="headerlink" title="关于API的定义"></a>关于API的定义</h2><p>API（APP Application interface    应用程序编程接口）</p>
<p>接口都是提供某种特定能力的事物，特点：<strong>有输入有输出</strong>。而我们在开发时（写代码时）用到的接口称为API（应用程序）</p>
<p>2种接口：</p>
<p>​    1.我们用到的函数（方法）</p>
<p>​    2.web接口：如api.douban.com/v2/movie/top250</p>
<p>不用知道有多少API，要用时去查：知道函数作用是什么，它输入输出是什么就可以了。学任何语言把精力放在语法上去。</p>
<p>具体实例看笔记中的code</p>
<p>函数不用在前面写字符类型</p>
<p>​    php获取宽字符，除3或mb_系列函数，如mb_strlen，但它们不在内置函数中，在一个模块里面，所以前提要开启php扩展：模块成员必须通过配置文件载入模块过后再使用。</p>
<p>在php/ext中可以看到php_mbstring.dll这个扩展</p>
<p>但要开启：1.将php目录的php.ini-development复制一个修改为php.ini</p>
<p>​                    2.修改php.ini中的extension_dir</p>
<p>​                    3.在php.ini解开这个扩展的注释</p>
<p>​                    4.默认apache加载的php.ini 是去Windows目录找的。可通过apache配置文件修改默认加载路径：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 告诉APACHE php.ini所i在的路径</span></span><br><span class="line">PHPIniDir d:<span class="string">/php</span></span><br></pre></td></tr></table></figure>

<p>​                    5.通知apache：重启apache</p>
<p>phpinfo函数可到浏览器查看接口是否配置、扩展是否进来（要有小标题）</p>
<h2 id="PHP中的REPL环境"><a href="#PHP中的REPL环境" class="headerlink" title="PHP中的REPL环境"></a>PHP中的REPL环境</h2><p>php7才行</p>
<p>R E P L:读、执行、打印、循环</p>
<p>怎么样快速试验api？可直接执行php代码不用通过apache。（php里有php.exe，要用命令行去运行它：cd到该目录去运行、php -a进入REPL即可（末尾加；才能运行））</p>
<p>只有通过安装、删除、操作服务才用到管理员权限</p>
<p>isset和empty函数都会吞掉警告</p>
<p>false：0或字符串为空或字符串为0（会先转成数字对比）</p>
<p>js中有个include，判断字符串是否存在</p>
<p>Y——四位的年份，y——两位的年份</p>
<p>fopen、glob不常用</p>
<p>语法、超全局变量在具体应用中才能体现到它的意义</p>
<p>什么时候用常量：一般程序的配置信息（不会在运行过程中修改）都会在常量中定义</p>
<p>what why how where when</p>
<p>变量、函数命名规则</p>
<p>js:驼峰命名</p>
<p>php：小写下划线命名</p>
<p>php：常量大写下划线命名</p>
<h2 id="载入文件（代码）："><a href="#载入文件（代码）：" class="headerlink" title="载入文件（代码）："></a>载入文件（代码）：</h2><p>​                    CSS——import命令：@import url()</p>
<p>​                    php——4种方式</p>
<p>require    载入之后就执行。若文件不存在，会提示错误,当前文件不再往下执行</p>
<p>require_once    载入之后只执行一次（载入配置文件时）。若文件不存在，会提示错误,当前文件不再往下执行</p>
<p>include    （载入html页面片段时）载入文件不存在不会报错（会有警告），当前文件会继续执行</p>
<p>include_once</p>
<blockquote>
<p>警告的关闭：</p>
<p>// 只有当 php.ini 中 display_errors = On 时候<br>// 才会在界面上显示 notice 错误<br>// 开发阶段一定设置为 On 生产阶段（上线）设置为 Off</p>
<p>如果想要写代码调用函数时忽略错误或者警告，可以在对应调用的API前加个@，但开发阶段需要有错误信息。</p>
</blockquote>
<p>​        到Network可以看请求了多少文件</p>
<p>页面的公共地方：抽出来放到一个公共文件，再引用该文件</p>
<p>界面、功能（重要）。</p>
<h2 id="表单处理："><a href="#表单处理：" class="headerlink" title="表单处理："></a>表单处理：</h2><p>一个网站除了使用数据，还有收集数据（就是用表单）</p>
<p>表单实例——基本的注册、登陆界面：</p>
<h2 id="客户端表单提交注意事项："><a href="#客户端表单提交注意事项：" class="headerlink" title="客户端表单提交注意事项："></a>客户端表单提交注意事项：</h2><p>（只关心了html）</p>
<ol>
<li>必须有form标签</li>
<li>form必须指定action、method。<ol>
<li>不设置action默认是当前页面（有兼容性问题，必须设置）。</li>
<li>不设置method默认是get</li>
<li>表单元素（表单域input）必须有name（如果希望被提交的情况）</li>
<li>表单中必须有一个提交按钮（没有js前提下）</li>
</ol>
</li>
</ol>
<p>提交功能：input的type为submit的按钮、input的type为image的按钮、button（它默认类型为submit。用得更多，可控程度更高）</p>
<p>js中提交功能：通过获取form元素的dom对象，用dom对象的方法submit来提交</p>
<h2 id="服务端接受提交参数："><a href="#服务端接受提交参数：" class="headerlink" title="服务端接受提交参数："></a>服务端接受提交参数：</h2><h3 id="注册表单状态保持"><a href="#注册表单状态保持" class="headerlink" title="注册表单状态保持"></a>注册表单状态保持</h3><p>（只关心了php）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump($_GET);</span><br><span class="line">&#x2F;&#x2F; $_GET 用于接收 URL 地址中问号参数中的提交数据（一般是 GET 参数）</span><br><span class="line">&#x2F;&#x2F;取一个具体值？如var_dump($_GET[&#39;usr&#39;]);</span><br><span class="line">var_dump($_POST);</span><br><span class="line">&#x2F;&#x2F; $_POST 用于接收 请求体 中提交的数据（一般是 POST 提交的数据）</span><br><span class="line"></span><br><span class="line">var_dump($_REQUEST);</span><br><span class="line">&#x2F;&#x2F; $_REQUEST &#x3D; $_GET + $_POST</span><br></pre></td></tr></table></figure>

<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  服务端注册处理的整体目标：（前提——判断提交方式是否对应）</span></span><br><span class="line"><span class="comment">//	接收用户提交的数据，保存到文件</span></span><br><span class="line"><span class="comment">//	表单处理经典三步骤</span></span><br><span class="line"><span class="comment">//	1.校验（完整性、正确性）、接收（校验完先检测再接收）</span></span><br><span class="line"><span class="comment">//	2.持久化（将数据持久地保存下来——硬盘/文件/数据库）</span></span><br><span class="line"><span class="comment">//	3.响应（服务端的反馈）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这几步完成后，就解决各种发现的问题来实现功能，具体看笔记中code</span></span><br><span class="line">1.用户体验，表单处理用户名状态保持（放后处理）——注册表单状态保持。应对：添加默认值value、三元表达式value="&lt;?php echo isset(<span class="variable">$_POST</span>['username']) ? <span class="variable">$_POST</span>['username'] : ''; ?&gt;</span><br><span class="line">2.接收数据：应是追加式不是覆盖式（去查手册）</span><br><span class="line">3.校验步骤的优化，代码<span class="keyword">else</span>逻辑嵌套过深（放后处理）。嵌套原因：有<span class="keyword">else</span>。应对：找个办法替代<span class="keyword">else</span>的功能（如果是<span class="keyword">if</span>停止执行后面的代码）。</span><br><span class="line">	<span class="keyword">return</span>？结束方法的执行。但我们这段代码整体不在一个函数内部，不能写，写了会跟<span class="keyword">exit</span>()一样。（所以不介意在非函数内部使用）具体用途？拿<span class="keyword">include</span>、require载入返回值用，但不介意用。		<span class="keyword">exit</span>()？整个程序不再执行，不可以。</span><br><span class="line">	既然没有函数能，那我们自定义个函数：在函数里面用<span class="keyword">return</span>（条件一定要取非，才能写<span class="keyword">return</span>）。测试完有错：申明（标识）message提示消息为全局变量<span class="keyword">global</span> <span class="variable">$message</span> 或 超全局变量：将message换成<span class="variable">$GLOBALS</span>['message'],这样html仍使用<span class="variable">$message</span>也可以。具体看demo的register1.php</span><br><span class="line">4.关于错误消息的显示位置：如echo ‘会不会玩’；</span><br></pre></td></tr></table></figure>



<p>过程中，服务端会做哪些后续处理，如注册：存下来、登陆：检测。</p>
<p>注意：</p>
<p>​            1.任何在客户端的东西都不能信：如js的表单校验（检查的设置选项-Disable JavaScritpt）。能相信的只有服务端能否接收到，js只能做些界面的提升而已。所以有些人没学js也可以写网站</p>
<p>​            2.先有个开头，然后会发现再有无数问题，等你去慢慢解决后功能就出来了，问题在于怎么开头。开头不会？让人帮忙</p>
<p>​            3.写代码都有个语义化：让代码更容易被人理解</p>
<p>​            4.关于错误消息的显示位置：在html页面中（浏览器默认会用get的方式请求）来请求post的数据会报错，且只有错误时需要添加一对tr。怎么判断：用php与thml混编、isset是否定义 来判断来请求</p>
<p>5.注册成功也给个提示消息（暂时保留）</p>
<p>作业：在列表页添加表单的数据。（不把js和php混合到一起上）</p>
<h2 id="表单提交地址问题"><a href="#表单提交地址问题" class="headerlink" title="表单提交地址问题"></a>表单提交地址问题</h2><p>一般为了便于维护，我们将表单提交给当前页面本身</p>
<p>​        那接受提交数据，写在哪？</p>
<p>​        1.一般将表单处理逻辑放在html之前，为了更灵活的控制html的输出。（原因：登陆失败要给提示，若放在后面，html页面都执行完了你再执行这个逻辑代码就晚了：万一我们要做个错误提示，逻辑在前面提示就会在下方html中显示。在后面就不显示了）</p>
<p>2.因为对于表单的处理逻辑不是每次都需要执行，所以一般我们会判断请求方式决定是否执行对数据的处理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($_SERVER[<span class="string">'REQUEST_METHOD'</span>] === <span class="string">'POST'</span>) &#123;   <span class="comment">// 表单提交请求（这的超全局成员：拿到服务端相关信息）</span></span></span><br><span class="line"><span class="php">  <span class="comment">// 请求的方式是post，当前是点击按钮产生的请求</span></span></span><br><span class="line"><span class="php">  var_dump($_POST);</span></span><br><span class="line"><span class="php">&#125; <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>建议使用 $_SERVER[‘PHP_SELF’] 动态获取当前页面访问路径，这样就不用因为文件重命名或者网站目录结 构调整而修改代码了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!‐‐ 通过 &#96;$_SERVER[&#39;PHP_SELF&#39;]&#96; 获取路径，可以轻松避免这个问题 ‐‐&gt; </span><br><span class="line">&lt;form action&#x3D;&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;]; ?&gt;&quot;&gt;   &lt;!‐‐ ... ‐‐&gt; </span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<p>呈现错误信息：不用echo（只在php代码不会到html代码中）</p>
<blockquote>
<p>鲁棒性：指的是我们的程序应对变化的能力</p>
</blockquote>
<h2 id="表单提交方式问题"><a href="#表单提交方式问题" class="headerlink" title="表单提交方式问题"></a>表单提交方式问题</h2><p>1.请求的方式不同</p>
<p>2.传参方式不同，get：url传参，post：请求体传参</p>
<p>具体看表单处理.md  </p>
<h2 id="常见表单元素处理"><a href="#常见表单元素处理" class="headerlink" title="常见表单元素处理"></a>常见表单元素处理</h2><p>至于表单元素中的文本框文本域一类的元素，都是直接将元素的 name 属性值作为键，用户填写的信息作为值，发送到服务端。</p>
<p>注意：每一个input一定要给它配个label(label是为了解释说明input的作用，如对屏幕朗读软件。通过for属性来关联起来)。按钮一般不要给name，除非按钮有多个。只给需要输入操作的给label。</p>
<p>如果表单中有个文件域，表单的method必须为post（因为请求体可以传二进制的数据），表单的编码类型enctype必须为multipart/form-data。</p>
<p>但是表单元素中还有一些比较特殊的表单元素需要单独考虑：</p>
<h3 id="单选按钮-radio"><a href="#单选按钮-radio" class="headerlink" title="单选按钮 radio"></a>单选按钮 radio</h3><p>注意：每一个input一定要给它配个label(label是为了解释说明input的作用，如对屏幕朗读软件。通过for属性来关联起来)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!‐‐ 最终只会提交选中的那一项的 value ‐‐&gt; &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;male&quot;&gt; &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;female&quot;&gt;</span><br><span class="line">&lt;!‐‐ 以name为界，以value为值让服务端可以辨别。不然值默认都为on ‐‐&gt;</span><br></pre></td></tr></table></figure>

<h3 id="复选按钮-checkbox"><a href="#复选按钮-checkbox" class="headerlink" title="复选按钮 checkbox"></a>复选按钮 checkbox</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!‐‐必须要有name才会被提交 ‐‐&gt;</span><br><span class="line">&lt;!‐‐没有设置value的 checkbox选中提交的 value 是 on ‐‐&gt; </span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;agree&quot;&gt; </span><br><span class="line">&lt;!‐‐ 设置了 value 的 checkbox 选中提交的是 value 值 ‐‐&gt; &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;agree&quot; value&#x3D;&quot;true&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>如果需要同时提交多个选中项，可以在 name 属性后面 跟上 [] ：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"checkbox"</span> <span class="attribute">name</span>=<span class="string">"funs[]"</span> <span class="attribute">id</span>=<span class="string">""</span> <span class="attribute">value</span>=<span class="string">"football"</span>&gt; &lt;input <span class="attribute">type</span>=<span class="string">"checkbox"</span> <span class="attribute">name</span>=<span class="string">"funs[]"</span> <span class="attribute">id</span>=<span class="string">""</span> <span class="attribute">value</span>=<span class="string">"basketball"</span>&gt; &lt;input <span class="attribute">type</span>=<span class="string">"checkbox"</span> <span class="attribute">name</span>=<span class="string">"funs[]"</span> <span class="attribute">id</span>=<span class="string">""</span> <span class="attribute">value</span>=<span class="string">"world peace"</span>&gt;</span><br></pre></td></tr></table></figure>

<p>最终提交到服务端，通过 $_POST 接收到的是一个索引数组。</p>
<h3 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> <span class="type">name</span>="subject"&gt;   </span><br><span class="line">	&lt;!‐‐ 设置 <span class="keyword">value</span> 提交 <span class="keyword">value</span> ‐‐&gt;   </span><br><span class="line">	&lt;<span class="keyword">option</span> <span class="keyword">value</span>="1"&gt;语文&lt;/<span class="keyword">option</span>&gt;   </span><br><span class="line">	&lt;!‐‐ 没有设置 <span class="keyword">value</span> 提交文本 innerText ‐‐&gt;   </span><br><span class="line">	&lt;<span class="keyword">option</span>&gt;数学&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="表单中的文件上传"><a href="#表单中的文件上传" class="headerlink" title="表单中的文件上传"></a>表单中的文件上传</h2><p>先考虑功能层面上的东西，再去看案例（案列牵扯的比较多）</p>
<h3 id="文件域的基本使用"><a href="#文件域的基本使用" class="headerlink" title="文件域的基本使用"></a>文件域的基本使用</h3><p>如果表单中有文件域（文件上传），表单的method必须为post（因为请求体可以传二进制的数据），表单的编码类型enctype必须为multipart/form-data。（多部分的、多卷的）</p>
<p>查看请求体：谷歌浏览器中，Network右击请求的问题最下面view-type可看</p>
<h4 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h4><p>想让文件域被提交，一定要加name</p>
<p>注意：input有个属性accept限制文件域可以选择哪种类型的文件，值是MIME Type或文件扩展名（能设多个，用，隔开），但只是提升了客户端友好性，php仍要设置校验</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="file" <span class="type">name</span>="img"&gt;</span><br></pre></td></tr></table></figure>

<h4 id="接收文件"><a href="#接收文件" class="headerlink" title="接收文件"></a>接收文件</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'REQUEST_METHOD'</span>] === <span class="string">'POST'</span>) &#123;</span><br><span class="line">  <span class="comment">// 接收文件 使用一个 叫做 $_FILES 超全局成员</span></span><br><span class="line">  var_dump($_FILES);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>文件上传服务端处理逻辑（接收(处理)步骤），具体看code</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;	也会有个判断过程，又会出现else嵌套过深问题，所以也自定义个函数</span><br><span class="line">&#x2F;&#x2F; avatar 头像</span><br><span class="line">function upload () &#123;</span><br><span class="line">  if (!isset($_FILES[&#39;avatar&#39;])) &#123;</span><br><span class="line">    $GLOBALS[&#39;message&#39;] &#x3D; &#39;别玩我了&#39;;</span><br><span class="line">    &#x2F;&#x2F; （若没定义）即客户端提交的表单内容中根本没有文件域</span><br><span class="line">    &#x2F;&#x2F; 条件一定要取非，才能写return</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $avatar &#x3D; $_FILES[&#39;avatar&#39;];</span><br><span class="line">  &#x2F;&#x2F;$avatar指的是一个关联数组</span><br><span class="line">  &#x2F;&#x2F; $avatar &#x3D;&gt; array(5) &#123;</span><br><span class="line">  &#x2F;&#x2F;   [&quot;name&quot;]&#x3D;&gt;</span><br><span class="line">  &#x2F;&#x2F;   string(11) &quot;icon-02.png&quot;</span><br><span class="line">  &#x2F;&#x2F;   [&quot;type&quot;]&#x3D;&gt;</span><br><span class="line">  &#x2F;&#x2F;   string(9) &quot;image&#x2F;png&quot;</span><br><span class="line">  &#x2F;&#x2F;   [&quot;tmp_name&quot;]&#x3D;&gt;</span><br><span class="line">  &#x2F;&#x2F;   string(27) &quot;C:\Windows\Temp\php1138.tmp&quot;</span><br><span class="line">  &#x2F;&#x2F;   [&quot;error&quot;]&#x3D;&gt;</span><br><span class="line">  &#x2F;&#x2F;   int(0)</span><br><span class="line">  &#x2F;&#x2F;   [&quot;size&quot;]&#x3D;&gt;</span><br><span class="line">  &#x2F;&#x2F;   int(4398)</span><br><span class="line">  &#x2F;&#x2F; &#125;</span><br><span class="line">  &#x2F;&#x2F;echo $avatar[&#39;error&#39;]; 检测文件错误码</span><br><span class="line">  if ($avatar[&#39;error&#39;] !&#x3D;&#x3D; UPLOAD_ERR_OK) &#123;</span><br><span class="line">    &#x2F;&#x2F; （上传失败）服务端没有接收到上传的文件</span><br><span class="line">    &#x2F;&#x2F;本来是写if ($avatar[&#39;error&#39;] !&#x3D;&#x3D; 0) ，但php为了语义化，用个常量去代表这个0，去php手册查看</span><br><span class="line">    $GLOBALS[&#39;message&#39;] &#x3D; &#39;上传失败&#39;;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 接收到了文件</span><br><span class="line">  &#x2F;&#x2F; 将文件从临时目录移动到网站范围之内（网站根目录以内）</span><br><span class="line">  $source &#x3D; $avatar[&#39;tmp_name&#39;]; &#x2F;&#x2F; 源文件在哪</span><br><span class="line">  &#x2F;&#x2F; &#x3D;&gt; &#39;C:\Windows\Temp\php1138.tmp&#39;</span><br><span class="line">  $target &#x3D; &#39;.&#x2F;uploads&#x2F;&#39; . $avatar[&#39;name&#39;]; &#x2F;&#x2F; 目标放在哪，目标原名</span><br><span class="line">  &#x2F;&#x2F; &#x3D;&gt; &#39;.&#x2F;uploads&#x2F;icon-02.png&#39;</span><br><span class="line">  &#x2F;&#x2F; 移动的目标路径中文件夹一定是一个已经存在的目录，不然报错。如果不存在，make一下这个dir</span><br><span class="line">  $moved &#x3D; move_uploaded_file($source, $target);</span><br><span class="line"></span><br><span class="line">  if (!$moved) &#123;</span><br><span class="line">    $GLOBALS[&#39;message&#39;] &#x3D; &#39;上传失败&#39;;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 移动成功（上传整个过程OK）</span><br><span class="line">  &#x2F;&#x2F;echo ’123‘； 检测</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($_SERVER[&#39;REQUEST_METHOD&#39;] &#x3D;&#x3D;&#x3D; &#39;POST&#39;) &#123;</span><br><span class="line">  &#x2F;&#x2F; 接收文件 使用一个 叫做 $_FILES 超全局成员</span><br><span class="line">  &#x2F;&#x2F; var_dump($_FILES);</span><br><span class="line">  upload();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>1.单个文件上传清空：</p>
<p>​    若有用户上传同名文件，一般将上传文件重命名：</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般情况会将上传的文件重命名</span></span><br><span class="line">$target = <span class="string">'./uploads/'</span> . uniqid() . <span class="string">'-'</span> . $source[<span class="string">'name'</span>];</span><br><span class="line"><span class="keyword">if</span> (!move_uploaded_file($source[<span class="string">'tmp_name'</span>], $target)) &#123;</span><br><span class="line">  $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'上传音乐失败'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不想要原名在内，自己百度（与php随机数有关）</p>
<p>2.多个文件上传</p>
<p>校验文件数量、文件种类</p>
<p>种类后处理，是因为写代码的原则：先处理简单的业务，再处理复杂的业务。</p>
<p>注意：input有个属性accept限制文件域可以选择哪种类型的文件，值是MIME Type，但只是提升了客户端友好性，php仍要设置校验</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断用户是否选择了文件</span></span><br><span class="line"><span class="keyword">if</span> ($source[<span class="string">'error'</span>] !== UPLOAD_ERR_OK) &#123;</span><br><span class="line">  $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'请选择音乐文件'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验文件的大小</span></span><br><span class="line"><span class="comment">//代码放在这个位置。</span></span><br><span class="line"><span class="comment">// 校验文件的大小</span></span><br><span class="line"><span class="comment">//字节跟M单位换算，这样写方便别人去看</span></span><br><span class="line"><span class="keyword">if</span> ($source[<span class="string">'size'</span>] &gt; <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">  $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'音乐文件过大'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($source[<span class="string">'size'</span>] &lt; <span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">  $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'音乐文件过小'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验类型</span></span><br><span class="line">$allowed_types = <span class="keyword">array</span>(<span class="string">'audio/mp3'</span>, <span class="string">'audio/wma'</span>);</span><br><span class="line"><span class="keyword">if</span> (!in_array($source[<span class="string">'type'</span>], $allowed_types)) &#123;</span><br><span class="line">  $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'这是不支持的音乐格式'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="文件上传大小限制问题"><a href="#文件上传大小限制问题" class="headerlink" title="文件上传大小限制问题"></a>文件上传大小限制问题</h3><p>错误码为1。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">详细的错误码说明：http:<span class="comment">//php.net/manual/zh/features.file‐upload.errors.php </span></span><br><span class="line">http:<span class="comment">//php.net/manual/zh/features.ﬁle-upload.php</span></span><br><span class="line">注意：</span><br><span class="line">	修改 php.ini 中的 upload_max_filesize 配置，让服务端支持更大的单个上传文件。一般不设太大，防止别人恶意上传超大文件导致服务器内存不足崩溃，参考：设<span class="number">20</span>M</span><br><span class="line">	修改 php.ini 中的 post_max_size 配置，让服务端可以接受更大的请求体体积，参考：设<span class="number">80</span>M</span><br></pre></td></tr></table></figure>

<p>作业：音乐列表案例看表单处理pdf、登陆</p>
<h1 id="音乐列表案例"><a href="#音乐列表案例" class="headerlink" title="音乐列表案例"></a>音乐列表案例</h1><p>学习目的：表单处理流程、动态网站开发核心：把数据拿出来渲染到页面上。</p>
<p>第一件事：考虑数据怎么存怎么取？</p>
<h2 id="数据表述手段、存储数据格式的手段-JSON"><a href="#数据表述手段、存储数据格式的手段-JSON" class="headerlink" title="数据表述手段、存储数据格式的手段(JSON)"></a>数据表述手段、存储数据格式的手段(JSON)</h2><p>除了这些呢，就是我们专门用来存取数据的地方：数据库，比我们用这种普通文件存储的方式要更加简单，功能更加简单。</p>
<p>如json：想找某歌手的所有音乐，找数据：要遍历一下，然后挨个判断歌手名是否=该歌手</p>
<p>而数据库都有这种功能，让我们更容易做到这些事情。</p>
<p>其实数据库是一种数据存储的手段，只不过为了便于我们对数据的操作做了很多功能。</p>
<p>1.<strong>字面量：代码中表述数据的手段</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">var</span> <span class="string">obj</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">	<span class="attr">name:</span> <span class="number">123</span><span class="string">,</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">456</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">//数组字面量</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line">	<span class="string">&#123;</span> <span class="attr">id:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'朱芳'</span> <span class="string">&#125;,</span></span><br><span class="line">	<span class="string">&#123;</span> <span class="attr">id:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'朱芳'</span> <span class="string">&#125;,</span>	</span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure>



<p>2.<strong>JSON：是一种类似于js的字面量的手段，也是表述数据的手段，现如今用得最多的数据格式。</strong>原因：解析容易，直接能把json字符串转换成对象或者说数组</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">	&#123;   </span><br><span class="line">		<span class="attr">"name"</span>: <span class="string">"zce"</span>,   </span><br><span class="line">		<span class="attr">"age"</span>: <span class="number">18</span>,   </span><br><span class="line">		<span class="attr">"gender"</span>: <span class="literal">true</span>,   			           <span class="attr">"girl_friend"</span>: <span class="literal">null</span> </span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;   </span><br><span class="line">		<span class="attr">"name"</span>: <span class="string">"zce"</span>,   </span><br><span class="line">		<span class="attr">"age"</span>: <span class="number">18</span>,   </span><br><span class="line">		<span class="attr">"gender"</span>: <span class="literal">true</span>,   			           <span class="attr">"girl_friend"</span>: <span class="literal">null</span> </span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>3.json中    <strong>属性名称</strong>必须用<strong>双引号</strong>包裹</p>
<p>​                <strong>字符串</strong>必须用<strong>双引号</strong>包裹 </p>
<p>​                不允许使用注释</p>
<p>4.如何解析服务器上传的json字符串中的数据(为了描述方便，这里把该数据给str)？</p>
<p>js中ES5提供了一个json对象：JSON.parse(str)得到一个数组，把json字符串转化为数据；用arr接受这些数据；把数据转成一个json字符串：JSON.stringIfy(arr)转换成 字符串 风格的，来得到转换成json格式的字符串。</p>
<p>1.数据怎么存怎么取？用json来存取（storage.json，里面有1个数组，数组里有4个对象，每个对象分别有5个属性）<br>2.把已有数据快速用页面呈现出来。静态页面（list.html、add.html）<br>3.动态php文件（list.php）。把数据呈现到已有页面上。</p>
<ul>
<li><p>已有页面：把list.html粘过来，注意依赖文件，如.css，再测试下页面能否正常显示。</p>
</li>
<li><p>数据：把表格里的数据换成我们从文件中读出来的数据：在页头加入php脚本去读取文件（不放下面原因：先获取数据再渲染数据，若先渲染就没意义了）。</p>
<p>​    具体步骤：1.获取文件中记录的数据，并展示到表格中（展示层面：是浏览器通过执行html去完成的。所以这儿php代码目的——为了动态生成表格的HTML标签）</p>
<p>​            1.1把已有数据做程序：当用户请求过来，我们读一下json文件，把json文件的数据解析出去，呈现到界面上。（问题：php中怎么样解析json？）。</p>
<p>php中怎么样解析json:</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">//php中怎么样解析json</span></span></span><br><span class="line"><span class="php"><span class="comment">//1.读文件</span></span></span><br><span class="line"><span class="php">$contents = file_get_contents(<span class="string">'storage.json'</span>);</span></span><br><span class="line"><span class="php"><span class="comment">// $contents =&gt; JSON 格式的字符串</span></span></span><br><span class="line"><span class="php"><span class="comment">// 2.把 JSON 格式的字符串转换为对象(数组)        的过程叫做反序列化</span></span></span><br><span class="line"><span class="php">$data = json_decode($contents, <span class="keyword">true</span>);<span class="comment">//打印检测发现返回的是对象。原因：json_decode默认反序列化是将json中的对象转换为PHP中stdClass类型的对象。应对：加true这个参数让使用关联数组的方式返回数据</span></span></span><br><span class="line"><span class="php"><span class="comment">//var_dump($arr); //先打印测试下，是否正确</span></span></span><br><span class="line"><span class="php"><span class="comment">// $data =&gt; []。既然是个数组，那我们就对它进行遍历，在哪遍历？每遍历数组当中一个元素，就生成表格里的一个tr标签，所以在tr标签外面遍历。</span></span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"></span><br><span class="line">html中：</span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">		//2.2应该遍历的是什么？$data,索引数组，不需关心键，关心值就行了as $item</span><br><span class="line">        <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $item): <span class="meta">?&gt;</span></span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          //2.3 每一个item就是我们正在遍历的那一项。获取项里的值。会报错：报错时不要先切回代码去，先去过遍错误信息。错误：$item不是关联数组。原因：json_decode把json中的对象转换成stdClass的对象。应对：给该API添加第二个参数：true 或用对象语法$item-&gt;title（不建议，用传统语法关联数组语法就好）</span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $item[<span class="string">'title'</span>] <span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $item[<span class="string">'artist'</span>] <span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;?php echo $item['images'][0] ?&gt;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"&lt;?php echo $item['source'] ?&gt;"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">endforeach</span> <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.2添加（add.php）。</p>
<p>​    客户端：首先有个添加的页面：把静态页面代码粘贴过来。</p>
<p>​    处理表单属性（再测试下，打开页面检查的Network，点页面的提交，查看请求：移到最下面看请求体）</p>
<p>​    服务端:在页头写php添加代码。想一下：新增的流程：</p>
<p>​    重心：提交、接收处理,具体看code</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 只是在表单提交时执行</span><br><span class="line"><span class="php"> */</span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">add_music</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="comment">// 目标</span></span></span><br><span class="line"><span class="php">  <span class="comment">//  将用户提交过来的数据保存到 storage.json 中</span></span></span><br><span class="line"><span class="php">  <span class="comment">// 步骤</span></span></span><br><span class="line"><span class="php">  <span class="comment">//  1. 接收并 校验（最麻烦的就是校验。有多少name判断多少次，但文件上传单独考虑）</span></span></span><br><span class="line"><span class="php">  <span class="comment">//  2. 持久化（一句代码就可完成）</span></span></span><br><span class="line"><span class="php">  <span class="comment">//  3. 响应</span></span></span><br><span class="line"><span class="php">  </span></span><br><span class="line"><span class="php">  <span class="comment">//	校验文本框</span></span></span><br><span class="line"><span class="php">  ......</span></span><br><span class="line"><span class="php">  <span class="comment">//	校验上传文件（注意：若有用户上传同名文件，一般将上传文件重命名）</span></span></span><br><span class="line"><span class="php">  ......</span></span><br><span class="line"><span class="php">  <span class="comment">//	</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($_SERVER[<span class="string">'REQUEST_METHOD'</span>] === <span class="string">'POST'</span>) &#123;</span></span><br><span class="line"><span class="php">  add_music();</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>1.单个文件上传清空：</p>
<p>​    若有用户上传同名文件，一般将上传文件重命名：</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般情况会将上传的文件重命名</span></span><br><span class="line">$target = <span class="string">'./uploads/'</span> . uniqid() . <span class="string">'-'</span> . $source[<span class="string">'name'</span>];</span><br><span class="line"><span class="keyword">if</span> (!move_uploaded_file($source[<span class="string">'tmp_name'</span>], $target)) &#123;</span><br><span class="line">  $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'上传音乐失败'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不想要原名在内，自己百度（与php随机数有关）</p>
<p>2.多个文件上传</p>
<p>校验文件数量、文件种类</p>
<p>种类后处理，是因为写代码的原则：先处理简单的业务，再处理复杂的业务。</p>
<p>注意：input有个属性accept限制文件域可以选择哪种类型的文件，值是MIME Type或文件扩展名（能设多个，用，隔开），但只是提升了客户端友好性，php仍要设置校验</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断用户是否选择了文件</span></span><br><span class="line"><span class="keyword">if</span> ($source[<span class="string">'error'</span>] !== UPLOAD_ERR_OK) &#123;</span><br><span class="line">  $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'请选择音乐文件'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验文件的大小</span></span><br><span class="line"><span class="comment">//代码放在这个位置。</span></span><br><span class="line"><span class="comment">// 校验文件的大小</span></span><br><span class="line"><span class="comment">//字节跟M单位换算，这样写方便别人去看</span></span><br><span class="line"><span class="keyword">if</span> ($source[<span class="string">'size'</span>] &gt; <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">  $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'音乐文件过大'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($source[<span class="string">'size'</span>] &lt; <span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">  $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'音乐文件过小'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验类型</span></span><br><span class="line">$allowed_types = <span class="keyword">array</span>(<span class="string">'audio/mp3'</span>, <span class="string">'audio/wma'</span>);</span><br><span class="line"><span class="keyword">if</span> (!in_array($source[<span class="string">'type'</span>], $allowed_types)) &#123;</span><br><span class="line">  $GLOBALS[<span class="string">'error_message'</span>] = <span class="string">'这是不支持的音乐格式'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有多选文件问题、删除问题。</p>
<p>3.多选文件问题：具体看songs的add.php</p>
<p>如何接收单个文件域的多文件上传</p>
<p>客户端上，提升界面友好性：input还有个属性：mutiple。可以让一个文件域多选</p>
<p>服务端：在input的name值里多加个[]，再添加校验PHP代码。具体看songs</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> <span class="number">2</span>. 接收图片文件</span><br><span class="line">  <span class="regexp">//</span> 如何接收单个文件域的多文件上传？？？</span><br><span class="line">  <span class="keyword">if</span> (empty(<span class="variable">$_FILES</span>[<span class="string">'images'</span>])) &#123;</span><br><span class="line">    <span class="variable">$GLOBALS</span>[<span class="string">'error_message'</span>] = <span class="string">'请正常使用表单'</span>;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="variable">$images</span> = <span class="variable">$_FILES</span>[<span class="string">'images'</span>]; </span><br><span class="line">  <span class="regexp">//</span> 准备一个容器装所有的海报路径</span><br><span class="line">  <span class="variable">$data</span>[<span class="string">'images'</span>] = array();</span><br><span class="line">  </span><br><span class="line">  <span class="regexp">//</span>之前每个成员类型都是字符串，现在都是索引数组。就看用<span class="keyword">for</span>、foreach哪个合适，这里用<span class="keyword">for</span>好。原因：取每个成员的某个值都要用到下标</span><br><span class="line">  <span class="regexp">//</span> 遍历这个文件域中的每一个文件（判断是否成功、判断类型、判断大小、移动到网站目录中）</span><br><span class="line">  <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$images</span>[<span class="string">'name'</span>]); <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="regexp">//</span> <span class="variable">$images</span>[<span class="string">'error'</span>] =&gt; [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$images</span>[<span class="string">'error'</span>][<span class="variable">$i</span>] !== UPLOAD_ERR_OK) &#123;</span><br><span class="line">      <span class="variable">$GLOBALS</span>[<span class="string">'error_message'</span>] = <span class="string">'上传海报文件失败1'</span>;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="regexp">//</span> 类型的校验</span><br><span class="line">    <span class="regexp">//</span> <span class="variable">$images</span>[<span class="string">'type'</span>] =&gt; [<span class="string">'image/png'</span>, <span class="string">'image/jpg'</span>, <span class="string">'image/gif'</span>]</span><br><span class="line">    <span class="keyword">if</span> (strpos(<span class="variable">$images</span>[<span class="string">'type'</span>][<span class="variable">$i</span>], <span class="string">'image/'</span>) !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable">$GLOBALS</span>[<span class="string">'error_message'</span>] = <span class="string">'上传海报文件格式错误'</span>;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="regexp">//</span> TODO: 文件大小的判断</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$images</span>[<span class="string">'size'</span>][<span class="variable">$i</span>] &gt; <span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">      <span class="variable">$GLOBALS</span>[<span class="string">'error_message'</span>] = <span class="string">'上传海报文件过大'</span>;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="regexp">//</span> 移动文件到网站范围之内</span><br><span class="line">    <span class="variable">$dest</span> = <span class="string">'../uploads/'</span> . uniqid() . <span class="variable">$images</span>[<span class="string">'name'</span>][<span class="variable">$i</span>];</span><br><span class="line">    <span class="keyword">if</span> (!move_uploaded_file(<span class="variable">$images</span>[<span class="string">'tmp_name'</span>][<span class="variable">$i</span>], <span class="variable">$dest</span>)) &#123;</span><br><span class="line">      <span class="variable">$GLOBALS</span>[<span class="string">'error_message'</span>] = <span class="string">'上传海报文件失败2'</span>;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span>[<span class="string">'images'</span>][] = substr(<span class="variable">$dest</span>, <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="保存数据逻辑"><a href="#保存数据逻辑" class="headerlink" title="保存数据逻辑"></a>保存数据逻辑</h2><p>追加不了。就读出来添加再覆盖。</p>
<p>json不在意换行。汉字传进去unicode字符，不用关心</p>
<p>关于上传文件路径有坑：相对还是绝对。</p>
<p>添加完跳转回列表页：  header(‘Location: list.php’);</p>
<p>如遇到问题：</p>
<p>php代码段tab不出来？</p>
<p>开发工具的代码段工作不工作取决于当前的语言模式是什么（如黏贴过html就会变成html。）应对：CTRL+SHIFT+P 可通过set Syntax:PHP(或输入set ph切换语言模式)</p>
<p>session(HTTP会话、Cookie)</p>
]]></content>
      <categories>
        <category>后台语言</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>02-HTTP</title>
    <url>/2020/03/29/02-HTTP/</url>
    <content><![CDATA[<h2 id="回顾：请求响应过程（web工作流程）"><a href="#回顾：请求响应过程（web工作流程）" class="headerlink" title="回顾：请求响应过程（web工作流程）"></a>回顾：请求响应过程（web工作流程）</h2><p>了解整个WEB是怎样运转的？从浏览器输入一个地址发起对网站的请求整个过程发生了什么？</p>
<a id="more"></a>

<blockquote>
<p>注意：服务端不是返回文件，而是返回执行后的结果</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E7%9A%84%E8%BF%87%E7%A8%8B.png" alt=""></p>
<ol>
<li><p>用户打开<strong>浏览器</strong></p>
</li>
<li><p>地址栏输入我们需要访问的网站<strong>网址</strong>（URL） </p>
</li>
<li><p>浏览器通过 DNS 服务器获取即将访问的网站 IP <strong>地址</strong> </p>
</li>
<li><p>浏览器发起一个对这个 IP 的<strong>请求</strong></p>
</li>
<li><p>服务端接收到这个请求，进行相应的<strong>处理</strong> </p>
</li>
<li><p>服务端将处理完的<strong>结果</strong>返回给客户端浏览器（间接）</p>
</li>
<li><p>浏览器将服务端返回的结果<strong>呈现到界面上</strong></p>
<blockquote>
<p>注意：这是静态文件的过程，看下面</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/IP%E5%9C%B0%E5%9D%801.png" alt=""></p>
</li>
</ol>
<p>比一般请求响应过程多的阶段——判断机制：是否为静（动）态文件。（注意：找其它程序按一定规律执行代码，如PHP）</p>
<blockquote>
<p>实现服务端动态网页的技术有很多种：JSP、ASP.NET、PHP、Node 等等。</p>
</blockquote>
<h2 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h2><p>HTTP协议：HyperText Transfer Protocol，用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的超文本（网络）传输协议</p>
<p>基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>
<h2 id="HTTP-工作原理"><a href="#HTTP-工作原理" class="headerlink" title="HTTP 工作原理"></a>HTTP 工作原理</h2><p>工作于客户端-服务端架构上。HTTP客户端（浏览器）通过URL（统一资源标识符）向HTTP服务端（WEB服务器）发送所有请求。</p>
<p>Web服务器有：Apache服务器，IIS服务器（Internet Information Services）等。</p>
<p>Web服务器根据接收到的请求后，向客户端发送响应信息。</p>
<p>HTTP默认端口号为80，但是你也可以改为8080或者其他端口。</p>
<p><strong>HTTP三点注意事项：</strong></p>
<ul>
<li>无连接：限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。来节省传输时间。</li>
<li>媒体独立：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。</li>
<li>无状态协议：无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li>
</ul>
<p>CGI(Common Gateway Interface) 是 HTTP 服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序须运行在网络服务器上。使网页具有交互功能。</p>
<h2 id="客户端请求消息"><a href="#客户端请求消息" class="headerlink" title="客户端请求消息"></a>客户端请求消息</h2><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。</p>
<h2 id="服务器响应消息"><a href="#服务器响应消息" class="headerlink" title="服务器响应消息"></a>服务器响应消息</h2><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E7%9A%84%E4%B8%80%E8%88%AC%E6%A0%BC%E5%BC%8F.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF.jpg" alt=""></p>
<h3 id="用GET来传递数据的实例"><a href="#用GET来传递数据的实例" class="headerlink" title="用GET来传递数据的实例"></a>用GET来传递数据的实例</h3><p><a href="https://www.runoob.com/http/http-messages.html" target="_blank" rel="noopener">https://www.runoob.com/http/http-messages.html</a></p>
<h1 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h1><p>3+6种请求方法： GET, POST 和 HEAD、OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。</p>
<p><a href="https://www.runoob.com/http/http-methods.html" target="_blank" rel="noopener">https://www.runoob.com/http/http-methods.html</a></p>
<h1 id="HTTP-响应头信息"><a href="#HTTP-响应头信息" class="headerlink" title="HTTP 响应头信息"></a>HTTP 响应头信息</h1><p><a href="https://www.runoob.com/http/http-header-fields.html" target="_blank" rel="noopener">https://www.runoob.com/http/http-header-fields.html</a></p>
<h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。</p>
<p>HTTP状态码的英文为HTTP Status Code。</p>
<p>下面是常见的HTTP状态码：</p>
<ul>
<li>200 - 请求成功</li>
<li>301 - 资源（网页等）被永久转移到其它URL</li>
<li>404 - 请求的资源（网页等）不存在</li>
<li>500 - 内部服务器错误</li>
</ul>
<h2 id="HTTP状态码分类"><a href="#HTTP状态码分类" class="headerlink" title="HTTP状态码分类"></a>HTTP状态码分类</h2><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：</p>
<p><a href="https://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">https://www.runoob.com/http/http-status-codes.html</a></p>
<h1 id="HTTP-content-type"><a href="#HTTP-content-type" class="headerlink" title="HTTP content-type"></a>HTTP content-type</h1><p>定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些 PHP 网页点击的结果却是下载一个文件或一张图片的原因。</p>
<p>Content-Type 标头告诉客户端实际返回的内容的内容类型。</p>
<p>语法格式：</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">Content-<span class="keyword">Type</span>: text/html; charset=utf-<span class="number">8</span></span><br><span class="line">Content-<span class="keyword">Type</span>: multipart/<span class="keyword">form</span>-<span class="keyword">data</span>; boundary=something</span><br></pre></td></tr></table></figure>

<p>实例：<a href="https://www.runoob.com/http/http-content-type.html" target="_blank" rel="noopener">https://www.runoob.com/http/http-content-type.html</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>01-动态网站开发基础</title>
    <url>/2020/03/29/01-%E5%8A%A8%E6%80%81%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="什么是网站"><a href="#什么是网站" class="headerlink" title="什么是网站"></a>什么是网站</h2><ul>
<li>可以在浏览器上通过一个地址直接访问（搭建WEB服务器）</li>
<li>用于提供一种（或多种）特定服务的，一系列具备相关性的网页组合的整体</li>
<li>如：博客、门户、电商、在线教育等</li>
<li>核心：渲染页面、表单处理、状态保持session</li>
</ul>
<a id="more"></a>

<h2 id="网站开发的前提知识"><a href="#网站开发的前提知识" class="headerlink" title="网站开发的前提知识"></a>网站开发的前提知识</h2><p>但只能做网页、给页面加上些动态的交互。</p>
<p>路线：网页开发-&gt;网站开发（呈现些文章、商品等内容 ）-&gt;应用开发（如百度脑图）</p>
<p>1.硬性知识：</p>
<ul>
<li><p>HTML——网页内容结构（GUI图形化用户界面）</p>
<p>CSS——网页外观样式（GUI）</p>
</li>
<li><p>JavaScript——编程语言（可用于调用浏览器提供的API）</p>
</li>
<li><p>Web APIs——网页交互（界面功能）</p>
</li>
<li><p>JQuery——便捷手段，非必要</p>
</li>
</ul>
<p>2.软性知识：编程思想——我目前有什么，我要做什么</p>
<p>3.想做完整的网站，还需要学的知识：</p>
<ul>
<li>搭建WEB服务器（提供网站服务的机器）<ul>
<li>服务器（提供服务）：一台安装特定软件的公共计算机；</li>
<li>客户端（使用服务）：在一次服务过程中使用这个服务的设备（网络端点）</li>
</ul>
</li>
<li>HTTP（浏览器与服务端的通讯 协议）</li>
<li>服务端开发（动态网页技术）<ul>
<li>由于网页的共性与局部性，要通过只写一个页面往里添加不同的数据，达到感觉是不同页面的效果</li>
</ul>
</li>
<li>数据库操作（服务端 存储数据 方式）</li>
<li>AJAX（浏览器与服务端的数据交互方式）：使交互更加友好</li>
<li>现阶段企业需要：敏捷开发（接口化开发）</li>
</ul>
<h2 id="网站开发步骤"><a href="#网站开发步骤" class="headerlink" title="网站开发步骤"></a>网站开发步骤</h2><p>理想状态下。不要明确给自己划范围</p>
<ol>
<li>需求分析：（运营人员/使用者提出）分析我们这个应用程序到底要去做哪些功能，去应对(满足)哪些业务。（输入：老板的一句话，输出：<strong>需求说明文档</strong>，用xmind/word/excel。发布页（后台）功能、展示页（前台）功能都有哪些）</li>
<li>原型设计：根据需求分析的结果规划应用程序的原型，可以理解为“打草稿”（花不了太多的时间，收效是很大的）。（产品经理：以什么样的界面才能满足需求，做出网页的大致轮廓。画界面<strong>草图</strong>（原型图）、配些原型说明（如UE流程图，移动端涉及多）。专业软件如：Axure（pc端）/墨刀（移动端）。产物：原型图和原型说明）</li>
<li>UI 设计：将“草稿”转换为设计稿（草稿图、线框图（有尺寸）、设计稿（填充具体内容）），并提供相应的产物（产物：<strong>设计稿、静态页面</strong>）。（UI设计师，专业软件如：PS/AI/FW/ Sketch(mac的)）。往下就是开发人员负责。</li>
<li>技术选型：根据业务场景（业务需求）分别选择对应的技术栈（输入：需求分析说明书，输出：<strong>数据库技术栈、后端技术栈、前端技术栈</strong>），一般考虑的因素：人（架构师或技术好的人做，最重要，会哪些技术）、业务（业务需求要求学些技术）。一般只会选一次。</li>
<li>数据库设计：根据需求和原型分析我们有哪些类型的数据需要存，从而得到我们数据库的<strong>基本结构</strong>。（DBA或后端开发人员，由某专业工具画）至于前端：只需要知道每个表的目的及数据组成。具体：所有配置选项的东西都放在Options表name、value，与其它表没有联系。每个表都要有id，做增删改查操作。除了Options每个表都有个slug：用英文名让url地址变得更加有意义，对SEO更加友好。Posts文章（发表物）</li>
<li>项目架构设计：俗称搭架构，其中具体的操作主要就是制定项目规范约束（如文件该放哪？代码写的规范？如js的流行规范：谷歌js规范、airbnb javascript 规范）、创建基本的项目结构、编写基础的公共模块代码和组织代码。（产物：项目结构、项目约束文档、项目基本结构说明文档（基础公共代码有哪些？你可以调用哪些方法实现什么功能））（架构师）</li>
<li>业务迭代开发：开发者的日常，基于项目架构（条条框框）下完成各项业务功能。（开发者）</li>
<li>集中测试：将所有功能模块整合到一起过后，集中测试业务功能是否有 BUG，是否满足需求。（测试师）</li>
<li>部署上线：从开发环境向生产环境转换，就是把应用部署到服务器上。（运维人员）</li>
</ol>
<h2 id="网站开发的一般项目架构（目录）"><a href="#网站开发的一般项目架构（目录）" class="headerlink" title="网站开发的一般项目架构（目录）"></a>网站开发的一般项目架构（目录）</h2><p>学习时：将前后台都放一个文件夹。</p>
<p>怎么做以下文件：命令行进入目录，tree，加这些点做个说明</p>
<p>└── baixiu ······································ 项目文件夹（网站根目录）<br>    ├── admin ··································· 后台文件夹<br>    │   └── index.php ··························· 后台脚本文件<br>    ├── static ·································· 静态文件夹<br>    │   ├── assets ······························ 资源文件夹<br>    │   └── uploads ····························· 上传文件夹<br>    └── index.php ······························· 前台脚本文件</p>
<p>开发实际项目时：将前后台分开放。</p>
<p>一些具体操作：</p>
<ul>
<li><p>先明确一共有多少个页面</p>
</li>
<li><p>一个页面就对应一个 php 文件去处理</p>
</li>
<li><p>static文件夹中 静态文件的处理（整合静态文件）：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">└── baixiu ···························· 项目文件夹（网站根目录）</span><br><span class="line">    ├── <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">    ├── static ······················ 静态文件夹</span><br><span class="line">    │   ├── assets ·················· 资源文件夹</span><br><span class="line">+   │   │   ├── css ················· 样式文件夹</span><br><span class="line">+   │   │   ├── img ················· 图片文件夹</span><br><span class="line">+   │   │   ├── js ·················· 脚本文件夹</span><br><span class="line">+   │   │   └── venders ············· 第三方资源</span><br><span class="line">    │   └── uploads ················· 上传文件夹</span><br><span class="line">+   │       └── 2017 ········ 2017 年上传文件目录</span><br><span class="line">    ├── <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>static</code> 目录中只允许出现静态文件。</li>
<li><code>assets</code> 目录中放置网页中所需的资源文件。</li>
<li><code>uploads</code> 目录中放置网站运营过程中上传的文件，如果担心文件过多，可以按年归档（一年一个文件夹）。</li>
</ul>
</li>
</ul>
<h2 id="常见的几套技术方案搭配"><a href="#常见的几套技术方案搭配" class="headerlink" title="常见的几套技术方案搭配"></a>常见的几套技术方案搭配</h2><p>这里我们选择 PHP 作为了解服务端动态网页开发的技术方案。</p>
<p>PHP-&gt;nodejs</p>
<p>技术方案1：</p>
<p>服务端：PHP+MySQL;</p>
<p>客户端：jQuery+一些插件（Bootstrap+plugin+NProgress功能组件库或UI组件库）、HTML那些就不提了</p>
<h2 id="请求响应过程（web工作流程）"><a href="#请求响应过程（web工作流程）" class="headerlink" title="*请求响应过程（web工作流程）"></a>*请求响应过程（web工作流程）</h2><p>了解整个WEB是怎样运转的？从浏览器输入一个地址发起对网站的请求整个过程发生了什么？</p>
<blockquote>
<p>注意：服务端不是返回文件，而是返回执行后的结果</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E8%BF%87%E7%A8%8B.png" alt=""></p>
<ol>
<li><p>用户打开<strong>浏览器</strong></p>
</li>
<li><p>地址栏输入我们需要访问的网站<strong>网址</strong>（URL） </p>
</li>
<li><p>浏览器通过 DNS 服务器获取即将访问的网站 IP <strong>地址</strong> </p>
</li>
<li><p>浏览器发起一个对这个 IP 的<strong>请求</strong></p>
</li>
<li><p>服务端接收到这个请求，进行相应的<strong>处理</strong> </p>
</li>
<li><p>服务端将处理完的<strong>结果</strong>返回给客户端浏览器（间接）</p>
</li>
<li><p>浏览器将服务端返回的结果<strong>呈现到界面上</strong></p>
<blockquote>
<p>注意：这是静态文件的过程，看下面</p>
</blockquote>
</li>
</ol>
<h2 id="静态网页与动态网页的区别"><a href="#静态网页与动态网页的区别" class="headerlink" title="*静态网页与动态网页的区别"></a>*静态网页与动态网页的区别</h2><p>静态网页：将代码原封不动地呈现。 满足不了<strong>内容会随着数据动态变化（这就是动态）</strong> 的需求。过程：Apache 找到你请求对应的文件 → 读取文件 → 将文件内容响应给客户端浏 览器（文件原封不动的给你）</p>
<p>服务端动态网页：不再将HTML固定写死，每次用户请求时，服务端动态执行一段代码，<strong>临时生成一个用户想要的HTML页面</strong>（即每次请求时服务端动态生成HTML返回给用户的这种网站） 。是动态变化的</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/%E5%8A%A8%E6%80%81%E7%BD%91%E7%AB%99.png" alt=""></p>
<p>比一般请求响应过程多的阶段——判断机制：是否为静（动）态文件。（注意：找其它程序按一定规律执行代码，如PHP）</p>
<blockquote>
<p>实现服务端动态网页的技术有很多种：JSP、ASP.NET、PHP、Node 等等。</p>
<p>这里我们选择 PHP 作为了解服务端动态网页开发的技术方案。</p>
</blockquote>
<h3 id="Apache与PHP的关系"><a href="#Apache与PHP的关系" class="headerlink" title="Apache与PHP的关系"></a>Apache与PHP的关系</h3><p>Apache——是根据文件的扩展名找到文件的类型然后挨个询问每个模块能否处理这个类型的文件，如果这些模块都不能处理那么apache就自己处理（按照静态文件的方式处理）</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/apache10.png" alt=""></p>
<h3 id="配置-PHP-支持"><a href="#配置-PHP-支持" class="headerlink" title="配置 PHP 支持"></a>配置 PHP 支持</h3><p>但真正开发时，配环境：不会一个个装，而是直接用集成环境去装（将apche、php、mysql等全部装好）。而初学：不这样做，是因为容易把这些软件的职责搞乱</p>
<blockquote>
<p>实验：尝试在网站中添加一个扩展名为 php 的文件，然后到浏览器中访问它。</p>
<p>实验结果：并没有显示我们想要的 Hello PHP ，而是将代码原封不动的返回给浏览器了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!‐‐</span> <span class="attr">demo.php</span> ‐‐&gt;</span> </span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">'Hello PHP'</span>; <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>原因很简单：Apache 只能处理静态文件请求，对于后缀名为 .php 这种动态文件，它无法执行，所以就当成是一 个静态文件直接返回了。</p>
</blockquote>
<p>解决方法——配置PHP支持：解压php-&gt;loadmodule-&gt;addtype</p>
<ol>
<li><p>下载PHP，在服务器（电脑）上安装 PHP </p>
<ol>
<li>解压 php 到纯英文路径目录中 （PHP是辅助工具，放这就好，剩下是Apache的事）</li>
</ol>
<blockquote>
<p>你可以理解为：Apache 是一家没有太多能力的公司，只能处理一些简单的业务（静态网站），但是心很大想 做更多的事（动态网站），所以就想到了外包，所有额外的业务都需要外包给其他程序，而 PHP 就是理解为 一个专门能够处理 php 业务的外包公司</p>
</blockquote>
</li>
<li><p>在 Apache 中添加支持 PHP 的配置  </p>
<ol>
<li><p>在 Apache 的配置文件httpd.conf，找到添加位置，添加 PHP 处理模块（如果目录有空格，给目录加“”）</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"># php sup<span class="keyword">port</span> LoadModule php7_module C:/Develop/php/php7apache2_4.dll</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <IfModule mime_module> 节点中添加 .php 扩展名解析支持（因为PHP不根据后缀判断是否工作，是根据MIME Type工作：如text/html。在conf/mime.types中没有将这类型与扩展名关联，所以要加载）</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># parse .php files </span></span><br><span class="line">AddType <span class="built_in">application</span>/x‐httpd‐php .php</span><br></pre></td></tr></table></figure>
</li>
<li><p>默认文档配置节点 <IfModule dir_module> 中添加 index.php</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">dir_module</span>&gt;</span>     </span><br><span class="line">	DirectoryIndex index.html index.php <span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<p>注意：php代码与html代码 </p>
<ul>
<li>php不会受html执行的影响。</li>
<li>什么时候执行：PHP在服务器运行环境执行。html在浏览器执行。</li>
<li>php执行时只关心字符串。</li>
</ul>
<h2 id="搭建WEB服务器"><a href="#搭建WEB服务器" class="headerlink" title="*搭建WEB服务器"></a>*搭建WEB服务器</h2><ul>
<li>服务器（提供服务）：一台安装特定软件的公共计算机；</li>
<li>客户端（使用服务）：在一次服务过程中使用这个服务的设备（网络端点）</li>
</ul>
<h3 id="web服务器软件的常见搭配"><a href="#web服务器软件的常见搭配" class="headerlink" title="web服务器软件的常见搭配"></a>web服务器软件的常见搭配</h3><p>Nginx ········································ 反向代理 </p>
<p>Apache ····································· PHP </p>
<p>IIS ·············································· ASP.NET</p>
<p> Tomcat  ····································· Java</p>
<h3 id="安装web服务器软件——Apache"><a href="#安装web服务器软件——Apache" class="headerlink" title="安装web服务器软件——Apache"></a>安装web服务器软件——Apache</h3><ol>
<li><p>这儿安装的Web 服务器软件是：Apache HTTP Server。</p>
</li>
<li><p>由于我们安装的是解压版，需要自己进行一些配置</p>
<p>下载地址：<a href="https://www.apachelounge.com/download/" target="_blank" rel="noopener">https://www.apachelounge.com/download/</a> </p>
<p>使用说明：<a href="https://httpd.apache.org/docs/current/platform/windows.html" target="_blank" rel="noopener">https://httpd.apache.org/docs/current/platform/windows.html</a></p>
</li>
<li><p>（打开bin，运行Monitor.exe可查看服务器状态。）</p>
<p>配置：安装Apache服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意：需要使用管理员身份运行命令行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到 Apache 解压路径中的 bin 目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;解压目录&gt;/bin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装Apache服务，‐n参数是指定服务名称,可省略 .exe也可省略</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> httpd.exe ‐k install ‐n <span class="string">"Apache"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果需要卸载 Apache，可以执行以下命令 $ httpd.exe ‐k uninstall ‐n <span class="string">"Apache"</span></span></span><br></pre></td></tr></table></figure>

<p>执行安装命令过后会报一个错，原因:默认的配置文件有问题，需要先调整一下配置文件 conf/httpd.conf ，才能 正常启动服务。</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/apa1.png" alt=""></p>
<p>找到 Apache 解压目录中的 conf 目录下的 httpd.conf 文件，定位到 37 行，将 c:/Apache24 改为解压目录，我这 里解压到路径是 C:/Develop/apache ，所以我这里修改</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/Apache2.png" alt=""></p>
<p>修改完以后，执行以下命令重新测试配置文件是否通过。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>httpd.exe -t</span><br></pre></td></tr></table></figure>

<p>仍会报错：</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/Apache3.png" alt=""></p>
<p>通过错误信息得知，这里是因为另外一个地方配置的目录不存在导致的，所以接着调整 246 行的 DocumentRoot 选项：</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/Apache4.png" alt=""></p>
<p>随即，我们发现这个配置文件中有很多默认配置选项中的路径都是 c:/Apache24 ，所以我们批量都修改为我们解 压的目录路径</p>
<p>然后重新执行 httpd.exe -t 测试配置文件，这时候应该提示 Syntax OK 。（会有个ServerName 的警告提示，但不用管它）</p>
<p>接着运行以下命令重新启动 Apache 服务：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">   # 注意：需要使用管理员身份运行命令行！！！ $ httpd.exe ‐k <span class="built_in">start</span> ‐n "Apache" </span><br><span class="line">   # 重新启动 Apache 服务或服务里重启或Monitor操作</span><br><span class="line">   $ httpd.exe ‐k restart ‐n "Apache"</span><br><span class="line">   # 停止 Apache 服务或服务器停止或Monitor操作</span><br><span class="line">$ httpd.exe ‐k stop ‐n "Apache"</span><br></pre></td></tr></table></figure>

<p>回到浏览器中，地址栏输入：<a href="http://localhost/，回车访问，这时正常应该看到" target="_blank" rel="noopener">http://localhost/，回车访问，这时正常应该看到</a> It works!   配置成功！</p>
</li>
</ol>
<h3 id="Apache常见配置："><a href="#Apache常见配置：" class="headerlink" title="Apache常见配置："></a>Apache常见配置：</h3><blockquote>
<p>相关文件：配置文件apache/httpd.conf、 Apache 的虚拟主机配置文件apache/conf/extra/httpd-vhosts.conf</p>
<p>可以把apache、etc加入快速访问。</p>
<p>配置说明文档：<a href="http://httpd.apache.org/docs/current/" target="_blank" rel="noopener">http://httpd.apache.org/docs/current/</a><br>配置文件中行首的 # 指的是注释<br>注意：以下所记录的行号仅供参考，不同版本的配置文件可能不尽相同。</p>
<p>改完配置文件后，最好先测试下：httpd -t，后重启服务</p>
</blockquote>
<h4 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h4><p>监听端口可以随意修改为任意一个未被其他程序监听的端口，可以通过设置<strong>配置文件 httpd.conf 中的</strong> Listen 指令后面的数字修改:<strong>Listen 端口号</strong>。可以配多个端口</p>
<h4 id="网站根目录"><a href="#网站根目录" class="headerlink" title="网站根目录"></a>网站根目录</h4><p>如果需要设置网站根目录，可以通过修改配置文件 <strong>httpd.conf 中的网站根目录选项</strong>切换。（改下图2行即可，第二行意思：是否允许/禁止访问磁盘根目录。前面有个全禁止访问，这儿覆盖掉它）</p>
<p>若没切换过来，就shift+f5、ctrl+shift+R刷新缓存</p>
<p>注意/而非\</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/Apache5.png" alt=""></p>
<p>默认 Apache 的网站根目录是安装目录中的 htdocs 文件夹，为了方便对网站文件的管理，一般我们会将其设置在 一个自定义目录中（如果你不介意其实不修改也无所谓）。</p>
<blockquote>
<p>网站根目录就是存放我们网站文件的最顶层目录，通常 URL 中域名后面的第一个斜线对应（映射）的就是网站根目录。<br>注：动态网站情况会比较特殊，需要单独考虑，不一定是这个规则</p>
</blockquote>
<h4 id="默认文档"><a href="#默认文档" class="headerlink" title="默认文档"></a>默认文档</h4><p>配置文件 httpd.conf 的 280 行的 DirectoryIndex ，默认文档可以配置多个（由前到后依次去找，找到为止，如果没找到任何一个则<strong>启用目录浏览</strong>）：</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/Apache6.png" alt=""></p>
<p>那怎么关掉目录浏览呢？Directory节点中的 Options Indexes FollowSymLinks去掉Indexes</p>
<blockquote>
<p>当客户端访问的是一个目录而不是具体文件时，服务端默认返回这个目录下的某个文档（文件），这个文档就称为默认文档。</p>
</blockquote>
<h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="*虚拟主机"></a>*虚拟主机</h4><p>想在一台机器上部署多个apache站点，就必须配置虚拟主机，将一个网站分成多个网站。</p>
<blockquote>
<p>由于后期对虚拟主机的配置操作非常常见，所以我们一般将虚拟主机的配置单独放到一个配置文件中，然后 在主配置文件中引入，避免破坏主配置文件中的其他配置。<br>Include conf/extra/httpd-vhosts.conf 配置的作用就将另外一个配置文件引入（使其生效）</p>
<p>大概过程：取消注释、添加配置（多虚拟主机时注意添加允许访问磁盘根目录Directoy节点，否则出现Forbidden）、修改hosts。注意配置完先测试再重启</p>
</blockquote>
<p>具体操作：在主配置文件 httpd.conf 的 505 行取消注释：</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/Apache7.png" alt=""></p>
<p>然后找到 Apache 的虚拟主机配置文件apache/conf/extra/httpd-vhosts.conf，添加一个如下的虚拟主机配置节点，然后重新启动 Apache。</p>
<blockquote>
<p>这个文件中有两个默认的示例配置，可以注释掉保留给以后参考（ctrl+shift+↑/↓或按住滚轮 多行注释）</p>
<p>大胆改，在原始文件apache/conf/original有这些配置文件的初始状态</p>
<p>虚拟主机也有：根目录、默认文件、目录浏览等信息</p>
<p>由于多个虚拟主机一同工作，每一个虚拟主机必须配置 ServerName（访问的域名）</p>
<p>要多个域名访问同一网站，可以起个别名，别名一般加www前缀。</p>
<p>注意/，而不是\</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/Apa8.png" alt=""></p>
<p>因为域名要买，如果不买而真的要使用 baixiu.com 这个域名的话，就只能通过修改 hosts 文件达到目的（注意：一定要在浏览器第一次请求去修改hosts，不然会缓存，修改就不起作用了）。原因很简单：这个域名不是 我们自己的，我们没有办法修改这个域名在公网上的 DNS。</p>
<blockquote>
<p>注意：<br>如果使用了虚拟主机，则默认全部使用虚拟主机，即之前的默认网站也必须通过虚拟主机方式配置，否则访问不到。(如使用localhost不会访问默认主机，而会访问第一个虚拟主机。)参考：<a href="http://skypegnu1.blog.51cto.com/8991766/1532454" target="_blank" rel="noopener">http://skypegnu1.blog.51cto.com/8991766/1532454</a> </p>
<p>起奇葩后缀，如.abcd,会跳到搜索引擎搜索而不会去访问。</p>
<p>如果虚拟主机的端口使用的不是 80 ，则需要在主配置文件中添加一个对这个端口的监听：</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/Apache9.png" alt=""></p>
<p>Forbidden情况：多虚拟主机时注意<strong>添加</strong>允许访问磁盘根目录<strong>Directoy节点</strong>，否则出现Forbidden</p>
</blockquote>
<h3 id="Apache常用命令："><a href="#Apache常用命令：" class="headerlink" title="Apache常用命令："></a>Apache常用命令：</h3><p>（打开apache/bin，运行Monitor.exe可查看服务器状态。）</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 测试 Apache 服务，但要到apache的bin目录下</span><br><span class="line">$ httpd ‐t</span><br><span class="line"># 重新启动 Apache 服务</span><br><span class="line">$ httpd ‐k <span class="built_in">start</span></span><br><span class="line"># 停止 Apache 服务 </span><br><span class="line">$ httpd ‐k stop</span><br></pre></td></tr></table></figure>



<h2 id="网络基本概念"><a href="#网络基本概念" class="headerlink" title="网络基本概念"></a>网络基本概念</h2><h3 id="IP地址（对移动WEB关键）"><a href="#IP地址（对移动WEB关键）" class="headerlink" title="IP地址（对移动WEB关键）"></a>IP地址（对移动WEB关键）</h3><p>设备在某一个网络中的地址。</p>
<p>如果没有连接网络设备，会有个本地回环地址：127.0.0.1，指向本机。而localhost是该地址对应 主机名（虚拟域名/虚拟主机名），指向当前本机。</p>
<p>目前最常见的格式： [0-255].[0-255].[0-255].[0-255]。</p>
<blockquote>
<p>也叫端点。</p>
<p>只要连在网络设备上的其中一条网线接口上，网络设备就会给它分配一个IP地址。也就是说电脑想要有IP，必须要有个网络设备的连接。</p>
<p>你想访问别人电脑，别人电脑就该跟你处于共同环境（怎么看？网络中心-&gt;以太网-&gt;详细信息-&gt;IPV4地址。你和别人的IP地址相同的就是前三部分（网段），这就是我们处于相同网段，当处于同一网段（单个网络情况），你访问别人的IPV4才能成功。而自己的整个IP地址也指向本机，若访问不到，防火墙-&gt;高级设置-&gt;入站规则-&gt;apache-&gt;启动或防火墙关了。但对于放在服务器上的网站，防火墙不能关）</p>
<p>多网情况为啥不能无视网段访问别人计算机？不能访问原因：1.请求到了交换器而不是到你机器2.80端口直接被电信掐掉了。</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/IP%E5%9C%B0%E5%9D%801.png" alt=""></p>
</blockquote>
<h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>由于 IP 地址很难记，所以就有人想出来要给 IP 起名字 （别名）。</p>
<blockquote>
<p>域名是需要花钱注册的。后缀不一样价格不一样。</p>
</blockquote>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>简单说：把指定域名指向哪个IP的这个过程存在一个公共地方，这个公共地方就是DNS服务器。</p>
<p>具体说：通过宽带运营商提供的服务器解析一个域名背后对应的 IP，这个过程叫做 <strong>DNS 寻址</strong>。帮你完成 DNS 寻址过程的 服务器叫做 <strong>DNS 服务器</strong>。</p>
<h4 id="DNS具体操作"><a href="#DNS具体操作" class="headerlink" title="DNS具体操作"></a>DNS具体操作</h4><p>登陆阿里云等域名网站-&gt;域名与网站-&gt;云解析DNS-&gt;挑个域名添加解析即可</p>
<h4 id="hosts-文件"><a href="#hosts-文件" class="headerlink" title="hosts 文件"></a>hosts 文件</h4><p>简单说：若该文件包含对要解析域名的配置，就不去请求DNS服务器。可以自己给域名分配IP地址。</p>
<p>具体说：操作系统在发起对 DNS 服务器的查询请求之前，会优先检查本机的 hosts 文件。如果这个文件中包含了对当前需要解析的域名的配置，则不再发起对 DNS 服务器的请求，直接使用 hosts 文件中的配置。<br><strong>文件所在路径：</strong><br>Windows： C:\Windows\System32\drivers\etc\hosts macOS： /etc/hosts</p>
<p><strong>配置方法：</strong>（键值对）</p>
<p>以管理员方式运行；向hosts文件添加：<strong>IP地址 域名</strong></p>
<p>（权限不要改。那怎么改文件权限？右击文件，属性，安全，给USER添加权限）</p>
<blockquote>
<p>注意：本机的hosts只能影响本机的DNS寻址。</p>
</blockquote>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>计算机本身是一个封闭的环境，就像是一个大楼，如果需要有数据通信往来，必须有门，这个门在术语中就叫端 口，每一个端口都有一个编号，每台计算机只有 65536 个端口（0-65535）。一般我们把“占门”的过程叫做监听。</p>
<blockquote>
<p>但0这个端口用不了，这是计算机自己用的</p>
</blockquote>
<h4 id="监视本机端口使用情况：netstat-an"><a href="#监视本机端口使用情况：netstat-an" class="headerlink" title="监视本机端口使用情况：netstat -an"></a>监视本机端口使用情况：netstat -an</h4><p>如apache等web服务器软件一般占用80端口，因为只有80端口才不用在url里写”：具体端口”。要写这些的一般都是不想让你访问的网站，如公司内网系统</p>
<blockquote>
<p>参考链接：<br><a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3</a> 常见服务器端口应用占用情况</p>
<p><a href="https://baike.baidu.com/item/%E7%AB%AF%E5%8F%A3" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%AB%AF%E5%8F%A3</a> </p>
<p>http 默认的端口 80 </p>
<p>https 默认的端口是 443</p>
</blockquote>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>URL（Uniform Resource Locator），统一资源定位符，通俗点来说就是表示网络当中某一个网页的完整访问地址，它具有一定的格式：<img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/urlForm.png" alt=""></p>
<p>例如：https: //zce.me:80 /schools/students? id=18&amp;name=zce# photo</p>
<p>协议 主机(域名|主机名) 请求路径 请求参数 锚链值</p>
<h1 id="自测"><a href="#自测" class="headerlink" title="自测"></a>自测</h1><p>安装 Apache 并配置，确保本机可以访问。</p>
<p> 相互访问自己与室友提供的 Web 服务。 </p>
<p>让 Apache 支持 php 文件的运行。 </p>
<p>可以配置网站的默认文档。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>网站搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>02-JS BOM</title>
    <url>/2020/03/29/02-JS%20BOM/</url>
    <content><![CDATA[<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>一、window一个特殊的属性:window.name,建议不用name当变量。</p>
<p>二、alert()、prompt()、confirm()实际不用，各浏览器样式不一样、不可控。改进：用div+CSS制作    对话框+后面的遮挡层。</p>
<a id="more"></a>

<p>三、javaScript分三个部分：</p>
<p>1.ECMAScript标准——基本语法</p>
<p>2.DOM——Document Object Model 文档对象模型，操作页面元素的</p>
<p>3.BOM——Browser Object Model 浏览器对象模型，操作浏览器的</p>
<h2 id="顶级对象"><a href="#顶级对象" class="headerlink" title="顶级对象"></a>顶级对象</h2><p>浏览器的顶级对象：window</p>
<p>页面的顶级对象：document</p>
<blockquote>
<p>页面中所有内容（包括window）都是属于浏览器的——页面中的内容也都是window的，所以window是可以省略的</p>
</blockquote>
<p>jQuery中顶级对象：$</p>
<h2 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h2><ul>
<li><p>onload——页面加载完后事件</p>
</li>
<li><p>onunload——页面关闭后事件（谷歌不兼容）</p>
</li>
<li><p>onbeforeunload——页面关闭前事件（谷歌不兼容）</p>
</li>
</ul>
<h2 id="location对象——地址栏URL上的操作"><a href="#location对象——地址栏URL上的操作" class="headerlink" title="location对象——地址栏URL上的操作"></a>location对象——地址栏URL上的操作</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location);	<span class="comment">//返回的是浏览器地址</span></span><br></pre></td></tr></table></figure>

<p><strong>属性（无括号）：</strong>返回URL的各组成部分</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//地址栏上#及后面的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.hash);</span><br><span class="line"><span class="comment">//主机名及端口号（“窗口”）</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.host);</span><br><span class="line"><span class="comment">//主机名</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.hostname);</span><br><span class="line"><span class="comment">//文件的路径---相对路径</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.pathname);</span><br><span class="line"><span class="comment">//端口号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.port);</span><br><span class="line"><span class="comment">//协议</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.protocol);</span><br><span class="line"><span class="comment">//搜索的内容（s?后面的）</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.search);</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性，跳转页面的，必须记住</span></span><br><span class="line">location.href=<span class="string">"http://www.jd.com"</span>;</span><br></pre></td></tr></table></figure>

<p><strong>方法（有括号）：</strong> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这2个有历史记录</span></span><br><span class="line">location.href=<span class="string">"http://www.jd.com"</span>;<span class="comment">//跳转页面属性-----------------&gt;必须记住</span></span><br><span class="line">location.assign(<span class="string">"http://www.jd.com"</span>);<span class="comment">//跳转页面方法</span></span><br><span class="line"></span><br><span class="line">location.reload();<span class="comment">//刷新</span></span><br><span class="line">location.replace(<span class="string">"http://www.jd.com"</span>);<span class="comment">//替换地址栏上的地址，没有历史记录</span></span><br></pre></td></tr></table></figure>

<h2 id="history对象——历史纪录的后退和前进"><a href="#history对象——历史纪录的后退和前进" class="headerlink" title="history对象——历史纪录的后退和前进"></a>history对象——历史纪录的后退和前进</h2><p>了解有这几种即可，用不到。</p>
<ul>
<li>back()    后退</li>
<li>forward()    前进</li>
<li>go()</li>
</ul>
<h2 id="navigator对象——获取系统、浏览器的信息"><a href="#navigator对象——获取系统、浏览器的信息" class="headerlink" title="navigator对象——获取系统、浏览器的信息"></a>navigator对象——获取系统、浏览器的信息</h2><p><strong>属性：</strong></p>
<ul>
<li>userAgent</li>
</ul>
<p>通过userAgent可以判断用户浏览器的类型</p>
<ul>
<li>platform</li>
</ul>
<p>通过platform可以判断浏览器所在的系统平台类型.</p>
<h2 id="定时器：setTimeout"><a href="#定时器：setTimeout" class="headerlink" title="定时器：setTimeout()"></a>定时器：setTimeout()</h2><p>BOM中有2个定时器。</p>
<p>setTimeout（函数，时间）；    //一次性的定时器</p>
<p>返回值：该定时器的id</p>
<p>clearTimeout（id）；    //虽一次性，但也要清理所占空间。</p>
<h2 id="定时器：setInterval"><a href="#定时器：setInterval" class="headerlink" title="定时器：setInterval()"></a>定时器：setInterval()</h2><p>定时器：有方法setInterval()、clearInterval(); //隔一段时间就执行一次函数的定时器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">一、设置定时器</span><br><span class="line"><span class="comment">//参数1:函数  参数2:时间---毫秒---1000毫秒--1秒</span></span><br><span class="line"><span class="comment">//执行过程:页面加载完毕后,每隔1秒就执行一次，一直执行。</span></span><br><span class="line"><span class="comment">//该定时器会返回自己的id值——如timeId</span></span><br><span class="line"><span class="keyword">var</span> timeId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"hello"</span>);<span class="comment">//断言</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">二、清理定时器</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//点击按钮,停止定时器</span></span><br><span class="line">    <span class="comment">//参数:要清理的定时的id的值</span></span><br><span class="line">    <span class="built_in">window</span>.clearInterval(timeId);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="相关实例"><a href="#相关实例" class="headerlink" title="相关实例"></a>相关实例</h2><h3 id="封装动画函数（匀速、缓动（变速））"><a href="#封装动画函数（匀速、缓动（变速））" class="headerlink" title="封装动画函数（匀速、缓动（变速））"></a>封装动画函数（匀速、缓动（变速））</h3><h4 id="匀速的动画函数"><a href="#匀速的动画函数" class="headerlink" title="匀速的动画函数"></a>匀速的动画函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置任意的一个元素,移动到指定的目标位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">element, target</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//因为每点击一次按钮都会产生定时器，所以要先清除定时器</span></span><br><span class="line">  clearInterval(element.timeId);</span><br><span class="line">  <span class="comment">//因为元素要移动，所以要设定时器。</span></span><br><span class="line">  <span class="comment">//把定时器的id值存储到一个对象的一个属性中，方便清理</span></span><br><span class="line">  element.timeId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取元素的当前的位置,数字类型</span></span><br><span class="line">    <span class="keyword">var</span> current = element.offsetLeft;</span><br><span class="line">    <span class="comment">//每次移动的距离</span></span><br><span class="line">    <span class="keyword">var</span> step = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//从左往右：走正数。从右往左：走负数</span></span><br><span class="line">    step = current &lt; target ? step : -step;</span><br><span class="line">    <span class="comment">//当前移动到位置</span></span><br><span class="line">    current += step;</span><br><span class="line">    <span class="comment">//判断目标位置与当前位置的距离</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(current - target) &gt; <span class="built_in">Math</span>.abs(step)) &#123;</span><br><span class="line">      element.style.left = current + <span class="string">"px"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//清理定时器</span></span><br><span class="line">      clearInterval(element.timeId);</span><br><span class="line">      <span class="comment">//直接到达目标</span></span><br><span class="line">      element.style.left = target + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="变速（缓动）的动画函数"><a href="#变速（缓动）的动画函数" class="headerlink" title="变速（缓动）的动画函数"></a>变速（缓动）的动画函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">当前位置：current</span><br><span class="line">目标位置：target</span><br><span class="line">缓动的效果：步数=（目标-当前）/<span class="number">10</span>。 由快到慢</span><br><span class="line">注意：如果步数&gt;<span class="number">0</span>，向上取整，返回向下。又变速可到<span class="number">1</span>，所以不需要判断当前、目标、步数三者关系</span><br></pre></td></tr></table></figure>

<h5 id="筋斗云导航栏案例："><a href="#筋斗云导航栏案例：" class="headerlink" title="筋斗云导航栏案例："></a>筋斗云导航栏案例：</h5><blockquote>
<p>关键：不是点击的时候效果定在这，点击只是记录了此次点击的位置，而是离开时定在这的：回到上一次点的位置。</p>
<p>过程：获取云彩；获取所有的li标签；循环遍历分别注册鼠标进入（ 封装动画函数移动云彩的左边距，移动到鼠标此次进入的li的位置animate(cloud,this.offsetLeft)）、鼠标点击（点击时记录此次点击的位置，没点就回去：先设外面var LastPosition=0回去，再里面LastPosition=this.offsetLeft）、鼠标离开事件（离开定在上一次点击位置：animate(cloud,LastPostion)）。因为循环，所以用命名函数。</p>
</blockquote>
<p>升级4-5次变速函数（理解即可，能写出最终版本）</p>
<h4 id="封装缓动动画函数增加任意一个属性"><a href="#封装缓动动画函数增加任意一个属性" class="headerlink" title="封装缓动动画函数增加任意一个属性"></a>封装缓动动画函数增加任意一个属性</h4><blockquote>
<p>1.添加获取计算后的任意一个样式属性函数值</p>
<p>2.将width改成变量attr，<strong>定时器添加个变量attr到参数2。</strong></p>
<p>3.获取元素当前位置改为parseInt（getStyle（element，attr））</p>
</blockquote>
<h4 id="封装缓动动画函数增加任意多个属性"><a href="#封装缓动动画函数增加任意多个属性" class="headerlink" title="封装缓动动画函数增加任意多个属性"></a>封装缓动动画函数增加任意多个属性</h4><blockquote>
<p>最初做法：给动画函数添加多个参数，来获取<strong>一对数据</strong>（任意多个属性、对应的属性值为：目标位置）。一对的数据用json对象组成。</p>
<p>优化：function animate(element,<strong>json</strong>)</p>
<p>按钮事件里定义json:animate（my$(“dv”),{…}）;</p>
<p>动画函数里原来只能操作一个属性一个目标，要操作多个属性多个目标：将定时器内代码都放到循环遍历里，让var target=json[attr]（.变量；[“属性”]）</p>
<p>bug：原来只要有一个属性到达目标就清除定时器，现在要让每个属性全到达目标才清理——改成</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(current!=target)&#123;</span><br><span class="line">    flag=<span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">  <span class="comment">//清理定时器</span></span><br><span class="line">  clear<span class="constructor">Interval(<span class="params">element</span>.<span class="params">timeId</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="封装缓动动画函数增加任意多个属性、回调函数：实现多个动画"><a href="#封装缓动动画函数增加任意多个属性、回调函数：实现多个动画" class="headerlink" title="封装缓动动画函数增加任意多个属性、回调函数：实现多个动画"></a>封装缓动动画函数增加任意多个属性、回调函数：实现多个动画</h4><p>回调函数：当一个函数作为参数使用，就是回调函数。</p>
<p>在哪加？function animate（，，这加）。</p>
<p>在哪用？所有属性全部到达目标位置时用——在if（flag）中清除定时器后写：判断有没传入回调函数？传入才调用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(fn)&#123;</span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在上面再增加透明度、层级（最终版本）"><a href="#在上面再增加透明度、层级（最终版本）" class="headerlink" title="在上面再增加透明度、层级（最终版本）"></a>在上面再增加透明度、层级（最终版本）</h4><p>思路——</p>
<p>zIndex:直接赋值</p>
<p>opacity：数字类型——小数——放大100倍。再在获取计算后的值那除100且不需px。</p>
<p>把上面2个都当成json的属性</p>
<p>在哪改？json代码块里改：放里面的前面，判断json属性是否=他两，if（放除判断是否到达目标的代码，但透明度不需取整且当前、目标都*100。再在获取计算后的值那除100且不需px）-else if（层级改变就是直接改变它的属性值）-else（放除判断是否到达目标的代码）</p>
<h4 id="手风琴案例"><a href="#手风琴案例" class="headerlink" title="手风琴案例"></a>手风琴案例</h4><ol>
<li>设个放手风琴的div</li>
<li>加载图片：先获取所有的li标签。循环中设置背景图片</li>
<li>事件：在上述循环中加入鼠标进入、鼠标离开事件（因为循环，所以命名函数事件）</li>
<li>鼠标进入函数：排他、设动画效果：循环中设li都为宽100，循环外设当前li宽为800</li>
<li>鼠标离开函数：循环设置所有都恢复：宽为原来宽</li>
<li>bug：进入时最后一个宽较窄，不管</li>
</ol>
<h4 id="开、关机动画案例"><a href="#开、关机动画案例" class="headerlink" title="开、关机动画案例"></a>开、关机动画案例</h4><p>关键：给×注册点击事件——动画函数设置最下面的div高渐渐变0，回调函数设置整个box的宽渐渐变0</p>
<h4 id="旋转木马案例"><a href="#旋转木马案例" class="headerlink" title="旋转木马案例"></a>旋转木马案例</h4><p>关键：数组的四个添加删除方法、图片散开：动画函数中设（层级、透明度、宽上左）、assign()重新分配函数</p>
<p>过程：</p>
<p>1.图片散开：找到所有li，声明为list，然后把代码放入function assign()（加载后图片（li）散开循环给每个设动画函数），再调用</p>
<p>2.左右焦点按钮：a的href可以写地址、锚点、javascript:;(用来点击做什么事的,中间的void(0)可省)</p>
<p>鼠标进入，左右焦点的div渐渐显示：用动画函数设透明度为1</p>
<p>鼠标离开，渐渐隐藏：用动画函数设透明度为0</p>
<p>3.点击右边按钮事件：让图片依次换json属性组，用数组的四个添加删除方法——这里用config.push(config.shift());assign();</p>
<p>4.点左边按钮：config.unshift(config.pop());assign();</p>
<p>5.加锁：防止鼠标点多次动画没时间加载导致卷起来——</p>
<p>在加载事件中先设置var flag=true;//假设所有的动画执行完毕了——锁。再把左、右边按钮事件改为<strong>if(flag){flag=false;</strong>con…;assign();<strong>};</strong>。重新分配函数中再把里面的动画函数添加个函数作参数3，其中代码flag=true;</p>
<h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><p>3个功能：自动切换、鼠标在小圆点切换、鼠标在左右箭头切换</p>
<h4 id="简单的轮播图"><a href="#简单的轮播图" class="headerlink" title="简单的轮播图"></a>简单的轮播图</h4><p>鼠标图片在小圆点切换</p>
<blockquote>
<p>关键点：排他功能、移动ul(每个图片的宽*鼠标放在这个按钮的索引值)、封装动画函数、overflow:hidden;</p>
<p>步骤：获取需要的元素值（相框的父级、相框、相框宽度、ul、所有span）、循环排他、循环时候把索引值保存在每个span的自定义属性中、获取当前鼠标进入的span的索引、用封装动画函数来切换图片（-宽*索引值）</p>
</blockquote>
<h4 id="左右焦点轮播图"><a href="#左右焦点轮播图" class="headerlink" title="左右焦点轮播图"></a>左右焦点轮播图</h4><blockquote>
<p>关键：获取span—&gt;获取一个左右焦点所在的div。给2个div都注册事件。显示和隐藏左右焦点的div——为box注册事件。直接index++/–，不需存放index。用封装动画函数来切换图片（-宽*索引值） </p>
</blockquote>
<h4 id="无缝连接的轮播图（用到定时器）"><a href="#无缝连接的轮播图（用到定时器）" class="headerlink" title="无缝连接的轮播图（用到定时器）"></a>无缝连接的轮播图（用到定时器）</h4><p>最后一张再到显示第一张</p>
<blockquote>
<p>功能：当页面加载时图片移动（定时器）、当鼠标进去时停止出来又继续移动</p>
<p>关键：原相框+一张假图（第一张图），当到原相框（-多少px）时跳回第一张图0px且让current变回0。定时器。进入box停止，即清除定时器。离开box时再重新开个定时器</p>
</blockquote>
<h4 id="完整的轮播图"><a href="#完整的轮播图" class="headerlink" title="完整的轮播图"></a>完整的轮播图</h4><p>3个功能：自动切换、鼠标在小圆点切换、鼠标在左右箭头切换</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">完整思路：</span><br><span class="line"><span class="number">1.</span> 根据ul中li个数(图片的个数)动态的创建li,并且加入到ol中,作为小按钮来使用</span><br><span class="line">为每个ol中的li添加鼠标进入的事件,(添加事件之前,先把索引保存在每个li的自定义属性中),鼠标进入li的时候做排他功能(背景颜色),移动图片(图片整体移动,移动的ul,每次移动的是一个图片的宽度,图片的宽度就是向宽的宽度),调用的是动画函数,移动ul,移动的是索引值*图片的宽度,并且把索引值存储在一个全局变量中,pic</span><br><span class="line"><span class="number">2.</span> 创建li之后,<span class="number">1</span>---设置ol中第一个li有默认的背景颜色,<span class="number">2</span>---把ul中的第一个li克隆一下(无缝连接的效果)追加到ul中所有的li的最后面(无缝效果:页面中的第一个图片和最后一个图片是同一个图片)</span><br><span class="line"><span class="number">3.</span>左右焦点的div显示和隐藏</span><br><span class="line"><span class="number">4.</span>为左右按钮注册点击事件</span><br><span class="line">每一次点击右边的按钮,先判断pic的值是不是ul中li的length<span class="number">-1</span>(pic的值最大是<span class="number">5</span>),此时设置pic的值为<span class="number">0</span>,同时设置ul距离左边的left值为<span class="number">0</span>(初始值),此时pic立刻加<span class="number">1</span>,移动ul,用户看到的就是第二个图片</span><br><span class="line">设置小按钮的背景颜色</span><br><span class="line">左边按钮,需要判断pic值是不是<span class="number">0</span>,如果是<span class="number">0</span>此时pic=<span class="number">5</span>,ul的left为<span class="number">5</span>*图片的宽,立刻pic<span class="number">-1</span>,然后ul移动一张图片,此时用户看到了第五个图片</span><br><span class="line"><span class="number">5.</span>自动播放在页面加载的时候,启动一个定时器,里面调用的就是右边按钮的点击事件的处理函数</span><br></pre></td></tr></table></figure>

<p>1.先获取元素：（父级div、相框、相框宽度、ul、ul中的所有li、ol、焦点的div）</p>
<p>2.按钮移动图片：</p>
<p>​    创建小按钮——根据ul中的li个数（创建li标签、加入到ol中、添加li内容；在每个ol中的li标签上添加一个自定义属性，存储索引值注册鼠标进入事件（排他功能：先干掉所有li的背景颜色i=空，再设置当前鼠标进来的li的背景颜色this=，   获取鼠标进入的li的当前索引值，   移动ul））</p>
<p>​    设置ol中第一个li有背景颜色</p>
<p>3.右侧点击按钮移动图片：</p>
<p>​    无缝效果：克隆一个ul中第一个li，加到ul中的最后（true克隆标签包括内容）</p>
<p>​    鼠标进入到box的div显示左右焦点的div</p>
<p>​    鼠标离开隐藏div</p>
<p>​    右按钮事件：①利用同步   来对应上个按钮的下一张（如var p=0；function f1(){p++;}f1();console.log(p);输出p=1）②封装动画函数来移动ul   ③达到无缝效果：判断，<strong>当用户看到假图pic=length-1时，pic变成0跳到真图</strong>，所以要放在pic++前面</p>
<p>④焦点要与上个按钮同步：判断，（如果pic==5说明显示第6个图——假图，第一个小按钮有颜色，所以）当用户看到假图pic=length-1时，设置上个按钮的背景颜色：length-1变为空，0变色。否则排他功能：先干掉所有li的背景颜色i=空，再设置当前鼠标进来的li的背景颜色pic=。</p>
<p>4.左按钮事件</p>
<p>​    ①图片移动：与右的差别</p>
<p>如果pic==0，<strong>pic要变成5</strong>，要显示最后一张：left=-pic*imgWidth+”px“；</p>
<p>​    <strong>pic–</strong></p>
<p>​    动画函数让ul负移动：-pic*imgWidth</p>
<p>​    ②排他功能：i、pic</p>
<p>5.自动播放功能：</p>
<p>定时器：隔一段事件调用右按钮事件——先将右按钮事件的函数写成命名函数。再将定时器放在克隆后面，setInterval(命名函数，1000)。再将封装动画函数改成10毫秒，保证1秒内移动完图片。鼠标进来时清理定时器，离开时设定时器。</p>
</blockquote>
<h3 id="小实例："><a href="#小实例：" class="headerlink" title="小实例："></a>小实例：</h3><p>先总结思路，再第二天不看编程，最后再修改。</p>
<h4 id="强制阅读协议按钮"><a href="#强制阅读协议按钮" class="headerlink" title="强制阅读协议按钮"></a>强制阅读协议按钮</h4><blockquote>
<p>思路：给该按钮设定时器并不让点击，当time为0时，按钮值改为同意且可点击并取消定时器。</p>
</blockquote>
<h4 id="div渐变"><a href="#div渐变" class="headerlink" title="div渐变"></a>div渐变</h4><blockquote>
<p>思路：给按钮设定时器：透明度逐渐从1到0（因为小数的结果不一定，所以先设个变量opacity为10让其每隔1秒减一，之后再/10，再赋给div的style.opacity。</p>
<p>当opacity&lt;=0时，清除定时器，防止一直减下去。</p>
</blockquote>
<p>div变宽</p>
<p>给按钮事件设置定时器</p>
<p>定时器中：设变量，每隔多少+=。</p>
<p>​                    给div的style.width赋值</p>
<p>​                    设if语句设清除定时器条件。</p>
<h4 id="移动元素"><a href="#移动元素" class="headerlink" title="移动元素"></a>移动元素</h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="number">400</span>时：</span><br><span class="line">按钮事件里设定时器</span><br><span class="line">获取<span class="keyword">div</span>的当前的位置</span><br><span class="line"><span class="keyword">div</span>每次移动多少像素<span class="comment">---步数</span></span><br><span class="line">每次移动后的距离</span><br><span class="line"><span class="keyword">if</span>判断当前移动后的位置是否到达目标位置</span><br><span class="line"><span class="keyword">else</span>清理定时器</span><br><span class="line"><span class="number">800</span>时：同理</span><br></pre></td></tr></table></figure>

<h4 id="迂回移动元素、封装动画函数"><a href="#迂回移动元素、封装动画函数" class="headerlink" title="迂回移动元素、封装动画函数"></a>迂回移动元素、封装动画函数</h4><blockquote>
<p>思路：2按钮事件功能相同，所以可封装</p>
<ol>
<li><p>获取要移动div的当前位置</p>
</li>
<li><p>div每次移动多少像素——步数（<strong>迂回，所以给步数赋的值要相反</strong>）</p>
</li>
<li><p>每次移动后的距离</p>
</li>
<li><p>if——判断当前移动后的位置是否到达目标位置（注意：current与target距离若小于步数情况）</p>
</li>
<li><p>else——清除（一个）定时器</p>
</li>
<li><pre><code>注意——每点击按钮都会产生一个定时器
//要先在函数里清理定时器
clearInterval(element.timeId);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code></code></pre></blockquote>
<h4 id="一起摇"><a href="#一起摇" class="headerlink" title="一起摇"></a>一起摇</h4><blockquote>
<p>思路</p>
<p>1.将要摇的部分放入div（父元素）中，让div（父元素）动</p>
<p>2.设两个按钮：摇起来、停止</p>
<p>3.该部分原本以文档流方式在左上，接着以脱离文档流方式移动位置</p>
<p>脱离文档流：position:absolute;    //div的CSS样式</p>
<p>要想动起来：改left（横坐标x）、top（纵坐标y）值</p>
<p>要想动多次：隔几秒动一次——设定时器    //将js断言代码放入，合理调速度</p>
<p>横纵坐标不确定：给left、top都设随机数    //代码优化：设变量x、y，再赋值给left、top</p>
<p>4.停止：清除定时器函数，注意全局变量与局部变量</p>
<p>5.以编程规范编写代码。</p>
</blockquote>
<h4 id="一闪一闪亮晶晶"><a href="#一闪一闪亮晶晶" class="headerlink" title="一闪一闪亮晶晶"></a>一闪一闪亮晶晶</h4><blockquote>
<ol>
<li>点击“亮起来”按钮、给div创建元素：星星</li>
<li>位置：给left、top随机值</li>
<li>脱离文档流：position:absolute;</li>
<li>设定时器</li>
</ol>
</blockquote>
<h4 id="美女图片时钟"><a href="#美女图片时钟" class="headerlink" title="美女图片时钟"></a>美女图片时钟</h4><blockquote>
<ol>
<li>获取当前时间：时间对象</li>
<li>获取小时。注意&lt;10时，前面加个“0“，用三元操作符</li>
<li>获取秒。</li>
<li>按时间输出图片。输出时把要动态变化的部分用<strong>字符串拼接变量</strong>的方式拼接。</li>
<li>定时器：页面加载完后隔1秒才执行。要马上执行：把前面函数先声明，定时器代码执行前先执行一遍之前函数。</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>01-JavaScript基础</title>
    <url>/2020/03/29/01-JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="js遇到问题：用MDN（js官方文档）"><a href="#js遇到问题：用MDN（js官方文档）" class="headerlink" title="js遇到问题：用MDN（js官方文档）"></a>js遇到问题：用MDN（js官方文档）</h2><p>MDN——在线帮助文档</p>
<p>W3C——离线帮助文档</p>
<p>参考手册——离线</p>
<a id="more"></a>

<p>ctrl+鼠标左键    转到定义</p>
<p>百度、谷歌，多对比。</p>
<p>找错：用console.log(“哈哈”);在事件内运行，若不行，说明事件没执行，再将这代码放到上一层，上层不行，说明上层不行，再放上上层…直到行了,说明其下层代码没执行，检查下层代码。（若循环不行，输出该循环元素，若为空，说明上面有错，若上面输出哈哈还是不成功，放到循环内、事件内看看哪错了。）</p>
<h2 id="调试js代码：断点调试"><a href="#调试js代码：断点调试" class="headerlink" title="调试js代码：断点调试"></a>调试js代码：断点调试</h2><ul>
<li>过去调试JavaScript的方式<ul>
<li>alert()</li>
<li>console.log()</li>
</ul>
</li>
<li>断点调试</li>
<li>端点：让程序中断在需要的<strong>地方</strong>。从而方便其分析。</li>
<li>调试：为了找代码的错误和问题所在</li>
</ul>
<blockquote>
<p>断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。</p>
</blockquote>
<ul>
<li>调试步骤</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">写代码-&gt;打开浏览器-&gt;F12（开发人员工具）-&gt;Sources-&gt;双击文件-&gt;（加断点）在某一行代码前面点击一下。再刷新，让该行代码重新执行</span><br></pre></td></tr></table></figure>

<ul>
<li>调试中的相关操作</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。可添加、删除值。</span><br><span class="line">F10: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。</span><br><span class="line">F8：跳到下一个断点处，如果后面没有断点了，则程序执行结束。</span><br><span class="line">F5：刷新页面</span><br></pre></td></tr></table></figure>

<p>tips: <strong><em>监视变量，不要监视表达式，因为监视了表达式，那么这个表达式也会执行。</em></strong></p>
<h1 id="js基础"><a href="#js基础" class="headerlink" title="js基础"></a>js基础</h1><p>学习：</p>
<p>1.模仿。</p>
<p>2.能自己写。</p>
<p>3.能把大概意思说出来。</p>
<p>4.还能给别人说清楚。</p>
<h2 id="js分三个部分："><a href="#js分三个部分：" class="headerlink" title="js分三个部分："></a>js分三个部分：</h2><p>①ECMAScript标准：JS的基本语法</p>
<p>②DOM：Document Object Model文档对象模型。操作页面的元素</p>
<p>③BOM:Brower Object Model浏览器对象模型。操作的是浏览器</p>
<h2 id="js代码的注意问题："><a href="#js代码的注意问题：" class="headerlink" title="js代码的注意问题："></a>js代码的注意问题：</h2><p>1.一对script标签中，js代码有错误，则该代码后面的js代码不会执行</p>
<p>2.若前面的script标签有错误，不会影响后面的script标签</p>
<p>3.建议：script标签放在body标签中的最后位置。</p>
<p>4.若script标签起引入js文件作用，则里面不要写任何js代码</p>
<p>5.js大小写敏感，字符串要加单或双引号。</p>
<p>6.注意：作为参数时，值要加双引号，变量不需要。</p>
<p>7.什么时候用事件匿名函数或事件命名（自定义）函数？</p>
<p>如果是循环的方式添加事件，推荐用命名函数</p>
<p>如果不是循环方式添加事件，推荐使用匿名函数</p>
<h2 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h2><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	单行注释</span></span><br><span class="line"><span class="comment">/* */</span>、<span class="comment">/** */</span>	多行注释</span><br><span class="line"><span class="comment">/**+回车	函数注释</span></span><br><span class="line"><span class="comment">//end if、//end for	有多循环时注释</span></span><br></pre></td></tr></table></figure>

<h2 id="1-变量：存储单个数据的容器"><a href="#1-变量：存储单个数据的容器" class="headerlink" title="1.变量：存储单个数据的容器"></a>1.变量：存储单个数据的容器</h2><p>变量声明（有var 有变量名，没有值）</p>
<p><strong>变量初始化</strong>（有var 有变量名，<strong>有赋值</strong>），js一般直接初始化。</p>
<p>注意：变量名一般小写、驼峰法。</p>
<p><strong>应用：</strong></p>
<p>变量的交换（3种）</p>
<h2 id="2-js数据类型（原始6种-额外）"><a href="#2-js数据类型（原始6种-额外）" class="headerlink" title="2.js数据类型（原始6种+额外）"></a>2.js数据类型（原始6种+额外）</h2><p>1）原始属性类型：number、string、boolean、null、undefined、object</p>
<p>①可以再分成： </p>
<ul>
<li>基本类型（简单类型、值类型）：number、string、boolean。</li>
<li>复制类型（引用类型）：object。</li>
<li>空类型：undefined、null（无意义的）。</li>
</ul>
<p>②值类型的值在哪一块空间中存储？栈中存储</p>
<p>引用类型的值在哪一块空间中存储？<strong>对象在堆中存储，地址(引用)在栈中存储</strong>（栈中：放该对象所在空间的地址（也叫引用）。堆中：放该对象）</p>
<p>③值类型之间传递，传递的是值</p>
<p>​    引用类型之间传递的是地址（引用）</p>
<p>​    值类型作为函数的参数，传递的是值</p>
<p>​    引用类型作为函数的参数，传递的是地址（引用）。但注意隐式全局变量！！！</p>
<p>例子：</p>
<p>var num=10; var num2=num;//传递的值：是把num在栈中的值复制一份，拷贝到num2的栈中</p>
<p>function f1(x) {</p>
<p>​    x=100;</p>
<p>}</p>
<p>var num=10;</p>
<p>f1(num);</p>
<p>console.log(num);//10。传递的值：num=10-&gt;x=10-&gt;f1中x=100，所以x=10被100覆盖。num与x无关，不变。</p>
<p>var obj = {</p>
<p>​    name:”小明”</p>
<p>}；</p>
<p>function f2(obj){</p>
<p>​    obj.name=”小红”；</p>
<p>}</p>
<p>console.log（obj.name）;//小明</p>
<p>f2(obj);</p>
<p>console.log(obj.name);//小红。</p>
<p>分析：第倒三条语句：设obj栈中地址0x120,则堆中0x120处存name:”小明”-&gt;倒二：传递地址：把obj栈中地址传给obj2，从而指向name:”小明”，，但f2中obj2.name=”小红”；所以小明被小红覆盖了-&gt;所以最后obj、obj2的地址指向的都是name:”小红”。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">![<span class="number">1497497865969</span>](C:\Users\<span class="number">74143</span>\Desktop\<span class="number">1497497865969.</span>png)<span class="keyword">var</span> num1 = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">66</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">num, num1</span>) </span>&#123;</span><br><span class="line">  num = <span class="number">100</span>;</span><br><span class="line">  num1 = <span class="number">100</span>;</span><br><span class="line">  num2 = <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(num);<span class="comment">//100</span></span><br><span class="line">  <span class="built_in">console</span>.log(num1);<span class="comment">//100</span></span><br><span class="line">  <span class="built_in">console</span>.log(num2);<span class="comment">//100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1(num1, num2);</span><br><span class="line"><span class="built_in">console</span>.log(num1);<span class="comment">//55</span></span><br><span class="line"><span class="built_in">console</span>.log(num2);<span class="comment">//100</span></span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  person.name = <span class="string">"ls"</span>;</span><br><span class="line">  person = <span class="keyword">new</span> Person(<span class="string">"aa"</span>,<span class="number">18</span>,<span class="number">10</span>);<span class="comment">//开空间了，将person的地址换了，但p.name与person无关。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"zs"</span>,<span class="number">18</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.name);<span class="comment">//zs</span></span><br><span class="line">f1(p);</span><br><span class="line"><span class="built_in">console</span>.log(p.name);<span class="comment">//ls</span></span><br></pre></td></tr></table></figure>

<p><img src="C:%5CUsers%5C74143%5CDesktop%5C2019-06-10_203425.png" alt="2019-06-10_203425"></p>
<p>2）额外：function函数类型。</p>
<h3 id="啥时候是undefined："><a href="#啥时候是undefined：" class="headerlink" title="啥时候是undefined："></a>啥时候是undefined：</h3><p>变量声明了但没赋值。</p>
<p>函数没有返回值或明确的返回值（即return不跟内容），但在调用时接收了。</p>
<h3 id="获取数据类型"><a href="#获取数据类型" class="headerlink" title="获取数据类型"></a>获取数据类型</h3><p>typeof 变量名</p>
<p>typeof（变量名）</p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>1.其他类型转数字：（3种）</p>
<p>parseInt()    转整数，要求字符串中第一位就是整数</p>
<p>parseFloat()    转小数，同上</p>
<p>Number()    转数字，要求字符串里只有数字</p>
<p>2.其他类型转字符串类型（2种）</p>
<p>.toString()    当变量有意义（不为undefined或null）时用</p>
<p>String()        当变量有、没意义时都可用</p>
<p>3.其他类型转布尔类型</p>
<p>Boolean()    当变量无意义或为“0”时显示为false</p>
<h3 id="number类型"><a href="#number类型" class="headerlink" title="number类型"></a>number类型</h3><p>范围：最大值Number.MAX_VALUE</p>
<p>​            最小值Number.MIN-VALUE</p>
<p>注意：不要用小数去验证小数</p>
<p>​            表示八进制：以0开头</p>
<p>​            表示十六进制：以0x开头</p>
<h3 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h3><p>js中的字符串里有转义符，用\。</p>
<p>用+拼接时，只要有一个字符串，其他不管什么类型都是拼接成字符串。</p>
<h2 id="3-运算符的优先级"><a href="#3-运算符的优先级" class="headerlink" title="3.运算符的优先级"></a>3.运算符的优先级</h2><p>优先级从高到底<br>    1. ()  优先级最高<br>    2. 一元运算符  ++   –   !<br>    3. 算数运算符  先*  /  %   后 +   -<br>    4. 关系运算符  &gt;   &gt;=   &lt;   &lt;=<br>    5. 相等运算符   ==   !=    ===    !==<br>    6. 逻辑运算符 先&amp;&amp;   后||<br>    7. 赋值运算符</p>
<h2 id="4-js流程控制：代码的执行过程（3种）-第一个-要在if同行"><a href="#4-js流程控制：代码的执行过程（3种）-第一个-要在if同行" class="headerlink" title="4.js流程控制：代码的执行过程（3种）,第一个{要在if同行"></a>4.js流程控制：代码的执行过程（3种）,第一个{要在if同行</h2><p>顺序结构：从上到下，从左到右执行的顺序。</p>
<p>分支结构：if语句、if-else语句或三元表达式语句、if-else if-esle if…语句、switch-case语句（5种）</p>
<p>注意：前4种是对范围的判断，swith-case是对具体值的判断。</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 条件表达式 */</span>) &#123;</span><br><span class="line">  <span class="comment">// 执行语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 条件表达式 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 否则执行语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3.</span>可写多个<span class="keyword">else</span> <span class="keyword">if</span>，具体看需求</span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 条件1 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="comment">/* 条件2 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="comment">/* 条件3 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 最后默认执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>循环结构：while循环、do-while循环、for循环（可遍历数组）、for-in循环（用来遍历对象）。计数器要写{}里。知道了循环的次数，推荐使用for循环.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">var <span class="built_in">i</span> =  ；计数器，可省略</span><br><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line">    要执行的代码块，循环体</span><br><span class="line">    计数器，可省略，如<span class="built_in">i</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>continue:立即跳出当前循环，继续下一次循环（for跳到i++的地方、while跳到条件）</p>
<p>break:立即跳出整个循环（直接跳到循环的大括号）</p>
<p>以上两关键字在嵌套循环中，都只能跳出它们所在的那一层循环</p>
<p>若循环多，就添加注释end if、end for</p>
<h2 id="5-数组：存储多个数据的容器、一组有序的数据"><a href="#5-数组：存储多个数据的容器、一组有序的数据" class="headerlink" title="5.数组：存储多个数据的容器、一组有序的数据"></a>5.数组：存储多个数据的容器、一组有序的数据</h2><p>作用：可以一次性存储多个数据。</p>
<p>显示：直接输出数组名，就可显示数组的数据。</p>
<h3 id="定义：（2种）"><a href="#定义：（2种）" class="headerlink" title="定义：（2种）"></a>定义：（2种）</h3><p>1.通过<strong>构造函数</strong> <strong>创建</strong>  数组</p>
<p>语法：    var 数组名 = new Array();//空数组。</p>
<p>​                var 数组名 = new Array(一个数字);//数组元素值为undefined的<strong>长度</strong>为该数的数组。</p>
<p>​                var 数组名 = new Array(多个值)；//数组元素<strong>有这些值</strong>的数组。值用，隔开</p>
<p>说明：Array()构造函数、new创建、参数：长度或值（值用，隔开）</p>
<p>2.通过<strong>字面量</strong>创建数组,更简单,不用new</p>
<p>var 数组名 = [];//空数组</p>
<p>var 数组名 = [多个值];//用,隔开</p>
<h3 id="设置某位置值：数组名-下标-值；"><a href="#设置某位置值：数组名-下标-值；" class="headerlink" title="设置某位置值：数组名[下标]=值；"></a>设置某位置值：数组名[下标]=值；</h3><h3 id="获取某位置值：var-变量名-数组名-下标-console-log-变量名"><a href="#获取某位置值：var-变量名-数组名-下标-console-log-变量名" class="headerlink" title="获取某位置值：var 变量名 = 数组名[下标];console.log(变量名);"></a>获取某位置值：var 变量名 = 数组名[下标];console.log(变量名);</h3><h3 id="遍历数组-将数组每个元素都显示出来-方法-用for循环、length设置循环次数"><a href="#遍历数组-将数组每个元素都显示出来-方法-用for循环、length设置循环次数" class="headerlink" title="遍历数组:将数组每个元素都显示出来.方法:用for循环、length设置循环次数"></a>遍历数组:将数组每个元素都显示出来.方法:用for循环、length设置循环次数</h3><h3 id="冒泡排序：把所有数据按一定顺序进行排列（从小到大，从大到小）"><a href="#冒泡排序：把所有数据按一定顺序进行排列（从小到大，从大到小）" class="headerlink" title="冒泡排序：把所有数据按一定顺序进行排列（从小到大，从大到小）"></a>冒泡排序：把所有数据按一定顺序进行排列（从小到大，从大到小）</h3><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><p>1.将数组元素<strong>放到另一个数组中</strong>：数组声明时为空数组，则当新数组放元素，要：newArr[<strong>newArr.length</strong>] = Arr[i];使动态变长。</p>
<p>2.反转数组：第一个循环：控制交换次数</p>
<p>​                        再用交换变量方法</p>
<h2 id="6-函数："><a href="#6-函数：" class="headerlink" title="6.函数："></a>6.函数：</h2><p>含义：把一坨<strong>重复的</strong>代码<strong>封装</strong>，在需要时调用。</p>
<p>作用：代码的重用。 </p>
<h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>function 函数名() {</p>
<p>​    函数体，即一坨重复的代码</p>
<p>}</p>
<h3 id="调用：函数名"><a href="#调用：函数名" class="headerlink" title="调用：函数名();"></a>调用：函数名();</h3><h3 id="js函数参数：函数在调用时用户传进来的值操作。js参数不写数据类型！"><a href="#js函数参数：函数在调用时用户传进来的值操作。js参数不写数据类型！" class="headerlink" title="js函数参数：函数在调用时用户传进来的值操作。js参数不写数据类型！"></a>js函数参数：函数在调用时用户传进来的值操作。js参数不写数据类型！</h3><p>形参：函数在<strong>定义</strong>时小括号里的变量。</p>
<p>实参：函数在<strong>调用</strong>时小括号里传入的变量或值。</p>
<p>形参个数和实参个数可以不一致。</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>1.一个函数最好就一个功能。想要输出，一般是：在函数中用return来返回值。直接输出调用函数或函数调用时给调用一个变量名，再输出该变量。</p>
<p>2.重名函数会覆盖之前的函数。前面对函数的调用也会改变。</p>
<p>3.return会阻止所在函数体后面代码的执行。</p>
<p>4.若输出函数名，则输出的是该函数的定义。</p>
<p>5.想要返回多个值，用return去返回一个数组。</p>
<h3 id="arguments伪数组的使用"><a href="#arguments伪数组的使用" class="headerlink" title="arguments伪数组的使用"></a>arguments伪数组的使用</h3><p>针对情况：定义一个函数，不确定用户传了几个参数时。</p>
<p>方法：使用arguments对象可以获取传入的每个参数的值。（同样用.length方法可以获得长度）</p>
<h3 id="函数的其他定义方式"><a href="#函数的其他定义方式" class="headerlink" title="函数的其他定义方式:"></a>函数的其他定义方式:</h3><h4 id="1-命名函数"><a href="#1-命名函数" class="headerlink" title="1.命名函数:"></a>1.命名函数:</h4><p>有函数名的函数，定义如上</p>
<h4 id="2-匿名函数"><a href="#2-匿名函数" class="headerlink" title="2.匿名函数:"></a>2.匿名函数:</h4><p><strong>没函数名</strong>的函数，匿名函数不能直接调用。</p>
<p>定义：用函数表达式，var <strong>变量名</strong>=匿名函数 <strong>;</strong>。如var f4 = function () {} <strong>;</strong></p>
<p>​    注意：函数表达式要加；</p>
<p>​                匿名函数的变量名重名不影响之前的。</p>
<p>调用：变量名();    因为变量存储了一个函数，则该变量相当于一个函数，可以加小括号调用。</p>
<h5 id="自调用函数：一次性函数"><a href="#自调用函数：一次性函数" class="headerlink" title="自调用函数：一次性函数"></a>自调用函数：一次性函数</h5><p>声明的同时直接加括号调用。不用起名</p>
<p>针对情况：防止有命名，发生冲突</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">(<span class="name">function</span> () &#123;</span><br><span class="line">  alert(<span class="number">123</span>)<span class="comment">;</span></span><br><span class="line">&#125;)()<span class="comment">;//将f1()的变量名f1直接用函数代码代替</span></span><br></pre></td></tr></table></figure>

<h3 id="函数可作为参数使用，叫回调函数"><a href="#函数可作为参数使用，叫回调函数" class="headerlink" title="函数可作为参数使用，叫回调函数"></a>函数可作为参数使用，叫回调函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">如 <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"你好"</span>);fn();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">"世界"</span>);&#125;</span><br><span class="line">   f1(f2);</span><br></pre></td></tr></table></figure>

<h3 id="函数可作为返回值使用，不用加括号"><a href="#函数可作为返回值使用，不用加括号" class="headerlink" title="函数可作为返回值使用，不用加括号"></a>函数可作为返回值使用，不用加括号</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">(b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    alert(a+b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">15</span>)();</span><br></pre></td></tr></table></figure>

<h3 id="函数和构造函数的区别：后者首字母也大写，作用是创建对象。"><a href="#函数和构造函数的区别：后者首字母也大写，作用是创建对象。" class="headerlink" title="函数和构造函数的区别：后者首字母也大写，作用是创建对象。"></a>函数和构造函数的区别：后者首字母也大写，作用是创建对象。</h3><h2 id="7-作用域"><a href="#7-作用域" class="headerlink" title="7.作用域"></a>7.作用域</h2><p>全局变量：使用var声明的变量、除了函数以外其他任何位置定义的变量都是全局变量。如果页面不关闭就不会释放，会占空间、消耗内存。</p>
<p>全局作用域：可在页面的任何位置使用</p>
<p>局部变量：在函数内部定义的变量。函数结束后就会被释放。</p>
<p>局部作用域：函数外部不能使用</p>
<p>隐式全局变量：不加var的变量，不推荐使用</p>
<p>js没有块级作用域一说，只有函数除外：一对大括号里使用的变量，其使用范围是该大括号内。</p>
<p>扩展：delete    删除变量。但全局变量（<strong>使用var定义的变量</strong>）不能被删。</p>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>将所有的作用域按0-n级作用域列出来，可以有一个结构: 函数内指向函数外的链式结构（该链式结构是用来寻找变量的），就称作用域链。</p>
<p>会先找最近的作用域的变量。</p>
<h2 id="8-预解析：提前解析代码"><a href="#8-预解析：提前解析代码" class="headerlink" title="8.预解析：提前解析代码"></a>8.预解析：提前解析代码</h2><p>（js是解释语言，即遇到一行代码就解释一行代码，再执行一行代码。）</p>
<p>含义：<strong>在解析代码之前</strong>，会先把变量、函数的声明（定义）提前，提前到当前所在作用域<strong>中</strong>的 最上面！不会提升赋值、调用。</p>
<p>注意：预解析会分段（多对<strong>script标签中</strong>函数重名，预解析时不会冲突）。变量的声明会先找。</p>
<h4 id="特别注意："><a href="#特别注意：" class="headerlink" title="特别注意："></a>特别注意：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">（<span class="keyword">var</span> f1;）</span><br><span class="line">f1();<span class="comment">//报错！</span></span><br><span class="line"><span class="keyword">var</span> f1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//假象</span></span><br><span class="line">	<span class="built_in">console</span>.log(a);</span><br><span class="line">	<span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="9-对象（一种无序属性的集合）"><a href="#9-对象（一种无序属性的集合）" class="headerlink" title="9.对象（一种无序属性的集合）"></a>9.对象（一种无序属性的集合）</h2><h3 id="了解："><a href="#了解：" class="headerlink" title="了解："></a>了解：</h3><p>1.编程思想：把一些做事的经验融入到程序中。</p>
<p>面向过程：凡事都要亲力亲为，每件事的具体过程都要知道，注重的是过程。</p>
<p>面向对象：只要 根据需求找对象，所有事都用对象来做，注重的是结果。</p>
<p>面向对象特征：封装、继承、多态（抽象性）</p>
<p>2.js不是面向对象语言，js特性只有封装。但是可以<strong>模拟</strong>面向对象的思想。</p>
<p>js是一门<strong>基于</strong>对象的语言，js特征只有封装功能。但js能找对象、创建对象。</p>
<p>3.实例（动态）对象:通过构造函数创建出来，实例化的对象。（创建：用new）</p>
<p>​    实例方法必须通过实例对象调用。</p>
<p>静态对象：不需要创建，直接就是一个对象，方法（静态方法）直接通过这个对象名字调用。</p>
<p>​    静态方法必须通过大写的对象调用。</p>
<h3 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h3><p><strong>找对象</strong>（先了解什么是对象）-&gt;分析对象有什么特点：特征、行为-&gt;总结什么是对象-&gt;没有对象，就创建对象。</p>
<p>1.什么是对象：看得见，摸得到，具体特指的某<strong>个</strong>事物</p>
<p>2.找对象：基于上面概念，再通过<strong>描述</strong>找对象，再通过<strong>文字描述</strong>找对象</p>
<p>3.分析该对象有什么特点（特征、行为）</p>
<p>​    特征：属性。    行为：方法。</p>
<h3 id="创建对象：（4种），也叫实例化对象"><a href="#创建对象：（4种），也叫实例化对象" class="headerlink" title="创建对象：（4种），也叫实例化对象"></a>创建对象：（4种），也叫实例化对象</h3><p>1.调用<strong>系统的构造函数</strong>创建（一个）对象。</p>
<p>​    <strong>var 变量名 = new Object();</strong>    //Object是构造函数</p>
<p>​    //对象有特点（属性）、行为（方法）</p>
<p>​    //如何添加属性？</p>
<p>​    变量名.属性名=值;    </p>
<p>​    //如何添加方法？</p>
<p>​    变量名.方法名=函数;</p>
<p>​    //如何获取属性？</p>
<p>​    console.log(变量名.属性名);</p>
<p>​    //如何调用方法 ？</p>
<p>​    变量名.方法名()；</p>
<p>​    //在当前对象的当前属性、方法中，可以使用this代表当前对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  person.name = <span class="string">'lisa'</span>;</span><br><span class="line">  person.age = <span class="number">35</span>;</span><br><span class="line">  person.job = <span class="string">'actor'</span>;</span><br><span class="line">  person.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello,everyBody'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.<strong>工厂模式</strong>创建（一个及以上）对象（结合第一种和需求通过）。</p>
<p>可一次性创建多个对象。</p>
<p>把创建对象的代码封装在一个函数中。</p>
<p>function createPerson(<strong>name</strong>, <strong>age</strong>, <strong>job</strong>) {<br>  var person = new Object();<br>  person.name = <strong>name</strong>;<br>  person.age = <strong>age</strong>;<br>  person.job = <strong>job</strong>;<br>  person.sayHi = function(){<br>    console.log(‘Hello,everyBody’);<br>  }<br>  <strong>return</strong> person;<br>}<br>var p1 = createPerson(‘张三’, 22, ‘actor’);    </p>
<p>3.<strong>自定义构造函数</strong>创建（一个及多个）对象。</p>
<p>function <strong>Person</strong>(name,age,job){</p>
<p>//注意！不用设return。<br>  this.name = name;<br>  this.age = age;<br>  this.job = job;<br>  this.sayHi = function(){<br>      console.log(‘Hello,everyBody’);<br>  }<br>}<br>var p1 = new <strong>Person</strong>(‘张三’, 22, ‘actor’);//此时系统做了4件事：（1）在内存中开辟（申请一个空闲的空间）空间，存储创建的新的对象（2）把this设置为当前对象（3）设置对象的属性和方法的值（4）把this这个对象返回。</p>
<p>4.<strong>字面量</strong>方式创建对象</p>
<p>缺点：一次性的对象。</p>
<p>普通写法：</p>
<p>var 变量名 = <strong>{}</strong>;//空对象。添加，调用属性、方法同第一种。</p>
<p>优化后写法：</p>
<p>var 变量名 = {</p>
<p>​    //添加属性</p>
<p>​    属性名：值，</p>
<p>​    //添加方法</p>
<p>​    方法名:函数</p>
<p>};</p>
<p>调用方法同第一种。修改内容，同第一种。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'zs'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sex: <span class="literal">true</span>,</span><br><span class="line">  sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="new的执行过程："><a href="#new的执行过程：" class="headerlink" title="new的执行过程："></a>new的执行过程：</h3><p>（1）在内存中开辟（申请一个空闲的空间）空间，存储创建的新的对象（2）把this设置为当前对象（3）设置对象的属性和方法的值（4）把this这个对象返回。</p>
<h3 id="总结对象"><a href="#总结对象" class="headerlink" title="总结对象"></a>总结对象</h3><h3 id="json对象：其数据一般是键值对"><a href="#json对象：其数据一般是键值对" class="headerlink" title="json对象：其数据一般是键值对"></a>json对象：其数据一般是键值对</h3><p>json对象的数据都是成对的，一般json格式数据的值都用<strong>双引号</strong>括起来。键可不用。</p>
<p>目的：方便传值。把多个对象存到数组里，再遍历数组，里层再遍历对象来传值。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var json</span> = &#123;</span><br><span class="line">	<span class="string">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">	<span class="string">"age"</span>:<span class="string">"10"</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">var objs=[pho<span class="symbol">ne1</span>,pho<span class="symbol">ne2</span>,pho<span class="symbol">ne3</span>];</span><br><span class="line">for<span class="comment">(var i=0;i&lt;objs.length;i++)</span>&#123;</span><br><span class="line">	var obj = objs[i];</span><br><span class="line">	for<span class="comment">(var key in obj)</span>&#123;</span><br><span class="line">		......</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pho<span class="symbol">ne1</span> = &#123;<span class="string">""</span>:<span class="string">""</span>,<span class="string">""</span>:<span class="string">""</span>,<span class="string">""</span>:<span class="string">""</span>&#125;;</span><br><span class="line">pho<span class="symbol">ne2</span> =&#123;&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="设置和访问（调用）属性、方法的两种方法"><a href="#设置和访问（调用）属性、方法的两种方法" class="headerlink" title="设置和访问（调用）属性、方法的两种方法"></a>设置和访问（调用）属性、方法的两种方法</h3><p>点语法：    变量名.属性名=值;设置属性</p>
<p>​                    变量名.方法名=函数;//设置方法</p>
<p>​                    console.log(变量名.属性名);//调用属性</p>
<p>​                    变量名.方法名();//调用方法</p>
<p>双引号法：变量名[“属性名”]=值;//设置属性</p>
<p>​                    变量名[“方法名”]=函数;//设置方法</p>
<p>​                    console.log(变量名[“属性名”]);//调用属性</p>
<p>​                    变量名[“方法名”]（）;//调用方法</p>
<p>也可以将属性名、方法名赋值给变量，通过对象调用            </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">key</span> = <span class="string">"name"</span>;</span><br><span class="line">console.<span class="built_in">log</span>(json[<span class="built_in">key</span>]);//因为<span class="built_in">key</span>是变量，不是字符串，不加双引号</span><br></pre></td></tr></table></figure>

<h3 id="遍历对象：通过for-in循环"><a href="#遍历对象：通过for-in循环" class="headerlink" title="遍历对象：通过for in循环"></a>遍历对象：通过for in循环</h3><p>不能通过for循环遍历。因为无序。</p>
<p>可以通过for in循环</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(var <span class="built_in">key</span> in json)&#123;<span class="comment">//定义个变量，存的是该对象的所有属性名</span></span><br><span class="line">	console.<span class="built_in">log</span>(<span class="built_in">key</span>);<span class="comment">//输出json对象的属性名</span></span><br><span class="line">	console.<span class="built_in">log</span>(json[<span class="built_in">key</span>]);<span class="comment">//通过变量调用属性。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内置对象（不懂去查手册）"><a href="#内置对象（不懂去查手册）" class="headerlink" title="内置对象（不懂去查手册）"></a>内置对象（不懂去查手册）</h3><h4 id="js中有四类对象："><a href="#js中有四类对象：" class="headerlink" title="js中有四类对象："></a>js中有四类对象：</h4><p>1.内置对象——js系统自带的对象</p>
<p>2.自定义对象——自定义构造函数</p>
<p>3.浏览器对象——BOM</p>
<p>4.文档对象——DOM：通过DOM方式获取到的元素</p>
<h4 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h4><p>​    不是函数对象（js高级中讲），即是对象但不是函数。</p>
<p>​    不是构造器（构造函数），其属性、方法都是静态的：直接通过对象名. 出来的。</p>
<p>​    常用方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.PI						<span class="comment">// 圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.random()				<span class="comment">// 生成随机数，一般~*n+1,才能取大值</span></span><br><span class="line"><span class="built_in">Math</span>.floor()/<span class="built_in">Math</span>.ceil()	 <span class="comment">// 向下取整/向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.round()				<span class="comment">// 取整，四舍五入</span></span><br><span class="line"><span class="built_in">Math</span>.abs()					<span class="comment">// 绝对值</span></span><br><span class="line"><span class="built_in">Math</span>.max()/<span class="built_in">Math</span>.min()		 <span class="comment">// 求最大和最小值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.sin()/<span class="built_in">Math</span>.cos()		 <span class="comment">// 正弦/余弦</span></span><br><span class="line"><span class="built_in">Math</span>.power()/<span class="built_in">Math</span>.sqrt()	 <span class="comment">// 求指数次幂/求平方根</span></span><br></pre></td></tr></table></figure>

<h4 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h4><p>创建 <code>Date</code> 实例用来处理日期和时间。</p>
<p>常用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>实例化对象：</span><br><span class="line"><span class="keyword">var</span> dt=<span class="keyword">new</span> <span class="built_in">Date</span>();	   <span class="comment">//当前的服务器日期时间</span></span><br><span class="line"><span class="keyword">var</span> dt=<span class="keyword">new</span> <span class="built_in">Date</span>(字符串);	  <span class="comment">//传入的时间（年月日用-或/隔开）</span></span><br><span class="line"><span class="keyword">var</span> dt=<span class="built_in">Date</span>.now();	<span class="comment">//当前服务器毫秒时间（从1970年1月1日到现在的毫秒数）</span></span><br><span class="line"><span class="number">2.</span>实例化方法：</span><br><span class="line"><span class="keyword">var</span> dt=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(dt.getFullYear());	<span class="comment">//获取年份	</span></span><br><span class="line"><span class="built_in">console</span>.log(dt.getMonth());	<span class="comment">//获取月份，从0开始的，真实月份要+1</span></span><br><span class="line"><span class="built_in">console</span>.log(dt.getDate());	<span class="comment">//获取日期</span></span><br><span class="line"><span class="built_in">console</span>.log(dt.getHours());	<span class="comment">//获取小时</span></span><br><span class="line"><span class="built_in">console</span>.log(dt.getMinutes());	<span class="comment">//获取分钟</span></span><br><span class="line"><span class="built_in">console</span>.log(dt.getSecond());	<span class="comment">//获取秒</span></span><br><span class="line"><span class="built_in">console</span>.log(dt.getDay());	<span class="comment">//获取星期，0是星期天，其他正常。</span></span><br><span class="line"><span class="number">2.1</span> 格式化方法：</span><br><span class="line">toString()		<span class="comment">// 转换成字符串</span></span><br><span class="line">valueOf()		<span class="comment">// 获取毫秒值</span></span><br><span class="line"><span class="comment">// 下面格式化日期的方法，在不同浏览器可能表现不一致，一般不用</span></span><br><span class="line">toDateString()	<span class="comment">//英文日期</span></span><br><span class="line">toTimeString()	<span class="comment">//数字格式日期</span></span><br><span class="line">toLocaleDateString()	<span class="comment">//小时分钟秒，英文的</span></span><br><span class="line">toLocaleTimeString()	<span class="comment">//小时分钟秒</span></span><br><span class="line"><span class="comment">// 不支持HTML5的浏览器，可以用下面这种方式</span></span><br><span class="line"><span class="keyword">var</span> now = + <span class="keyword">new</span> <span class="built_in">Date</span>();			<span class="comment">// 调用 Date对象的valueOf()</span></span><br></pre></td></tr></table></figure>

<p>例子：格式化日期和时间</p>
<p>​            把毫秒值转换为对象： var dt=new Date(dt.valueOf());</p>
<h4 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h4><p>​    也是字符串类型，但是引用类型。</p>
<p>​    是构造函数</p>
<p>​    字符串可以看成是字符组成的数组，可通过for循环进行遍历。</p>
<p>​    字符串具有不可变性。字符串的值是不能改变（字符串不可以通过索引来改变字符串中某个值。）而字符串的值之所以看起来是改变的,那是因为指向改变了,并不是真的值改变了。</p>
<p>字符串的常用属性:</p>
<p>​     .length——&gt;字符串的长度</p>
<p>​    .charAt(索引),返回值是指定索引位置的字符串,超出索引,结果是空字符串</p>
<p>​    .fromCharCode(数字值,可以是多个参数),返回的是ASCII码对应的值</p>
<p>​     .concat(字符串1,字符串2,…);返回的是拼接之后的新的字符串</p>
<p>​      .indexOf(要找的字符串,从某个位置开始的索引);返回的是这个字符串的索引值,没找到则返回-1</p>
<p>​      .lastIndexOf(要找的字符串);从后向前找,但是索引仍然是从左向右的方式,找不到则返回-1</p>
<p>​     .replace(“原来的字符串”,”新的字符串”);用来替换字符串的</p>
<p>​     .slice(开始的索引,结束的索引); 从索引5的位置开始提取,到索引为10的前一个结束,没有10，并返回这个提取后的字符串</p>
<p>​      .split(“要干掉的字符串”,切割后留下的个数);切割字符串</p>
<p>​     .substr(开始的位置,个数);返回的是截取后的新的字符串</p>
<p>​      .substring(开始的索引,结束的索引),返回截取后的字符串,不包含结束的索引的字符串</p>
<p>​    .toLocaleLowerCase();转小写</p>
<p>​    .toLowerCase();转小写</p>
<p>​    .toLocaleUpperCase()转大写</p>
<p>​     .toUpperCase();转大写</p>
<p>​    .trim();干掉字符串两端的空格</p>
<h4 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h4><p>​     Array.isArray(对象)—-&gt;判断这个对象是不是数组<br>​     instanceof关键字<br>​      .concat(数组,数组,数组,…) 组合一个新的数组<br>​      .every(函数)–返回值是布尔类型,函数作为参数使用,函数中有三个参数,第一个参数是元素的值，第二个参数是索引值,第三个参数是原来的数组(没用)<br>​      如果这个数组中的每个元素的值都符合条件,最后才返回的是true<br>​<br>​     .filter(函数);返回的是数组中每一个元素都复合条件的元素,组成了一个新的数组<br>​<br>​     .push(值);—&gt;把值追加到数组中,加到最后了—返回值也是追加数据之后的数组长度<br>​      .pop();—&gt;删除数组中最后一个元素,返回值就是删除的这个值<br>​      .shift();—&gt;删除数组中第一个元素,返回值就是删除的这个值<br>​     .unshift();—&gt;向数组的第一个元素前面插入一个新的元素,—-返回值是插入后的程度<br>​      .forEach(函数)方法—遍历数组用—相当于for循环。ECMA5的，要想用，到MDN找兼容旧环境把固定代码放在一个js文件中或调用之前。<br>​     .indexOf(元素值);返回的是索引,没有则是-1<br>​     .join(“字符串”);—-往字符串中间返回的是一个字符串<br>​      .map(函数);—&gt;数组中的每个元素都要执行这个函数,把执行后的结果重新的全部的放在一个新的数组中<br>​      .reverse();—–&gt;反转数组<br>​     .sort();—排序的,可能不稳定,如果不稳定,请写MDN中的那个固定的代码<br>​      .arr.slice(开始的索引,结束的索引);把截取的数组的值放在一个新的数组中,但是不包含结束的索引对应的元素值<br>​      .splice(开始的位置,要删除的个数,替换的元素的值);一般是用于删除数组中的元素,或者是替换元素,或者是插入元素</p>
<h4 id="Objct对象（js高级有意义）"><a href="#Objct对象（js高级有意义）" class="headerlink" title="Objct对象（js高级有意义）"></a>Objct对象（js高级有意义）</h4><h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><p><strong>普通变量</strong>不能直接调用属性、方法</p>
<p><strong>对象</strong>可以直接调用属性、方法</p>
<p>基本包装类型：本身是基本类型，但在执行代码过程中，若基本类型变量调用了属性、方法，那么该类型就不再是基本类型而是基本包装类型，这个变量也不是普通变量了，而是基本包装类型对象。string、number、boolean</p>
<h3 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h3><p>1.如果是一个对象&amp;&amp;true，那么结果是true</p>
<p>如果是一个true&amp;&amp;对象，那么结果是对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> result=<span class="literal">true</span>&amp;&amp;flag;<span class="comment">//Boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<p>2.</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2=<span class="built_in">Number</span>(<span class="string">"10"</span>);	<span class="comment">//转换，没有new</span></span><br><span class="line"><span class="keyword">var</span> num3=<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"10"</span>)	<span class="comment">//基本包装类型</span></span><br></pre></td></tr></table></figure>

<h1 id="WEB-API"><a href="#WEB-API" class="headerlink" title="WEB API"></a>WEB API</h1><p>API（应用程序编程接口）：就是系统提供给我们的方法（函数），（相当于程序给的后门，不用知道主程序是怎么开发的，你只要调用这个接口就能用了）。</p>
<p>WEB API： 浏览器提供的方法。</p>
<h2 id="DOM-文档对象模型-，操作页面元素的"><a href="#DOM-文档对象模型-，操作页面元素的" class="headerlink" title="DOM(文档对象模型)，操作页面元素的"></a>DOM(文档对象模型)，操作页面元素的</h2><p>先理解</p>
<p>（文档：把一个html文件看成是一个文档，由于万物皆对象，所以把这个文档看成是一个对象。</p>
<p>XML文件也可以看成是一个文档。）</p>
<p>（HTML：展示数据的。</p>
<p>XML:存储数据的。</p>
<p>目的：不用任何软件就可以打开。 </p>
<p>内容：没有系统标签，标签都自定义、但要遵循规范：</p>
<p>加个固定的xml版本标签:<?xml ...?></p>
<p>加个自定义根标签，根标签里放其他标签）</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>文档（document）：一个页面就是一个文档。</p>
<p>元素（element）：页面中所有的标签。标签可以看成元素，<strong>元素可以看成是对象</strong>。</p>
<p>节点（node）：页面中所有的内容。（内容有：标签、属性、文本（文本包括文字、换行、空格、回车等））</p>
<p>根元素：html标签</p>
<p>（又页面就是文档，文档中有根元素：html</p>
<p>html中有其它标签）</p>
<p>顶级对象：document</p>
<h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><p>由文档及文档中的所有元素（标签）组成的一个树型结构图，叫DOM树。</p>
<h3 id="（重点记忆）DOM经常进行的操作"><a href="#（重点记忆）DOM经常进行的操作" class="headerlink" title="（重点记忆）DOM经常进行的操作"></a>（重点记忆）DOM经常进行的操作</h3><ul>
<li><p>获取（页面）元素</p>
</li>
<li><p>动态创建元素</p>
</li>
<li><p>对元素进行操作(设置其属性或调用其方法)</p>
</li>
<li><p>事件(什么时机做相应的操作)：就是一件事，有触发和响应、事件源、事件名。</p>
<p>如按钮被点击，弹出对话框：</p>
<p>按钮——事件源</p>
<p>点击——事件名，事件是个行为（函数、方法）</p>
<p>被点了——触发了</p>
<p>弹框了——响应</p>
</li>
</ul>
<p>注意：js嵌入到html中，不方便维护</p>
<p>​            应把js代码和html分离。</p>
<h2 id="DOM操作（页面元素的）步骤："><a href="#DOM操作（页面元素的）步骤：" class="headerlink" title="DOM操作（页面元素的）步骤："></a>DOM操作（页面元素的）步骤：</h2><p>1.获取元素（标签、事件源）。（可以不给获取到的元素设变量名：当获取请求少时。设了变量名时，下面的处理函数里可以用this代替变量名，表示当前的元素对象）</p>
<p>2.为该元素注册（添加）事件：元素.事件名</p>
<p>3.为事件添加响应（事件处理函数，事件处理函数里写响应做的事）：</p>
<p>​        ①元素.事件名<strong>=函数名</strong> <strong>;</strong>    不能加括号。（不能=函数调        用，因为事件需要的是<strong>函数的代码</strong>，要触发事件才能调        用，否则打开页面直接就调用了。）在嵌入中就是事件名=“函数调用”；</p>
<p>​        缺点：函数名有冲突问题</p>
<p>​        ②优化版：</p>
<p>​        元素.事件名=匿名函数;    //匿名函数的函数名不会发生        冲突</p>
<p>4.在<strong>事件处理函数中</strong>设置<strong>页面中各元素</strong>的属性(可设置多个）。</p>
<p>（设置文本内容：</p>
<ul>
<li>innerHTML：它可以设置标签内容（包括文本内容、标签），有标签效果。推荐！！！</li>
<li>innerText：设置文本，没有标签效果（会把标签也当文本输出）且<strong>获取不了标签中的标签</strong>，还有兼容问题。不推荐！！！</li>
<li>表单文本内容：推荐用value设置！！！因为上面2个不会在控制台有显示数据</li>
</ul>
<p>样式属性名style。修改属性的属性可:元素.属性名.属性名</p>
<p>)</p>
<p>​    也是：元素.属性名=值;</p>
<p>​    （设置包括增删改查等操作。）</p>
<p>最终代码举例：</p>
<p>假设有btn、p原本内容为段落。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementByI(<span class="string">"btn"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>).innerText = 	<span class="string">"这是一个p"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>测试操作结果：2种s</p>
<p>1.看检查F12的element中有没有结果</p>
<p>2.看页面有没有效果</p>
<p>若不行，点开控制台查看错误。</p>
<h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>获取哪些元素（标签）：</span><br><span class="line">掌握</span><br><span class="line">	.getElementById()	<span class="comment">//根据id获取元素，返回一个元素对象</span></span><br><span class="line">	.getElementsByTagName()	<span class="comment">//根据 标签名 获取同类元素，返回的是一个伪数组，里面保存了多个DOM对象。注意s。</span></span><br><span class="line">	.getElementsByTagName()[index]	<span class="comment">//获取第index个同类标签</span></span><br><span class="line">了解	都属于h5的</span><br><span class="line">	.getElementsByName()	<span class="comment">//根据 属性值 获取元素，返回一个伪数组。有的浏览器不支持</span></span><br><span class="line">	.getElementsByClassName()<span class="comment">//根据 类样式的名字 获取元素，返回一个伪数组。</span></span><br><span class="line">	.querySelector()	<span class="comment">//根据 选择器 获取一个元素。因为选择器有很多，只记三个：id、标签、类</span></span><br><span class="line">	.querySelectorAll()	<span class="comment">//根据选择器 获取 多个 元素，返回一个伪数组。</span></span><br><span class="line"><span class="number">2.</span>从哪获取：</span><br><span class="line">	<span class="built_in">document</span>	<span class="comment">//从文档中获取</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(父元素名)	<span class="comment">//从某元素（某块）中获取</span></span><br><span class="line"><span class="number">3.</span>注意</span><br><span class="line"><span class="comment">//给每个标签都设，用for循环遍历设置,把事件放里面。</span></span><br><span class="line"><span class="comment">//若用getElementsByTagName(),则不能直接元素.事件名=函数名、元素.属性=值，而要元素[index].事件名=函数名、元素[index].属性=值;因为返回的是伪数组。或用this.，但要注意this此时的值。</span></span><br><span class="line"><span class="comment">//若不想给同类标签同块中的一个标签设置，则用if筛选想给的或给不想的设id。</span></span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1.凡是css中这个属性是多个单词的写法,在js代码中DOM操作时,把-干掉,后面的单词的首字母大写即可.、</p>
<p>2.在js代码中DOM操作时，设置元素的类样式，不用class关键字，应该使用className</p>
<p>3.用类样式设置div的样式：把要设的一堆样式写在css中，DOM中直接赋给元素类名就好。不用一个一个设样式。超过3个样式时推荐用。</p>
<p>4.一般搜索框用得到焦点onfocus、失去焦点onblur事件</p>
<p>​            图片等用鼠标进入onmouseover、鼠标离开onmouseout事件</p>
<h3 id="innerTxt和innerContent的兼容问题"><a href="#innerTxt和innerContent的兼容问题" class="headerlink" title="innerTxt和innerContent的兼容问题"></a>innerTxt和innerContent的兼容问题</h3><p>innerTxt            //设置标签中间的内容，低版本火狐不支持</p>
<p>innerContent    //设置标签中间的内容，IE8不支持</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">解决方法——写兼容代码：</span><br><span class="line"><span class="comment">//如果这个属性在浏览器不支持，那么这个属性的类型是undefined</span></span><br><span class="line"><span class="comment">//换句话说，若想知道浏览器支不支持一个属性，那么就判断这个属性的类型是不是undefined</span></span><br><span class="line">代码：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setInnerText</span>(<span class="params">element,text</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//判断浏览器是否支持这个属性：innerText。如果不支持就返回另个属性,如果支持就按原来的。</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> element.innerText==<span class="string">"undefined"</span>)&#123;</span><br><span class="line">        element.innerContent=text;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        element.innerText=text;<span class="comment">//如果支持就按原来的。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInnerText</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> element.innerText==<span class="string">"undefined"</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> element.innerContent;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> element.innerText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="优化代码：把获取功能封装"><a href="#优化代码：把获取功能封装" class="headerlink" title="优化代码：把获取功能封装"></a>优化代码：把获取功能封装</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my$</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;<span class="comment">//封装完记得把该代码放到common.js中！</span></span><br><span class="line">my$(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.src=<span class="string">"images/1.jpg"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="元素的样式操作"><a href="#元素的样式操作" class="headerlink" title="元素的样式操作"></a>元素的样式操作</h3><p>元素.style.属性=值；</p>
<p>元素.className=值；</p>
<h3 id="排他功能"><a href="#排他功能" class="headerlink" title="排他功能"></a>排他功能</h3><p>在事件处理函数中：</p>
<p>先把所有同类标签变为默认的值（事件处理函数中设个for循环，循环里面放这个），</p>
<p>再把当前点击的标签设为响应后的（放在事件处理函数中的for循环外的下面）。</p>
<p><img src="C:%5CUsers%5C74143%5CDesktop%5C2019-06-11_182152.png" alt="2019-06-11_182152"></p>
<p>注意！：这里的<strong>this</strong>.value不能用btnObjs[j]代替</p>
<p>原因：for循环是在页面加载的时候，执行完毕了</p>
<p>​            事件是在触发时，执行的</p>
<p>​            导致了此时的j=btnObjs.length=6，因为伪数组中没有下标6的元素，若用会报错。且这里不是为了让i改变，而是让元素改变，所以用this。</p>
<h4 id="例子：Tab切换案例（重点，排他功能）"><a href="#例子：Tab切换案例（重点，排他功能）" class="headerlink" title="例子：Tab切换案例（重点，排他功能）"></a>例子：Tab切换案例（重点，排他功能）</h4><p>原理：排他功能（让所有同类标签隐藏，让一个显示）。保存Tab栏的索引，把索引给下面的内容栏，让对应索引的内容栏显示。</p>
<h2 id="案例（重点）"><a href="#案例（重点）" class="headerlink" title="案例（重点）"></a>案例（重点）</h2><h3 id="点击小图不跳转显示大图：2种"><a href="#点击小图不跳转显示大图：2种" class="headerlink" title="点击小图不跳转显示大图：2种"></a>点击小图不跳转显示大图：2种</h3><p>没超链接来切换图片</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"im"</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.src=<span class="string">"images/1.jpg"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击超链接切换图片</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a id=<span class="string">"ak"</span> href=<span class="string">"images/1.jpg"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1-small.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"im"</span>/&gt;</span></span>&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/点击图片，设置图片标签的src路径为超链接中大图的路径。</span></span><br><span class="line"><span class="regexp">    document.getElementById("im").onclick=function() &#123;</span></span><br><span class="line"><span class="regexp">    this.src=document.getElementById("ak").href;</span></span><br><span class="line"><span class="regexp"> return false;/</span><span class="regexp">/重点，缺了这个不能实现！！！原因：看下面</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="点击按钮时改变表单默认选项"><a href="#点击按钮时改变表单默认选项" class="headerlink" title="点击按钮时改变表单默认选项"></a>点击按钮时改变表单默认选项</h3><p>input中：<br>name、value都是要提交给后台的<br>name相同：设置为一组</p>
<p>value要不同：来区别。</p>
<p><strong>规律：</strong>在表单标签中，如果属性和值<strong>只有一个</strong>，且值是这个<strong>属性本身</strong>，那么在写js代码的DOM操作时，这个属性值是布尔类型就可以了。如input的checked=“checked”可以写成checked=true，优化代码。</p>
<h3 id="让一个按钮具备多个功能-如隐藏-显示"><a href="#让一个按钮具备多个功能-如隐藏-显示" class="headerlink" title="让一个按钮具备多个功能(如隐藏/显示)"></a>让一个按钮具备多个功能(如隐藏/显示)</h3><p>用if语句</p>
<h3 id="设置div样式优化案例"><a href="#设置div样式优化案例" class="headerlink" title="设置div样式优化案例:"></a>设置div样式优化案例:</h3><p>把要设的一堆样式写在css中，DOM中直接赋给元素类名就好。不用一个一个设样式。超过3个样式时推荐用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.cls</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">		dispaly：none；</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	my$(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		my$(<span class="string">"dv"</span>).className=<span class="string">"cls"</span></span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="网页开关灯（宣传节约电能用）"><a href="#网页开关灯（宣传节约电能用）" class="headerlink" title="网页开关灯（宣传节约电能用）"></a>网页开关灯（宣传节约电能用）</h3><p>点按钮时设document.body的背景颜色为黑色，按钮值可以为开/关灯 </p>
<h3 id="阻止超链接默认跳转（return-false-）"><a href="#阻止超链接默认跳转（return-false-）" class="headerlink" title="阻止超链接默认跳转（return false;）"></a>阻止超链接默认跳转（return false;）</h3><p>因为函数都有返回值，当不返回就没有操作。</p>
<p>没有返回值的布尔类型为false，所以我们用return false；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">写法1：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span> <span class="attr">onclick</span>=<span class="string">"alert(1);return false"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">优化写法：</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">	alert(1);</span><br><span class="line"><span class="actionscript">	<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span> <span class="attr">onclick</span>=<span class="string">"return f1()"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">第三种写法（最优）：DOM操作，自己写。</span><br></pre></td></tr></table></figure>

<p>其例子：美女相册。</p>
<p>弹出二维码</p>
<p>高亮显示</p>
<p>模拟搜索框、失去焦点</p>
<p>验证文本框密码长度</p>
<h2 id="js-DOM操作常用方法"><a href="#js-DOM操作常用方法" class="headerlink" title="js DOM操作常用方法"></a>js DOM操作常用方法</h2><p>隐藏/显示:    元素.style.display=”none/block”;</p>
<h2 id="自定义属性（重点）"><a href="#自定义属性（重点）" class="headerlink" title="自定义属性（重点）"></a>自定义属性（重点）</h2><p>含义：本身html没有这个属性，程序员为了存储一些数据自定义的。</p>
<p>操作：</p>
<ul>
<li><p><strong>手动</strong>添加、获取自定义属性：在html标签中添加一个自定义属性，若想获取这个属性的值，需要使用getAttribute(“属性名”)。不推荐！！！</p>
</li>
<li><p><strong>动态</strong>添加、获取自定义属性：推荐！！！</p>
<p>​    设置自定义属性：setAttribute(“属性名”，“属性值”)</p>
<p>​    获取自定义属性：getAttribute(“属性名”)</p>
</li>
<li><p>移除（自定义、自带）属性：removeAttribute(“属性名”)</p>
</li>
</ul>
<h2 id="移除属性的值和移除属性"><a href="#移除属性的值和移除属性" class="headerlink" title="移除属性的值和移除属性"></a>移除属性的值和移除属性</h2><ul>
<li>让属性=””;    //移除属性的值，不是移除属性</li>
<li>移除属性：removeAttribute(“属性名”)</li>
</ul>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>含义：</p>
<p>用途：为了更方便操作元素。任意一个标签中的元素获取都非常方便</p>
<h3 id="节点的属性（3个）"><a href="#节点的属性（3个）" class="headerlink" title="节点的属性（3个）"></a>节点的属性（3个）</h3><p>特性：</p>
<ul>
<li>可以使用标签（元素）.出来</li>
<li>可以使用属性节点.出来</li>
<li>可以使用文本节点.出来</li>
</ul>
<p>nodeType:节点的类型1——标签、2——属性、3——文本。</p>
<p>nodeName：节点的名字：标签节点——大写的标签名、属性节点——小写的属性名、文本节点——#text</p>
<p>nodeValue：节点的值：标签节点——null、属性节点——属性值、文本节点——文本内容 </p>
<h3 id="获取相关的节点（12行代码）"><a href="#获取相关的节点（12行代码）" class="headerlink" title="获取相关的节点（12行代码）"></a>获取相关的节点（12行代码）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">一、注意：</span><br><span class="line"><span class="number">1.</span>父节点=父元素(标签)。</span><br><span class="line">页面里有标签、属性、文本，但只有标签能做父节点。</span><br><span class="line"><span class="number">2.</span>子节点！=子元素。子节点范围更大（标签、属性、文本）。</span><br><span class="line"><span class="number">3.</span>从子节点和兄弟节点开始，只要是节点在IE8中是元素，只要是元素IE8中就不支持、得到的是<span class="literal">undefined</span>。谷歌、火狐都正常。</span><br><span class="line">二、<span class="number">12</span>行代码</span><br><span class="line"><span class="comment">//父节点</span></span><br><span class="line">.parentNode</span><br><span class="line"><span class="comment">//父元素</span></span><br><span class="line">.parentElement</span><br><span class="line"><span class="comment">//子节点</span></span><br><span class="line">.childNodes</span><br><span class="line"><span class="comment">//子元素</span></span><br><span class="line">.children</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个子节点。下面的只要是节点在IE8中是元素。谷歌、火狐正常</span></span><br><span class="line">.firstChild</span><br><span class="line"><span class="comment">//第一个子元素。下面的只要是元素在IE8中不支持。谷歌、火狐正常</span></span><br><span class="line">.firstElementChild</span><br><span class="line"><span class="comment">//最后一个子节点</span></span><br><span class="line">.lastChild</span><br><span class="line"><span class="comment">//最后一个子元素</span></span><br><span class="line">.lastElementChild</span><br><span class="line"><span class="comment">//某个元素的前一个兄弟节点</span></span><br><span class="line">.previousSibling</span><br><span class="line"><span class="comment">//某个元素的前一个兄弟元素</span></span><br><span class="line">.previousElementSibling</span><br><span class="line"><span class="comment">//某个元素的后一个兄弟节点</span></span><br><span class="line">.nextSibling</span><br><span class="line"><span class="comment">//某个元素的后一个兄弟元素</span></span><br><span class="line">.nextElementSibling</span><br></pre></td></tr></table></figure>

<h3 id="封装节点的兼容代码（5段）"><a href="#封装节点的兼容代码（5段）" class="headerlink" title="封装节点的兼容代码（5段）"></a>封装节点的兼容代码（5段）</h3><h3 id="通过节点的方式来操作（增删改查）元素"><a href="#通过节点的方式来操作（增删改查）元素" class="headerlink" title="通过节点的方式来操作（增删改查）元素"></a>通过节点的方式来操作（增删改查）元素</h3><p>实例：</p>
<ol>
<li>通过节点操作元素的背景颜色</li>
<li>通过节点操作隔行变色</li>
</ol>
<h2 id="元素的创建（3种）"><a href="#元素的创建（3种）" class="headerlink" title="元素的创建（3种）"></a>元素的创建（3种）</h2><h3 id="为什么要有元素的创建？"><a href="#为什么要有元素的创建？" class="headerlink" title="为什么要有元素的创建？"></a>为什么要有元素的创建？</h3><p>为了提高用户体验。尽可能让网站元素少只显示必要的东西，当鼠标放到某位置时才显示</p>
<h3 id="创建元素的3种方式："><a href="#创建元素的3种方式：" class="headerlink" title="创建元素的3种方式："></a>创建元素的3种方式：</h3><p>1.document.write(“标签的代码及内容”); </p>
<p>​    页面加载时不影响原有内容。</p>
<p>​    百度“百度新闻代码”，用此方式可以嵌入外部的代码内容。</p>
<p>​    缺点：如果是在页面加载完毕后，此时通过这种方式创建元素，那么页面上存在的所有内容都被干掉了</p>
<p>2.对象.innerHTML=”标签及代码”;</p>
<p>​    通过字符串方式创建，再为该对象<strong>赋值</strong>。</p>
<p>​    注意：不能直接放在body中，否则跟第一种同效果。一般放到一个盒子中。</p>
<p>3.document.createElement(“标签的名字”);</p>
<p>​    通过对象方式创建。</p>
<p>优点：方便。    第三种方式创建元素，要再把元素追加到父级元素中：my$(“dv”).appendChild(pObj);</p>
<p>​    缺点：会重复创建。只创建一个按钮优化方案：有则删除，无则创建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">my$(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//判断,div中有没有这个按钮,有就删除</span></span><br><span class="line">        <span class="comment">//判断这个按钮的子元素是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(!my$(<span class="string">"btn2"</span>))&#123;<span class="comment">//如果为true就有</span></span><br><span class="line">            <span class="keyword">var</span> obj=<span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">            obj.type=<span class="string">"button"</span>;</span><br><span class="line">            obj.value=<span class="string">"按钮"</span>;</span><br><span class="line">            obj.id=<span class="string">"btn2"</span>;</span><br><span class="line">            my$(<span class="string">"dv"</span>).appendChild(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="元素操作（添加元素、移除元素）"><a href="#元素操作（添加元素、移除元素）" class="headerlink" title="元素操作（添加元素、移除元素）"></a>元素操作（添加元素、移除元素）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">body.appendChild(div);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstEle = body.children[<span class="number">0</span>];</span><br><span class="line">body.insertBefore(div,firstEle);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">body.replaceChild(text, div);</span><br><span class="line"></span><br><span class="line">body.removeChild(firstEle);</span><br></pre></td></tr></table></figure>

<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="绑定事件方式（BOM中：3种）"><a href="#绑定事件方式（BOM中：3种）" class="headerlink" title="绑定事件方式（BOM中：3种）"></a>绑定事件方式（BOM中：3种）</h3><p>BOM中有3种，JQuery中有更多——</p>
<p>1.只能绑定一个事件的，不能绑定多个，否则会干掉前面的：对象.on+事件类型=事件处理函数。</p>
<blockquote>
<h4 id="下面的2种是为同一元素绑定多个相同事件的：（2种-兼容代码）"><a href="#下面的2种是为同一元素绑定多个相同事件的：（2种-兼容代码）" class="headerlink" title="下面的2种是为同一元素绑定多个相同事件的：（2种+兼容代码）"></a>下面的2种是为同一元素绑定多个相同事件的：（2种+兼容代码）</h4></blockquote>
<p>2.对象.addEventListener(“事件类型”，事件处理函数，false)；——谷歌、火狐支持，IE8不支持</p>
<blockquote>
<p>参数1:事件的类型—事件的名字,没有on。<br>参数2:事件处理函数—函数(命名函数,匿名函数)。<br>参数3:布尔类型,目前就写false。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">my$(<span class="string">"btn"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"小苏猥琐啊"</span>);</span><br><span class="line"> &#125;,<span class="literal">false</span>);</span><br><span class="line"> my$(<span class="string">"btn"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"小苏龌龊啊"</span>);</span><br><span class="line"> &#125;,<span class="literal">false</span>);</span><br><span class="line"> my$(<span class="string">"btn"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"小苏邪恶啊"</span>);</span><br><span class="line"> &#125;,<span class="literal">false</span>);</span><br><span class="line"> my$(<span class="string">"btn"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"小苏下流啊"</span>);</span><br><span class="line"> &#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>3.对象.attachEvent(“有on的事件类型”，事件处理函数)；——IE8支持，火狐谷歌不支持</p>
<blockquote>
<p>参数1:事件类型—事件名字，有on<br>参数2:事件处理函数—函数(命名函数,匿名函数)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">my$(<span class="string">"btn"</span>).attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"小杨好帅哦1"</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line">my$(<span class="string">"btn"</span>).attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"小杨好帅哦2"</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> my$(<span class="string">"btn"</span>).attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"小杨好帅哦3"</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p>所以有了：兼容代码——</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为任意元素绑定任意的事件。参数1： 任意的元素,事件的类型,事件处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEventListener</span>(<span class="params">element,type,fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//判断浏览器是否支持这个方法</span></span><br><span class="line">  <span class="keyword">if</span>(element.addEventListener)&#123;</span><br><span class="line">    element.addEventListener(type,fn,<span class="literal">false</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</span><br><span class="line">    element.attachEvent(<span class="string">"on"</span>+type,fn);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    element[<span class="string">"on"</span>+type]=fn;<span class="comment">//或element."on"+type=fn;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addEventListener(my$(<span class="string">"btn"</span>),<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"哦1"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">addEventListener(my$(<span class="string">"btn"</span>),<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"哦2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">addEventListener(my$(<span class="string">"btn"</span>),<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"哦3"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="绑定事件的区别"><a href="#绑定事件的区别" class="headerlink" title="绑定事件的区别"></a>绑定事件的区别</h4><p>相同点：都可以为元素绑定事件</p>
<p>不同点：方法名不一样；参数个数不一样；浏览器支持情况不一样；</p>
<p>​                this不同：addEventListener是当前绑定事件的对象，attachEvent中的this是</p>
<p>​                window；事件类型不一样：前者+on，后者不加。</p>
<h3 id="解绑事件的方式（3种）"><a href="#解绑事件的方式（3种）" class="headerlink" title="解绑事件的方式（3种）"></a>解绑事件的方式（3种）</h3><blockquote>
<p>注意：用什么方式绑定事件，就应该用对应的方式解绑事件</p>
<p>​            第二、三种解绑方式，需要在绑定事件的时候，使用命名函数</p>
</blockquote>
<p>1.对象.on事件名=事件处理函数；——&gt;解绑：对象.on事件名=null;</p>
<p>2.对象.addEventListener(“没有on的事件类型”，命名函数，false)；</p>
<p>——&gt;解绑：对象.removeEventListener(“事件类型”，命名函数的名字，false)；——支持程度同绑定事件</p>
<p>3.对象.attachEvent(“on事件类型”,命名函数);</p>
<p>——&gt;解绑：对象.detachEvent(“on事件类型”,函数名字);</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>的代码：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"第一个"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"第二个"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">  my$(<span class="string">"btn"</span>).addEventListener(<span class="string">"click"</span>,f1,<span class="literal">false</span>);</span><br><span class="line"> my$(<span class="string">"btn"</span>).addEventListener(<span class="string">"click"</span>,f2,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//点击第二个按钮把第一个按钮的第一个点击事件解绑</span></span><br><span class="line"> my$(<span class="string">"btn2"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">//解绑事件的时候,需要在绑定事件的时候,使用命名函数</span></span><br><span class="line">    my$(<span class="string">"btn"</span>).removeEventListener(<span class="string">"click"</span>,f1,<span class="literal">false</span>);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="绑定、解绑事件的兼容代码"><a href="#绑定、解绑事件的兼容代码" class="headerlink" title="绑定、解绑事件的兼容代码"></a>绑定、解绑事件的兼容代码</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绑定事件的兼容</span></span><br><span class="line"><span class="keyword">function</span> add<span class="constructor">EventListener(<span class="params">element</span>,<span class="params">type</span>,<span class="params">fn</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(element.addEventListener)&#123;</span><br><span class="line">    element.add<span class="constructor">EventListener(<span class="params">type</span>,<span class="params">fn</span>,<span class="params">false</span>)</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</span><br><span class="line">    element.attach<span class="constructor">Event(<span class="string">"on"</span>+<span class="params">type</span>,<span class="params">fn</span>)</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    element<span class="literal">["<span class="identifier">on</span>"+<span class="identifier">type</span>]</span>=fn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解绑事件的兼容</span></span><br><span class="line"><span class="comment">//为任意的一个元素,解绑对应的事件</span></span><br><span class="line"><span class="keyword">function</span> remove<span class="constructor">EventListener(<span class="params">element</span>,<span class="params">type</span>,<span class="params">fnName</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(element.removeEventListener)&#123;</span><br><span class="line">    element.remove<span class="constructor">EventListener(<span class="params">type</span>,<span class="params">fnName</span>,<span class="params">false</span>)</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent)&#123;</span><br><span class="line">    element.detach<span class="constructor">Event(<span class="string">"on"</span>+<span class="params">type</span>,<span class="params">fnName</span>)</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    element<span class="literal">["<span class="identifier">on</span>"+<span class="identifier">type</span>]</span>=null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> f1<span class="literal">()</span> &#123;</span><br><span class="line">  console.log(<span class="string">"第一个"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> f2<span class="literal">()</span> &#123;</span><br><span class="line">  console.log(<span class="string">"第二个"</span>);</span><br><span class="line">&#125;</span><br><span class="line">add<span class="constructor">EventListener(<span class="params">my$</span>(<span class="string">"btn1"</span>)</span>,<span class="string">"click"</span>,f1);</span><br><span class="line">add<span class="constructor">EventListener(<span class="params">my$</span>(<span class="string">"btn1"</span>)</span>,<span class="string">"click"</span>,f2);</span><br><span class="line">my<span class="constructor">$(<span class="string">"btn2"</span>)</span>.onclick=<span class="keyword">function</span> <span class="literal">()</span> &#123;</span><br><span class="line">  remove<span class="constructor">EventListener(<span class="params">my$</span>(<span class="string">"btn1"</span>)</span>,<span class="string">"click"</span>,f1);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="事件冒泡（每次都要先考虑到，阻止发生）"><a href="#事件冒泡（每次都要先考虑到，阻止发生）" class="headerlink" title="事件冒泡（每次都要先考虑到，阻止发生）"></a>事件冒泡（每次都要先考虑到，阻止发生）</h3><p>事件冒泡：多个元素嵌套，有层次关系，这些元素都注册了相同的事件，如果里面的元素的事件触发了，那么外面的元素的该事件会自动触发。方向：从里向外（从上到下）</p>
<p>为同一个元素绑定多个不同的事件，指向的是同一个事件处理函数</p>
<p>标签嵌套：实际上是覆盖的关系。</p>
<h4 id="阻止事件冒泡（BOM）"><a href="#阻止事件冒泡（BOM）" class="headerlink" title="阻止事件冒泡（BOM）"></a>阻止事件冒泡（BOM）</h4><p>1.window.event.cancelBubble=true——IE、谷歌支持，火狐不支持。</p>
<p>2.e.stopPropagation(); 谷歌和火狐支持，IE8不支持e。e要为事件处理函数的参数</p>
<p>（window.event对象（IE中的标准）=e对象（火狐的标准））</p>
<h3 id="事件的三个阶段"><a href="#事件的三个阶段" class="headerlink" title="事件的三个阶段"></a>事件的三个阶段</h3><p>可通过e.eventPhase这个属性可以知道当前的事件是什么阶段的，对应值如下：</p>
<p>1.事件捕获阶段：从外向内，布尔类型：true</p>
<p>2.事件目标阶段：最开始选择的目标，但不一定最先出现</p>
<p>3.事件冒泡阶段：从里向外，布尔类型：false</p>
<blockquote>
<p>addEventListener(“没有on的事件类型”，事件处理函数，控制事件阶段的)</p>
<p>一般默认都是冒泡阶段，很少用捕获阶段。</p>
</blockquote>
<h3 id="为同一个元素绑定多个不同的事件，指向相同的事件处理函数"><a href="#为同一个元素绑定多个不同的事件，指向相同的事件处理函数" class="headerlink" title="为同一个元素绑定多个不同的事件，指向相同的事件处理函数"></a>为同一个元素绑定多个不同的事件，指向相同的事件处理函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">my$(<span class="string">"btn"</span>).onclick = f1;</span><br><span class="line">my$(<span class="string">"btn"</span>).onmouseover = f1;</span><br><span class="line">my$(<span class="string">"btn"</span>).onmouseout = f1;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (e.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"click"</span>:</span><br><span class="line">      alert(<span class="string">"好帅哦"</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"mouseover"</span>:</span><br><span class="line">      <span class="keyword">this</span>.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"mouseout"</span>:</span><br><span class="line">      <span class="keyword">this</span>.style.backgroundColor = <span class="string">"green"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>封装动画函数——匀速的动画函数，过渡到缓动的动画函数</p>
<p><strong>轮播图</strong></p>
<p>​        简单</p>
<p>​        左右焦点</p>
<p>​        无缝连接</p>
<h2 id="三大系列之一：offset系列"><a href="#三大系列之一：offset系列" class="headerlink" title="三大系列之一：offset系列"></a><strong>三大系列之一：offset系列</strong></h2><p>在任意位置获取到元素的样式：宽（有边框）、高（有边框）、离左离右距离、父级元素（标签）</p>
<p>具体值：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">没有脱离文档流:</span><br><span class="line">offsetLeft:父级元素<span class="built_in">margin</span>+父级元素padding+父级元素的border+自己的<span class="built_in">margin</span></span><br><span class="line">脱离文档流：</span><br><span class="line">主要是自己的left和自己的<span class="built_in">margin</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>用style.属性来获取的话：如果样式是在CSS中设置，那么外面是获取不到的<br>在style属性中，可以获取到。 </p>
</blockquote>
<h2 id="三大系列之二：scroll系列"><a href="#三大系列之二：scroll系列" class="headerlink" title="三大系列之二：scroll系列"></a>三大系列之二：scroll系列</h2><p>”卷曲——滚出去“的意思</p>
<p>一、属性:</p>
<p>1.元素中内容的<strong>实际宽、高</strong>（无边框）。如果内容少或没，就是元素的宽高。</p>
<p>2.向上、左卷曲出去的距离</p>
<p>二、滚动事件onscroll</p>
<p>三、封装系列的属性：浏览器向上、左卷曲出去的距离的值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最终版本：这里将上、左卷曲封装在一起，要返回2个值：用return只能1个、用一般对象.属性代码较多、用json对象.属性成形。</span></span><br><span class="line"><span class="comment">//0是防止浏览器都不兼容时不会报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScroll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    left: <span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">document</span>.body.scrollLeft||<span class="number">0</span>,</span><br><span class="line">    top: <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>四、固定导航栏案例</p>
<p>2个bug：①下的标准流部分会顶替脱离文档流部分：将标准流的margin-top用offsetHeight限制②滚动回来时将修改的东西重置。</p>
<h2 id="三大系列之三：client系列"><a href="#三大系列之三：client系列" class="headerlink" title="三大系列之三：client系列"></a>三大系列之三：client系列</h2><p>可视区域的宽（无边框，边框内部的宽）、高、左边框的宽度、上边框的高度、可视区域的横坐标、可视区域的纵坐标</p>
<h3 id="实例：图片跟着鼠标移动"><a href="#实例：图片跟着鼠标移动" class="headerlink" title="实例：图片跟着鼠标移动"></a>实例：图片跟着鼠标移动</h3><p>第一个版本：不修复bug的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/tianshi.gif"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"im"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"common.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//鼠标在页面中移动,图片跟着鼠标移动</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//通过arguments.length，可以得出:事件处理函数中实际上是有一个参数的,这个参数和事件有关系,是一个对象-----&gt;事件参数对象，我们给它自定义名字e</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//谷歌和火狐中都有这个事件参数对象,但IE8中没有</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//事件参数对象:e----在IE8中用window.event来代替，但火狐不支持</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//页面的鼠标移动事件</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.onmousemove=<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//鼠标的移动的横纵坐标</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//可视区域的横坐标</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//可视区域的纵坐标</span></span></span><br><span class="line"><span class="javascript">    e=<span class="built_in">window</span>.event||e;<span class="comment">//简化！：兼容代码</span></span></span><br><span class="line"><span class="javascript"> 	my$(<span class="string">"im"</span>).style.left=e.clientX+<span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript"> 	my$(<span class="string">"im"</span>).style.top=e.clientY+<span class="string">"px"</span>;</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际有很多bug，这儿要封装到好几个函数，再封装到对象（文件）里面：</p>
<p>bug1：页面是大于可视区域的，如因为clientY不变，当页面向上滚动，clientY就会往上缩（卷曲），导致虽然鼠标不动，但图片也往上缩，脱离鼠标</p>
<p>debug1：当滚动条滚动时，图片被限制在原来的可视区域的范围内：</p>
<p>​    ①pageX、pageY相当于页面顶部的距离，但！IE8不能用</p>
<p>​    ②所以只能用client系列：clientY(可视区域的距离)+向上卷曲出去的距离（但需要兼容代码）、clientX(可视区域的距离)+向左卷曲出去的距离（但需要兼容代码）。下面修复：</p>
<p>第二个版本：添加兼容代码，可以在任何浏览器中实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=<span class="string">"images/tianshi.gif"</span> alt=<span class="string">""</span> id=<span class="string">"im"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"common.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  document.onmousemove=function (e) &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/鼠标的移动的横纵坐标</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/可视区域的横坐标</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/可视区域的纵坐标</span></span><br><span class="line"><span class="regexp">    e=window.event||e;/</span><span class="regexp">/简化！：兼容代码</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    function getScroll()&#123;</span></span><br><span class="line"><span class="regexp">        return&#123;</span></span><br><span class="line"><span class="regexp">  top:window.pageYOffset||document.body.scrollTop||document.documentElement.scrollTop||0,</span></span><br><span class="line"><span class="regexp">  left:window.pageXOffset||document.body.scrollLeft||document.documentElement.scrollLeft||0</span></span><br><span class="line"><span class="regexp">     	&#125;</span></span><br><span class="line"><span class="regexp">    &#125;	</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/可视区域横坐标+向左卷曲出去的横坐标 	</span></span><br><span class="line"><span class="regexp">  my$("im").style.left=e.clientX+getScroll().left+"px";</span></span><br><span class="line"><span class="regexp"> 	/</span><span class="regexp">/可视区域纵坐标+向上卷曲出去的横坐标</span></span><br><span class="line"><span class="regexp">  my$("im").style.top=e.clientY+getScroll().top+"px";</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure>

<p>最终版本：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    *&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    body&#123;</span><br><span class="line">      height: 2000px;</span><br><span class="line">    &#125;</span><br><span class="line">    img&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/bird.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"im"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"common.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//图片跟着鼠标飞,可以在任何的浏览器中实现</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//window.event和事件参数对象e的兼容</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//clientX和clientY单独的使用的兼容代码</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//scrollLeft和scrollTop的兼容代码</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//pageX,pageY和clientX+scrollLeft 和clientY+scrollTop</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">//把代码封装在一个函数</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">//把代码放在一个对象中</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> evt=&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//window.event和事件参数对象e的兼容</span></span></span><br><span class="line"><span class="actionscript">    getEvent:<span class="function"><span class="keyword">function</span> <span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">window</span>.event||evt;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    <span class="comment">//可视区域的横坐标的兼容代码</span></span></span><br><span class="line"><span class="actionscript">    getClientX:<span class="function"><span class="keyword">function</span> <span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.getEvent(evt).clientX;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    <span class="comment">//可视区域的纵坐标的兼容代码</span></span></span><br><span class="line"><span class="actionscript">    getClientY:<span class="function"><span class="keyword">function</span> <span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.getEvent(evt).clientY;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    <span class="comment">//页面向左卷曲出去的横坐标</span></span></span><br><span class="line"><span class="actionscript">    getScrollLeft:<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">window</span>.pageXOffset||<span class="built_in">document</span>.body.scrollLeft||<span class="built_in">document</span>.documentElement.scrollLeft||<span class="number">0</span>;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    <span class="comment">//页面向上卷曲出去的纵坐标</span></span></span><br><span class="line"><span class="actionscript">    getScrollTop:<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">window</span>.pageYOffset||<span class="built_in">document</span>.body.scrollTop||<span class="built_in">document</span>.documentElement.scrollTop||<span class="number">0</span>;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    <span class="comment">//相对于页面的横坐标(pageX或者是clientX+scrollLeft)</span></span></span><br><span class="line"><span class="actionscript">    getPageX:<span class="function"><span class="keyword">function</span> <span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.getEvent(evt).pageX? <span class="keyword">this</span>.getEvent(evt).pageX:<span class="keyword">this</span>.getClientX(evt)+<span class="keyword">this</span>.getScrollLeft();</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    <span class="comment">//相对于页面的纵坐标(pageY或者是clientY+scrollTop)</span></span></span><br><span class="line"><span class="actionscript">    getPageY:<span class="function"><span class="keyword">function</span> <span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.getEvent(evt).pageY?<span class="keyword">this</span>.getEvent(evt).pageY:<span class="keyword">this</span>.getClientY(evt)+<span class="keyword">this</span>.getScrollTop();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  <span class="comment">//最终的代码</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.onmousemove=<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    my$(<span class="string">"im"</span>).style.left=evt.getPageX(e)+<span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript">    my$(<span class="string">"im"</span>).style.top=evt.getPageY(e)+<span class="string">"px"</span>;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//  var obj=&#123;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    sayHi:function () &#123;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//      console.log("考尼奇瓦");</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//      this.eat();//this就是obj这个对象</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    &#125;,</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    eat:function () &#123;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//      console.log("饭以ok,下来密西吧");</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    &#125;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//  &#125;;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//  //调用sayHi方法的同时,调用eat方法,是否可以在一个方法中调用另一个方法?</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//  //在对象的方法中调用另一个方法如何调用?</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//  obj.sayHi();</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="拖拽案例"><a href="#拖拽案例" class="headerlink" title="拖拽案例"></a>拖拽案例</h3><p>知识点复习：</p>
<p>阻止浏览器的默认事件：①return false;或 ②e.preventDefault();//IE8不支持</p>
<p>阻止事件冒泡：window.event.cancelBubble=true;或e.stopPropagation();</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取超链接,注册点击事件,显示登录框和遮挡层</span></span><br><span class="line">  my$(<span class="string">"link"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    my$(<span class="string">"login"</span>).style.display = <span class="string">"block"</span>;</span><br><span class="line">    my$(<span class="string">"bg"</span>).style.display = <span class="string">"block"</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取关闭,注册点击事件,隐藏登录框和遮挡层</span></span><br><span class="line">  my$(<span class="string">"closeBtn"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    my$(<span class="string">"login"</span>).style.display = <span class="string">"none"</span>;</span><br><span class="line">    my$(<span class="string">"bg"</span>).style.display = <span class="string">"none"</span>;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="滚动条案例"><a href="#滚动条案例" class="headerlink" title="滚动条案例"></a>滚动条案例</h3><h3 id="放大镜案例"><a href="#放大镜案例" class="headerlink" title="放大镜案例"></a>放大镜案例</h3><h2 id="直接通过document获取元素："><a href="#直接通过document获取元素：" class="headerlink" title="直接通过document获取元素："></a>直接通过document获取元素：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取body</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.body);<span class="comment">//获取的是元素--标签</span></span><br><span class="line"><span class="comment">//获取title</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.title);<span class="comment">//标签中的值</span></span><br><span class="line"><span class="built_in">document</span>.title=<span class="string">"嘎嘎去"</span>;</span><br><span class="line"><span class="comment">//获取html</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.documentElement);</span><br></pre></td></tr></table></figure>





<h2 id="获取元素计算后的样式属性值：为缓动动画函数服务"><a href="#获取元素计算后的样式属性值：为缓动动画函数服务" class="headerlink" title="获取元素计算后的样式属性值：为缓动动画函数服务"></a>获取元素计算后的样式属性值：为缓动动画函数服务</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//谷歌,火狐支持</span></span><br><span class="line"><span class="comment">//console.log(window.getComputedStyle(my$("dv"),null).left);   console.log(window.getComputedStyle(my$("dv"),null)["left"]);</span></span><br><span class="line"><span class="comment">//IE8支持    //console.log(my$("dv").currentStyle.left);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取任意一个元素的任意一个样式属性的值  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element,attr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断浏览器是否支持这个方法</span></span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle? <span class="built_in">window</span>.getComputedStyle(element,<span class="literal">null</span>)[attr]:element.currentStyle[attr];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my$(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(getStyle(my$(<span class="string">"dv"</span>),<span class="string">"top"</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>05-H5的WebStorage</title>
    <url>/2020/03/28/05-H5%E7%9A%84WebStorage/</url>
    <content><![CDATA[<h1 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h1><p>1、本地存储：分为localStorage、sessionStorage。</p>
<a id="more"></a>

<p>2、面试经常问：localStorage、sessionStorage的用法、区别</p>
<p>3、本地存储和cookie、session是不同的，它存在什么地方？</p>
<p>浏览器右击检查-》Application里。</p>
<p>4、key、value形式，跟对象差不多。通过JS进行操作。</p>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>localStorage ==》一执行，永久性保存<br>sessionStorage ==》关闭浏览器自动消失</p>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>它们的用法一样：设置、获取、删除</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>》localStorage		</span><br><span class="line"><span class="number">2</span>》sessionStorage</span><br><span class="line"></span><br><span class="line">设置:（<span class="number">3</span>种写法，可不给<span class="keyword">value</span>或为空。设置完刷新页面就有了）</span><br><span class="line">	xxx.setItem<span class="built_in">(key</span>,<span class="keyword">value</span>)	如localStorage.SetItem(<span class="string">'name'</span>,<span class="string">'zhangsan'</span>);</span><br><span class="line">	xxx.name1 = <span class="string">'李四'</span>;</span><br><span class="line">	xxx[<span class="string">'name2'</span>] = <span class="string">'王五'</span>;</span><br><span class="line">获取:（也<span class="number">3</span>种。收藏、记住密码等都会用到它）还需要打印或其它操作</span><br><span class="line">	xxx.getItem<span class="built_in">(key</span>)</span><br><span class="line">	xxx<span class="built_in">.key</span></span><br><span class="line">	xxx[<span class="string">'key'</span>]</span><br><span class="line">删除:	</span><br><span class="line">	删除某个:</span><br><span class="line">		xxx.removeItem<span class="built_in">(key</span>);</span><br><span class="line">	全部删除:</span><br><span class="line">		xxx.clear();</span><br></pre></td></tr></table></figure>

<h1 id="🔺注意点"><a href="#🔺注意点" class="headerlink" title="🔺注意点"></a>🔺注意点</h1><p>本地存储的所有值都是<strong>string类型</strong>（字符串）</p>
<h1 id="案例-移动app收藏效果"><a href="#案例-移动app收藏效果" class="headerlink" title="案例-移动app收藏效果"></a>案例-移动app收藏效果</h1><p>大概步骤</p>
<ul>
<li>获取</li>
<li>判断：提示或累加 。（因为会被覆盖，需要累加）<ul>
<li>累加——要放到数组里<ul>
<li>问题：本地存储特性——给本地存储传[]，会是字符串</li>
<li>应对：<ul>
<li>给本地存储传[]（注意：给它个判断——没有才传[]）；</li>
<li>通过json.parse转换为数组；</li>
<li>然后如果不重复就push内容，否则就算了；</li>
<li>最后把数组转换为字符串再放到本地存储中。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>读到一个位置上。<ul>
<li>遍历获取该字符串里的数组的键值对</li>
<li>把这些键值对加到一个空数组里</li>
<li>然后传到对应位置上</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>04-H5的Canvas</title>
    <url>/2020/03/28/04-H5%E7%9A%84Canvas/</url>
    <content><![CDATA[<h1 id="canvas是什么"><a href="#canvas是什么" class="headerlink" title="canvas是什么"></a>canvas是什么</h1><ul>
<li>是一个html5新增的<strong>标签</strong></li>
<li>是一个<strong>画布</strong>，可以<strong>通过js的api</strong>去画（添加图案）</li>
</ul>
<a id="more"></a>

<h1 id="canva的使用场景"><a href="#canva的使用场景" class="headerlink" title="canva的使用场景"></a>canva的使用场景</h1><ul>
<li>做游戏</li>
<li>画图案<ul>
<li>如做图表：业绩报表</li>
</ul>
</li>
</ul>
<h1 id="canvas的基本使用"><a href="#canvas的基本使用" class="headerlink" title="canvas的基本使用"></a>canvas的基本使用</h1><blockquote>
<p>注意：</p>
<ul>
<li>canvas有默认大小：宽300、高150，可设置。</li>
<li>canvas的宽度和高度，一般都在js中定义</li>
<li>如果在css中定义宽度和高度，内部元素也会受到影响</li>
<li>建议打印看一下canvas对象的属性、方法</li>
</ul>
</blockquote>
<ol>
<li><code>&lt;canvas&gt;&lt;/canvas&gt;</code>（建议给个id、类，好操作它）</li>
<li>通过JS去操作，获取它</li>
<li>创建一个2d、3d对象<ol>
<li>2d对象：方法<code>getContext(&quot;2d&quot;)</code></li>
<li>3d对象：需要插件的支持</li>
</ol>
</li>
<li>绘画</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-id">#myCanvas</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">'myCanvas'</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> myCanvas = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> cvs = myCanvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">cvs.fillStyle=<span class="string">'blue'</span>;	<span class="comment">//填充物颜色</span></span></span><br><span class="line"><span class="actionscript">cvs.fillRect(<span class="number">20</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>);<span class="comment">//填充物的位置、大小：从左上开始，x、y、宽、高</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="canvas-矩形（有填充、无填充）"><a href="#canvas-矩形（有填充、无填充）" class="headerlink" title="canvas-矩形（有填充、无填充）"></a>canvas-矩形（有填充、无填充）</h1><ul>
<li>有填充<ul>
<li>2d对象.fillStyle=’’            ===》填充颜色</li>
<li>2d对象.fillRect(x,y,w,h)   ===》位置、大小</li>
</ul>
</li>
<li>无填充（不能填充颜色）<ul>
<li>2d对象.StrokeStyle=’’             ===》线条颜色</li>
<li>2d对象.StrokeRect(x,y,w,h)    ===》位置、大小</li>
</ul>
</li>
</ul>
<h1 id="canvas-线"><a href="#canvas-线" class="headerlink" title="canvas-线"></a>canvas-线</h1><pre><code>1&gt;起始点：2d对象.moveTo(x,y);    //坐标
2&gt;结束点: 2d对象.lineTo(x,y);
         ....               //接下来就可无限lineTo了
3&gt;开始画：2d对象.stroke()       //执行到这才会去画
辅助：
    线条加粗 :  2d对象.lineWidth = 5
    线条颜色 :  2d对象.strokeStyle=&apos;red&apos;
    填充颜色 :（与矩形不同，要2步）
        2d对象.fillStyle=&apos;red&apos;
        2d对象.fill() ==》加入此方法才可以填充</code></pre><p>到这就可以完成很多东西了，如箭头等。不过学了下一节，有个注意点、画线更容易的方法。</p>
<h2 id="canvas-beginPath、closePath"><a href="#canvas-beginPath、closePath" class="headerlink" title="canvas-beginPath、closePath"></a>canvas-beginPath、closePath</h2><blockquote>
<p>画线会出现个问题：当你分别画了几条线，后画的线的颜色会影响前面的线。解决：用beginPath()可以解决</p>
</blockquote>
<ul>
<li>2d对象.beginPath()    <strong>重置</strong>当前的路径，或<strong>开始</strong>一条路径。</li>
<li>2d对象.closePath()    创建从<strong>当前点</strong>到<strong>开始点</strong>的路径。注意要放在stroke()之前才起效！</li>
</ul>
<h1 id="cavas-arc-弧度"><a href="#cavas-arc-弧度" class="headerlink" title="cavas-arc()弧度"></a>cavas-arc()弧度</h1><figure class="highlight gml"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>d对象.arc()</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>d对象.arc(<span class="symbol">x</span>,<span class="symbol">y</span>,r,sAngle,eAngle,counterclockwise);</span><br><span class="line">开始画：<span class="number">2</span>d对象.stroke()	<span class="comment">//这儿才开始画</span></span><br><span class="line"></span><br><span class="line">	<span class="symbol">x</span>:横向位置</span><br><span class="line">	<span class="symbol">y</span>:垂直位置</span><br><span class="line">	r:半径</span><br><span class="line">	sAngle:起始点，注意：这里是与<span class="symbol">x</span>轴的度数，<span class="number">0</span>是<span class="symbol">x</span>轴正方向</span><br><span class="line">	eAngle:结束点。如<span class="number">1</span>*Math.PI</span><br><span class="line">	counterclockwise:方向	</span><br><span class="line">        <span class="literal">false</span> ==&gt;顺时针（默认为顺时针）</span><br><span class="line">        <span class="literal">true</span>  ==&gt;逆时针（注意：跟顺时针画出的弧度相反）</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>03-H5标签、表单</title>
    <url>/2020/03/28/03-H5%E6%A0%87%E7%AD%BE%E3%80%81%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<h1 id="HTML5了解"><a href="#HTML5了解" class="headerlink" title="HTML5了解"></a>HTML5了解</h1><ul>
<li><p>支持程度：IE8及以下版本不支持，其他浏览器都支持</p>
</li>
<li><p>增加了js引擎（即增加了一大推属性、方法）</p>
<ul>
<li>要在移动端开发HTML5应用：要么全用HTML5语法，要么只用JS引擎（JS引擎的构建方式现阶段可制作手机网页游戏）</li>
</ul>
</li>
<li><p>文档声明：<code>&lt;!DOCTYPE html&gt;</code>即可    </p>
</li>
<li><p>更语义化。如</p>
<pre><code><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;header&gt;</span><span class="section">&lt;/header&gt;</span></span><br><span class="line"><span class="section">&lt;footer&gt;</span><span class="section">&lt;/footer&gt;</span></span><br></pre></td></tr></table></figure></code></pre></li>
</ul>
<a id="more"></a>

<h1 id="HTML5废除标签"><a href="#HTML5废除标签" class="headerlink" title="HTML5废除标签"></a>HTML5废除标签</h1><blockquote>
<p>基本都是不常用到的元素，除了这儿列举的，其它的就不一 一说了</p>
</blockquote>
<p>1、能用css代替的元素</p>
<pre><code>basefont、big、center、font、s、strike、tt、u</code></pre><p>2、不再使用frame框架。(只支持iframe框架、或用服务器方创建的由多个页面组成的符合页面的形式)</p>
<pre><code>frameset、frame、noframes</code></pre><p>3、只有部分浏览器支持的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">applet、bgsound、blink、marquee等标签。</span><br></pre></td></tr></table></figure>

<p>4、其它（不说了，基本都不会用到）</p>
<h1 id="HTML新增标签"><a href="#HTML新增标签" class="headerlink" title="HTML新增标签"></a>HTML新增标签</h1><blockquote>
<p>有很多，这儿就列举一些常用的，其它可到w3c查看</p>
</blockquote>
<pre><code>header  ==》头部
nav     ==》导航
section ==》区块
    article ==》定义文章
    aside   ==》文章侧栏
footer  ==》底部
//以上这些都是块级元素

audio   ==》定义声音（它有些控件，可到w3c查看、后面也会讲）
    可配合js使用
canvas  ==》定义图像（画布）
    可配合js使用

下面的可到w3c看如何使用，这儿只是介绍下
datalist ==》标签定义选项列表
    option
mark     ==》定义有记号的文本(即高亮)

progress ==》定义进度条(不常用，但要记住单词：涉及到后面插件使用)

picture
    source   ==》定义媒介源(超有用，如做响应式图片会用到)

time   ==》定义时间（跟div一样，只不过换了个名称而已）

video  ==》定义视频</code></pre><h1 id="HTML5排版形式"><a href="#HTML5排版形式" class="headerlink" title="HTML5排版形式"></a>HTML5排版形式</h1><p>之前传统的页面排版形式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'header'</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'main'</span>&gt;</span>主体<span class="tag">&lt;/<span class="name">div</span>&gt;</span>	<span class="comment">&lt;!-- 或container --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'footer'</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在的页面排版形式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- section表示：文档中的某一区段。或不断排section、或用个div包裹着排section都可以 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="HTML5属性-了解"><a href="#HTML5属性-了解" class="headerlink" title="HTML5属性(了解)"></a>HTML5属性(了解)</h1><blockquote>
<p>了解即可，可到w3c查看如何使用</p>
</blockquote>
<p><strong>自定义属性：</strong>data-*，如data-toggle（常用，如Bootstrap）<br>内容可编辑：contenteditable<br>更改tab 键次序: tabindex（较常用）</p>
<h1 id="H5表单-输入类型"><a href="#H5表单-输入类型" class="headerlink" title="H5表单-输入类型"></a>H5表单-输入类型</h1><blockquote>
<p>如果懒得用插件，要去做些简单的表单验证可用这些。但实际上用不多，因为有局限性。正常还是喜欢用些插件：如一些jQ插件来完成这些内容。</p>
</blockquote>
<p>会配合些 表单元素属性 使用：如max、min、step(步长)、value</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">即输入框input的类型属性：</span></span><br><span class="line"><span class="attr">email</span>	<span class="string">只能输入邮箱</span></span><br><span class="line"><span class="attr">url</span>		<span class="string">只能输入网址</span></span><br><span class="line"><span class="attr">number</span>	<span class="string">只能输入数字</span></span><br><span class="line"><span class="attr">range</span>	<span class="string">可拖动条</span></span><br><span class="line"><span class="meta">日期选择器（Date</span> <span class="string">pickers）:</span></span><br><span class="line">    <span class="attr">date</span> <span class="string">- 选取日、月、年</span></span><br><span class="line">    <span class="attr">month</span> <span class="string">- 选取月、年</span></span><br><span class="line">    <span class="attr">week</span> <span class="string">- 选取周和年</span></span><br><span class="line">    <span class="attr">time</span> <span class="string">- 选取时间（小时和分钟）</span></span><br><span class="line">    <span class="attr">datetime</span> <span class="string">- 选取时间、日、月、年（UTC 时间）</span></span><br><span class="line">    <span class="meta">datetime-local</span> <span class="string">- 选取时间、日、月、年（本地时间）</span></span><br><span class="line"><span class="attr">search</span>	<span class="string">显示一个文本框，代表搜索</span></span><br><span class="line"><span class="attr">color</span>	<span class="string">颜色选择器</span></span><br></pre></td></tr></table></figure>

<h1 id="H5表单-表单属性"><a href="#H5表单-表单属性" class="headerlink" title="H5表单-表单属性"></a>H5表单-表单属性</h1><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">必须要会的：</span><br><span class="line"><span class="number">1</span>》<span class="attr">autofocus</span> ==&gt;获取焦点</span><br><span class="line"><span class="number">2</span>》<span class="attr">multiple</span>  ==&gt;选取多个值，通常用在下拉框，加ctrl键</span><br><span class="line"><span class="number">3</span>》<span class="attr">pattern</span>   ==》配合正则使用的</span><br><span class="line"><span class="number">4</span>》<span class="attr">placeholder</span> ==》提供一种提示信息</span><br><span class="line"><span class="number">5</span>》<span class="attr">required</span> ==&gt;必须填写</span><br><span class="line">回顾：laber配合for、id使用</span><br><span class="line">&lt;input <span class="attr">type="checkbox"</span> <span class="attr">id='ck'&gt;</span></span><br><span class="line">&lt;label <span class="attr">for="ck"&gt;</span></span><br><span class="line">	&lt;span&gt;同意&lt;/span&gt;</span><br><span class="line">&lt;label&gt;</span><br><span class="line">上节见到的：</span><br><span class="line"><span class="attr">step</span>  ===&gt;步长值</span><br><span class="line"><span class="attr">max</span>   ===&gt;最大值</span><br><span class="line"><span class="attr">min</span>   ===&gt;最小值</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>02-CSS预处理器sass</title>
    <url>/2020/03/28/02-CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8sass/</url>
    <content><![CDATA[<p>sass中文官网<a href="https://www.sass.hk/" target="_blank" rel="noopener">https://www.sass.hk/</a></p>
<a id="more"></a>

<h1 id="什么是css预处理器"><a href="#什么是css预处理器" class="headerlink" title="什么是css预处理器"></a>什么是css预处理器</h1><ul>
<li>扩展了 CSS 语言——包含了变量，运算，函数</li>
<li>使 CSS 更易维护和扩展。</li>
</ul>
<p>应用场景：如换主题样式</p>
<h1 id="sass和scss的区别"><a href="#sass和scss的区别" class="headerlink" title="sass和scss的区别"></a>sass和scss的区别</h1><p>1、sass语法：书写格式不好——没有花括号、分号，如</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">div		</span><br><span class="line">	<span class="built_in">background</span>: <span class="built_in">red</span></span><br></pre></td></tr></table></figure>

<p>2、scss语法：书写格式良好——跟正常css一样</p>
<p>3、所以注意：以后<strong>创建的是 .scss 文件</strong>，不是 .sass文件</p>
<h1 id="sass的编译方式"><a href="#sass的编译方式" class="headerlink" title="sass的编译方式"></a>sass的编译方式</h1><h2 id="node编译"><a href="#node编译" class="headerlink" title="node编译"></a>node编译</h2><blockquote>
<p>sass中文官网<a href="https://www.sass.hk/" target="_blank" rel="noopener">https://www.sass.hk/</a></p>
</blockquote>
<p>1、windows系统必须安装ruby，而mac自带：去百度随便下载即可，国外的下载慢。（测试：ruby -v）</p>
<p>2、命令（到所在位置编译）</p>
<p>安装sass：<code>gem install sass</code><br>普通编译：<code>sass style.scss style.css</code><br>压缩版编译：<code>sass --style compressed style.scss style.css</code><br>监听:<code>sass --watch style.scss:style.css</code>（监听后编写.scss后，编译的.css里会自动编译）</p>
<h2 id="工具编译"><a href="#工具编译" class="headerlink" title="工具编译"></a>工具编译</h2><p>Koala工具的用法跟less一样（注意：目录不能有中文，会报错）</p>
<p>注意：编译的输出方式<strong>设为expanded</strong>，才为css标准格式</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><blockquote>
<p>跟less用法类似</p>
</blockquote>
<ul>
<li><p>变量：<code>$变量名称:值</code></p>
</li>
<li><p>运算：+ - * /</p>
</li>
<li><p>嵌套。包括以下情况也支持</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">正常：</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-bottom</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scss</span>中可写：(注意“:”别漏)</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">border</span>: &#123;</span><br><span class="line">        top: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">1px</span> solid red;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>&amp;写伪类：如<code>&amp;:hover{}</code></p>
</li>
<li><p>自定义函数:</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span>&#123;	<span class="comment">//也可传值、可设默认值。需要返回结果</span></span><br><span class="line">    <span class="comment">//@return;			</span></span><br><span class="line">    <span class="comment">//@return 一个结果;</span></span><br><span class="line">&#125;</span><br><span class="line">函数名()</span><br></pre></td></tr></table></figure>

<p>支持的很多，如判断、循环，可以到sass中文官网<a href="https://www.sass.hk/去看" target="_blank" rel="noopener">https://www.sass.hk/去看</a></p>
<h1 id="sass和less的区别"><a href="#sass和less的区别" class="headerlink" title="sass和less的区别"></a>sass和less的区别</h1><ol>
<li>语法不同</li>
<li>基于的语言不同<pre><code>less ——》 JavaScript
   sass ——》 ruby</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>01-CSS预处理器less</title>
    <url>/2020/03/28/01-CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8less/</url>
    <content><![CDATA[<p>less的官方中文网：<a href="http://lesscss.cn/" target="_blank" rel="noopener">http://lesscss.cn/</a></p>
<h1 id="什么是css预处理器"><a href="#什么是css预处理器" class="headerlink" title="什么是css预处理器"></a>什么是css预处理器</h1><ul>
<li>扩展了 CSS 语言——包含了变量，运算，函数</li>
<li>使 CSS 更易维护和扩展。</li>
</ul>
<p>应用场景：如换主题样式</p>
<a id="more"></a>

<h1 id="less简介"><a href="#less简介" class="headerlink" title="less简介"></a>less简介</h1><p>1、less的官方中文网：<a href="http://lesscss.cn/" target="_blank" rel="noopener">http://lesscss.cn/</a></p>
<p>2、less语法：</p>
<p>​        变量:   <code>@变量名:值;</code></p>
<p>3、注意：</p>
<p>​        虽然浏览器支持 .less 文件,但是<strong>less文件中写入变量…就不支持了</strong>,必须要把.less文件编译成.css文件</p>
<h1 id="less编译方式"><a href="#less编译方式" class="headerlink" title="less编译方式"></a>less编译方式</h1><blockquote>
<p>编译方式有很多，推荐前2者：node、工具、.js文件</p>
</blockquote>
<h2 id="node方式"><a href="#node方式" class="headerlink" title="node方式"></a>node方式</h2><ol>
<li><p>全局安装less：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g <span class="keyword">less</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建、编写 .less 文件</p>
</li>
<li><p>每次编写后，到所在位置，编译成 .css 文件。（注意之后的html中<strong>要引入的是 .css</strong>）</p>
<p>非压缩版本:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">lessc</span> <span class="selector-tag">styles</span><span class="selector-class">.less</span> <span class="selector-tag">styles</span><span class="selector-class">.css</span></span><br></pre></td></tr></table></figure>

<p>压缩版本：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">lessc</span> <span class="selector-tag">-x</span> <span class="selector-tag">style</span><span class="selector-class">.less</span> <span class="selector-tag">style</span><span class="selector-class">.css</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="工具方法"><a href="#工具方法" class="headerlink" title="工具方法"></a>工具方法</h2><ol>
<li>下载工具：如<a href="http://koala-app.com/index-zh.html" target="_blank" rel="noopener">Koala（考拉）</a>（可无脑下一步，设中文、要重启）</li>
<li>创建、编写 .less 文件</li>
<li>拖放<strong>目录</strong>到 Koala，然后点击 Refresh(编译)，就会生成在目录里生成.css。（然后编写.less时，.css会监听、自动编译，不需要再重新编译了）（注意：目录不能有中文，会报错）<ul>
<li>默认为非压缩版</li>
<li>压缩版：左击 .less 文件，选输出方式为compress，执行编译</li>
</ul>
</li>
<li>在html中引入 .css文件</li>
</ol>
<h1 id="less基本语法"><a href="#less基本语法" class="headerlink" title="less基本语法"></a>less基本语法</h1><blockquote>
<p>1、基本语法：变量、运算、自定义函数、嵌套、用&amp;写伪类</p>
<p>2、它的引入跟css的一样：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"a"</span>;	<span class="comment">//library.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"b.css"</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><p>变量——<code>@变量名:值;</code></p>
</li>
<li><p>运算：有＋- * /，如</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">300px</span>-<span class="number">100</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义函数</p>
</li>
</ul>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">.函数名<span class="comment">(形参)</span>&#123;<span class="comment">//定义,传参。可以有默认值，如.fn(@fz:20px)&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.函数名<span class="comment">(实参)</span>	<span class="comment">//调用</span></span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fn</span>(<span class="variable">@fz</span>)&#123;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="variable">@fz</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="selector-class">.fn</span>(<span class="number">200px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>嵌套，如</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">场景：</span><br><span class="line"><span class="params">&lt;ul&gt;</span></span><br><span class="line">	<span class="params">&lt;li&gt;</span><span class="params">&lt;span&gt;</span><span class="params">&lt;span&gt;</span><span class="params">&lt;/li&gt;</span></span><br><span class="line"><span class="params">&lt;/ul&gt;</span></span><br><span class="line">正常情况要：</span><br><span class="line"><span class="class">ul </span>&#123;&#125;</span><br><span class="line">ul <span class="class">li </span>&#123;&#125;</span><br><span class="line">ul li <span class="class">span </span>&#123;&#125;</span><br><span class="line">叠加就可以在.less中写：</span><br><span class="line"><span class="class">ul </span>&#123;</span><br><span class="line">	list-style: none;</span><br><span class="line">	<span class="class">li </span>&#123;</span><br><span class="line"><span class="symbol">		color:</span> orange;</span><br><span class="line">		<span class="class">span </span>&#123;</span><br><span class="line"><span class="symbol">			display:</span> block;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>用&amp;写伪类，如在.less中写</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">	&amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">		<span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">编译成<span class="selector-class">.css</span>后：</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>11-H5C3-移动端的库、插件</title>
    <url>/2020/03/28/11-H5C3-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E5%BA%93%E3%80%81%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="zepto（js库）"><a href="#zepto（js库）" class="headerlink" title="zepto（js库）"></a>zepto（js库）</h1><p>jQuery.js     适用于pc</p>
<p>zepto.js       适用于移动端 (轻量级)</p>
<a id="more"></a>

<p>相同点：<br>        api几乎差不多一样（会jQ，也就差不多会zepto，不用单独去学）<br>不同点：<br>    事件不同、体积不同</p>
<!--more-->

<p>注意:</p>
<ul>
<li><p>要用某些事件，必须要引入zepto的对应分支模块，否则显示no a function。引入哪些模块，去官网查</p>
</li>
<li><p>在移动端页面中使用click事件会有300毫秒的延迟</p>
<ul>
<li><p>用touch.js模块中的的tap代替，就没有延迟    </p>
</li>
<li><p>touch.js里的常用事件：</p>
<p>swipeLeft<br>swipeRight<br>swipeUp<br>swipeDown</p>
</li>
</ul>
</li>
</ul>
<h2 id="案例-移动端卡片册-fx模块"><a href="#案例-移动端卡片册-fx模块" class="headerlink" title="案例-移动端卡片册(fx模块)"></a>案例-移动端卡片册(fx模块)</h2><p>注意：zepto要用动画必须引入fx.js模块</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">width</span><span class="selector-pseudo">:100vw</span>;</span></span><br><span class="line">		height: 100vh;</span><br><span class="line">		overflow: hidden;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ul&#123;</span><br><span class="line">		list-style: none;</span><br><span class="line">		transition: all 1s;//也可在animate()中加</span><br><span class="line">	&#125;</span><br><span class="line">	ul li&#123;</span><br><span class="line"><span class="css">		<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		overflow: hidden;</span><br><span class="line"><span class="css">		<span class="selector-tag">width</span><span class="selector-pseudo">:100vw</span>;</span></span><br><span class="line">		height: 100vh;</span><br><span class="line">	&#125;</span><br><span class="line">	ul li img&#123;</span><br><span class="line"><span class="css">		<span class="selector-tag">width</span><span class="selector-pseudo">:100vw</span>;</span></span><br><span class="line">		height: 100vh;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'zepto.min.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'touch.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'fx.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> width = $(<span class="string">"li"</span>).first().width();</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> liLen = $(<span class="string">"li"</span>).length;<span class="comment">//li个数</span></span></span><br><span class="line"><span class="javascript">	$(<span class="string">"ul"</span>).width(width*liLen);<span class="comment">//给ul设置宽度</span></span></span><br><span class="line">	</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> index = <span class="number">0</span>;<span class="comment">//图片张数</span></span></span><br><span class="line"><span class="javascript">	$(<span class="string">"ul"</span>).on(<span class="string">"swipeLeft"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">		index++;</span><br><span class="line"><span class="actionscript">		<span class="keyword">if</span>(index&gt;=liLen)&#123;<span class="comment">//图片张数比li个数大就从第一张重新开始</span></span></span><br><span class="line">			index=0;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="javascript">		$(<span class="keyword">this</span>).animate(&#123;</span></span><br><span class="line"><span class="actionscript">			transform:<span class="string">'translateX(-'</span>+index*width+<span class="string">'px)'</span></span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">	$(<span class="string">"ul"</span>).on(<span class="string">"swipeRight"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">		index--;</span><br><span class="line">		if(index&lt;0)&#123;</span><br><span class="line">			index=liLen-1;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="javascript">		$(<span class="keyword">this</span>).animate(&#123;</span></span><br><span class="line"><span class="actionscript">			transform:<span class="string">'translateX(-'</span>+index*width+<span class="string">'px)'</span></span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="iscroll-js插件-列表滑动、区块滑动、上拉刷新、下拉加载等"><a href="#iscroll-js插件-列表滑动、区块滑动、上拉刷新、下拉加载等" class="headerlink" title="iscroll.js插件-列表滑动、区块滑动、上拉刷新、下拉加载等"></a>iscroll.js插件-列表滑动、区块滑动、上拉刷新、下拉加载等</h1><p>要引入iscroll.js</p>
<p><strong>是什么？</strong></p>
<pre><code>IScroll.js插件是兼容所有移动端滚动条事件的插件，在某些安卓机中，我们无法通过overflow:scroll这个css属性来出现滚动条；它也可以非常好的在一个容器元素中处理滚动;</code></pre><p><strong>举例？</strong></p>
<p>比如你做了弹性盒布局，中间内容多就会把底部挤掉，用overflow:hidden;会导致中间内容不能继续看了，这就需要用到iscroll.js模块了</p>
<p><strong>怎么用？</strong></p>
<p>前提：下载、引入了</p>
<ol>
<li><p>要<strong>给滚动区域</strong>  加入一个  <strong>父元素</strong>。（原因：iscroll是给<strong>父元素的第一个元素节点</strong>添加滚动事件）</p>
</li>
<li><p>父元素的高度值要<strong>小于</strong>滚动区块的高度（否则无法在滚动区块滚动）——</p>
<p>给父元素设</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在JS中加入<code>new IScroll(&quot;.main&quot;);</code></p>
</li>
</ol>
<p><strong>可设参数：</strong>可去百度看</p>
<pre><code>new IScroll(&quot;.main&quot;,{...});

scrollbars: true   是否显示滚动条。默认为false
fadeScrollbars:true  滚动条淡入淡出效果(前提:滚动条显示了)。默认为false
bounce: false   滚动到达容器边界时是否执行反弹动画。默认为true;
click:true   (重要)iScroll禁止默认鼠标的点击行为，如果要使用设置true;默认为false;</code></pre><p><strong>案例的demo:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:100vw</span>;</span></span><br><span class="line">    height: 100vh;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line">header,footer&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>:<span class="selector-id">#fff</span>;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">&#125;</span><br><span class="line">section&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">flex</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">ul li&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">    height: 100px;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.main</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">    height: 100%;</span><br><span class="line">    position: relative;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'main'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>吴亦凡登英国《tmrw》封面<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>中央戏剧学院新生报到<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>范冰冰首次回应与李晨婚事<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>林妙可小短裙造型一言难尽<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>不老女神温碧霞穿连衣裙秀美腿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>吴亦凡登英国《tmrw》封面<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>中央戏剧学院新生报到<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>范冰冰首次回应与李晨婚事<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>林妙可小短裙造型一言难尽<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>不老女神温碧霞穿连衣裙秀美腿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'iscroll.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> IScroll(<span class="string">".main"</span>,&#123;</span></span><br><span class="line"><span class="actionscript">    scrollbars: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">    fadeScrollbars:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">    bounce: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">    click:<span class="literal">true</span> </span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="swiper插件-图片切换、轮播"><a href="#swiper插件-图片切换、轮播" class="headerlink" title="swiper插件-图片切换、轮播"></a>swiper插件-图片切换、轮播</h1><blockquote>
<p>用途：图片切换、轮播</p>
</blockquote>
<p>也叫滑动插件</p>
<p>官网：<a href="https://www.swiper.com.cn/" target="_blank" rel="noopener">https://www.swiper.com.cn/</a></p>
<p>可到官网查看有哪些滑动效果    </p>
<p><strong>使用：</strong></p>
<ol>
<li>获取、引入swiper.js、swiper.css（如到官网，有文件下载、CDN、包管理下载）</li>
<li>先把dom元素赋值：即用到它的div盒子，把图片放进去就好。（不需要自己去设置轮播样式）</li>
<li>加new Swiper。（就可滑动了。不过若用的图片大小不一样，则你要再设下样式）</li>
<li>设置功能（参数）<ul>
<li>loop:true        循环</li>
<li>autoplay:true         自动播放，默认3s一次</li>
<li>分页器         要加入分页器：需要把盒子拿过来，再把Js对象拿过来。要设分页器样式，去检查点是哪加的，自定义覆盖掉，不要去改原文件。不想用小圆点，设type</li>
</ul>
</li>
<li>解决掉块问题：不给高，给background、padding-bottom</li>
</ol>
<p><strong>demo演示</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">width</span><span class="selector-pseudo">:100vw</span>;</span></span><br><span class="line">		height: 100vh;</span><br><span class="line">		display: flex;</span><br><span class="line">		flex-direction: column;</span><br><span class="line">		overflow: hidden;</span><br><span class="line">	&#125;</span><br><span class="line">	header,footer&#123;</span><br><span class="line"><span class="css">		<span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">		line-height: 50px;</span><br><span class="line"><span class="css">		<span class="selector-tag">color</span>:<span class="selector-id">#fff</span>;</span></span><br><span class="line">		text-align: center;</span><br><span class="line">	&#125;</span><br><span class="line">	section&#123;</span><br><span class="line"><span class="css">		<span class="selector-tag">flex</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line">	ul&#123;</span><br><span class="line">		list-style: none;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.swiper-wrapper</span>&#123;</span></span><br><span class="line">		width: 100%;</span><br><span class="line">		height: 0;</span><br><span class="line"><span class="css">		<span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		padding-bottom: 50%;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.swiper-slide</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">		width: 100%;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.swiper-pagination-bullet-active</span>&#123;</span></span><br><span class="line">		background: orange;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">header</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">footer</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'swiper.min.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Swiper(<span class="string">'.swiper-container'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">	loop:<span class="literal">true</span>,</span></span><br><span class="line">	pagination: &#123;</span><br><span class="line"><span class="actionscript">	   el: <span class="string">'.swiper-pagination'</span>,</span></span><br><span class="line"><span class="actionscript">	   type: <span class="string">'fraction'</span></span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="echo-js插件-图片懒加载-预加载"><a href="#echo-js插件-图片懒加载-预加载" class="headerlink" title="echo.js插件-图片懒加载(预加载)"></a>echo.js插件-图片懒加载(预加载)</h1><blockquote>
<p>举例：</p>
<p>如你有100张图片，用户只看了10张，但你还是要加载100张，就浪费了性能</p>
<p>如百度图片，往下拖动，它在加载图片</p>
<p>什么叫懒加载？即你用到时才加载</p>
</blockquote>
<p>使用:</p>
<ol>
<li><p>引入echo.js</p>
</li>
<li><p>在dom的图片节点上加入（src就不用了，也可以在src里加入另一张图片作为到图片位置时加载前显示的图片。原理：data-echo经过判断，来决定把图片是否放到src里）</p>
<p><code>data-echo=&#39;要加载的图片路径&#39;</code></p>
</li>
<li><p><code>echo.init()</code>即可</p>
</li>
</ol>
<p>demo:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    *&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line">    img&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">        height: 100px;</span><br><span class="line"><span class="css">        <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">        display: block;</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-echo</span>=<span class="string">'1.jpg'</span> <span class="attr">src</span>=<span class="string">'to.png'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'echo.min.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">echo.init();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>10-H5C3响应式布局</title>
    <url>/2020/03/28/10-H5C3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="media-响应式布局（媒体查询）"><a href="#media-响应式布局（媒体查询）" class="headerlink" title="@media 响应式布局（媒体查询）"></a>@media 响应式布局（媒体查询）</h1><h2 id="一、什么是响应式布局："><a href="#一、什么是响应式布局：" class="headerlink" title="一、什么是响应式布局："></a>一、什么是响应式布局：</h2><p><strong>一套代码实现多种设备访问一致性(pc、平板、手机)</strong></p>
<p>优点： 一直保持<strong>一个url</strong>，<strong>一套代码</strong></p>
<p>缺点： 浏览器支持程度 (ie8和以下就不兼容了)</p>
<a id="more"></a>

<h2 id="二、-media-使用"><a href="#二、-media-使用" class="headerlink" title="二、@media 使用"></a>二、@media 使用</h2><pre><code>语法格式：
    @media only screen and (max-width:700px){

    }

    only   : 可以排除不支持媒体查询的浏览器
    screen ：设备类型
    max-width ：设备特性（如设备小于700像素展现成什么样....）

    @media only screen and (max-width:300px) and (min-width:500px){

    }    //设备大于300px，小于500px展现成什么样....</code></pre><p>基本使用例子：设备小于300px时，盒子蓝色；设备300-500px时，盒子橘色；设备大于500px时，盒子红色</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">'box'</span>&gt;&lt;/div&gt;</span><br><span class="line">...</span><br><span class="line">.<span class="built_in">box</span> &#123;</span><br><span class="line">	<span class="built_in">height</span>: <span class="number">100</span>px;</span><br><span class="line">	<span class="built_in">background</span>: <span class="built_in">red</span>;</span><br><span class="line">&#125;</span><br><span class="line">@media only screen and (<span class="built_in">max</span>-<span class="built_in">width</span>:<span class="number">300</span>px)&#123;</span><br><span class="line">	.<span class="built_in">box</span>&#123;</span><br><span class="line">		<span class="built_in">background</span>: <span class="built_in">blue</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">@media only screen and (<span class="built_in">min</span>-<span class="built_in">width</span>:<span class="number">300</span>px) and (<span class="built_in">max</span>-<span class="built_in">width</span>:<span class="number">500</span>px)&#123;</span><br><span class="line">	.<span class="built_in">box</span>&#123;</span><br><span class="line">		<span class="built_in">background</span>: orange;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小练习-网站头部布局"><a href="#小练习-网站头部布局" class="headerlink" title="小练习-网站头部布局"></a>小练习-网站头部布局</h2><p>当小于700px时，则导航栏从 几个导航 变成 1个在左边的首页导航：(关键点：用display来做。不用弹性盒做，太麻烦，要改的多)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">li</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">li</span>&gt;</span>案例<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">li</span>&gt;</span>开发者中心<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">li</span>&gt;</span>社区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">nav</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>:none;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-witdh:</span><span class="number">700px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">nav</span>&#123;</span><br><span class="line">        <span class="attribute">text-align</span>:left;</span><br><span class="line">        <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span>+<span class="selector-tag">li</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>:none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h1><p>不同设备加载不同图片</p>
<blockquote>
<p>如banner图，从pc端到移动端，虽说压缩不失真，但占用一样，浪费流量。</p>
</blockquote>
<p>1、要这样去用：</p>
<pre><code>&lt;picture&gt;
    &lt;!--()里写设备尺寸：如大于多少、小于多少--&gt;
    &lt;source srcset=&apos;路径&apos; media=&apos;()&apos;/&gt;

    &lt;img srcset=&quot;&quot;&gt; &lt;!--否则显示这个--&gt;
&lt;/picture&gt;</code></pre><p>2、<strong>注意：</strong>多张图片时顺序不能乱，写反就失效！</p>
<p>​                 假如你有3个banner图，你要展示3个不同的尺寸，那么就要有3套picture</p>
<p>3、一张图的简单例子：大于1600px，显示3；大于800px，显示2；否则显示1。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--顺序不能乱--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">'3.jpg'</span> <span class="attr">media</span>=<span class="string">'(min-width:1600px)'</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">'2.jpg'</span> <span class="attr">media</span>=<span class="string">'(min-width:800px)'</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">"1.jpg"</span>&gt;</span> <span class="comment">&lt;!--否则显示这个--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>09-H5C3自适应布局</title>
    <url>/2020/03/28/09-H5C3%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="开发移动端页面注意"><a href="#开发移动端页面注意" class="headerlink" title="开发移动端页面注意"></a>开发移动端页面注意</h1><ol>
<li><p>在pc端开发，要切换到手机开发的模式：</p>
<p>在浏览器右击检查-》切换模式，在省略号那可以调。</p>
</li>
<li><p>html中必须添加：</p>
</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">1.设置视口，否则会出现布局的视口和显示不一</span><br><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">'viewport'</span> <span class="attribute">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h1><h2 id="px、em、rem"><a href="#px、em、rem" class="headerlink" title="px、em、rem"></a>px、em、rem</h2><blockquote>
<p>视情况去用。比如淘宝移动端，中间部分一定是计算后的，头部、尾部的文字、高一定是固定死的。</p>
<p>浏览器字体规范：  默认字体大小16px  最小值12px。(<strong>移动端</strong>会强制把小于12px的字体转换为12px的)</p>
<p>一般情况会用rem多些而不用em，因为太麻烦，看下面。</p>
</blockquote>
<ul>
<li><p>绝对单位     px</p>
</li>
<li><p>相对单位</p>
<ul>
<li>em : 针对于<strong>父元素</strong></li>
<li><strong>rem</strong>: 针对于<strong>根(html)元素</strong>。（倍数关系。如根元素文字设为10px或62.5%或0.625em(三者相等)，div文字设为2rem，则2rem=10px*2=20px）</li>
</ul>
</li>
<li><p><strong>以html进行</strong>的单位换算：</p>
<ul>
<li>1em = 16px</li>
<li>10px = 0.625em</li>
<li>10px = 62.5%</li>
</ul>
</li>
</ul>
<p>怎么完全避免移动端强制转换小于12px字体为12px导致的一系列rem问题？</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">	font-size: 625%; //原先为62.5%=10px,被强制转换影响了下面的rem。解决方法：放大10倍</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	width: .3rem;//原先为3rem，受到影响。用了上面的解决方法后，所以改为.3rem，height同理。</span><br><span class="line">	<span class="selector-tag">height</span>: <span class="selector-class">.3rem</span>;</span><br><span class="line">	<span class="selector-tag">background</span>: <span class="selector-tag">red</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="vh-、vw"><a href="#vh-、vw" class="headerlink" title="vh 、vw"></a>vh 、vw</h2><p>100vh、100vw相当于100%的高、宽，并把屏幕填充满。</p>
<p>应用场景： 一般给div设100%宽、高，宽会填充满屏幕，高不会，这时候就要将2个100%改为<code>width:100vh;height:100vh;</code></p>
<p>例子：让图片占满一个移动端屏幕</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">	<span class="attribute">list-style</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100vw</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100vh</span>;</span><br><span class="line">	<span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100vw</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="淘宝布局"><a href="#淘宝布局" class="headerlink" title="淘宝布局"></a>淘宝布局</h2><p><strong>让你根变化，里面的内容就发生变化。</strong>——它不是改变viewport，而是改变根的font-size，它有个动态库。</p>
<p>解决方法：引入一些库 或 响应式布局 去做。</p>
<p>常见误区——正常情况，放大缩小屏幕是不会有变化的，如下：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;div&gt;</span>你好<span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="class">html </span>&#123;</span><br><span class="line">	font-size: <span class="number">20</span>px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class">div </span>&#123;</span><br><span class="line"><span class="symbol">	width:</span> <span class="number">3</span>rem;</span><br><span class="line"><span class="symbol">	height:</span> <span class="number">3</span>rem;</span><br><span class="line"><span class="symbol">	background:</span> red;</span><br><span class="line">	text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="自适应布局-适配-——网页适应各种屏幕大小"><a href="#自适应布局-适配-——网页适应各种屏幕大小" class="headerlink" title="自适应布局(适配)——网页适应各种屏幕大小"></a>自适应布局(适配)——网页适应各种屏幕大小</h1><blockquote>
<p>各种屏幕大小不同，那该怎么布局，让页面完全适应各种屏幕呢？</p>
<p>当然适配方式不止这一种，淘宝是这样做的（而网易的设计图是640的）。</p>
</blockquote>
<p><strong>怎么做适配？</strong></p>
<p>方法一：（借鉴淘宝的）</p>
<ol>
<li>需要<strong>引入font.js</strong>（淘宝官方开源提供的）<ul>
<li>它能改变html的font-size</li>
<li>注意：之后就不要自己给html的font-size加设置了</li>
<li>该JS中的初始font-size设为37.5px，所以1em=37.5px</li>
<li>移动端webapp中：<strong>ui(美工)给的设计图大小一般是750的</strong>（原因：1、图片由大变小不会失真，而相反则会 2、大部分手机再大也不会大于375，而750➗2=375，正好就是iPhone6的尺寸）。</li>
</ul>
</li>
<li><strong>计算。</strong>开发移动端webapp要在375尺寸(iPhone6尺寸）下开发：比如在设计图量出某元素300，那么就要<strong>300➗2=150，之后就要按照你的html代码去算了（即跟37.5对比）：150➗37.5=4rem</strong>，则在html中写4rem。这样就会自动变大变小</li>
<li>（注意：如果ui给的不是750的，就要自己做出相应改动了）</li>
</ol>
<h1 id="双飞翼布局（pc）"><a href="#双飞翼布局（pc）" class="headerlink" title="双飞翼布局（pc）"></a>双飞翼布局（pc）</h1><blockquote>
<p>最早由淘宝提出、实现的。</p>
<p>经常会在网站后台的页面中去使用。</p>
</blockquote>
<p>1、什么是双飞翼布局？</p>
<ul>
<li>分为3栏、2栏的。</li>
<li>2栏：左侧（菜单栏：xx管理…）宽度是固定死的，右侧（内容）自适应的</li>
<li>3栏：左侧、右侧固定死，中间自适应</li>
</ul>
<p>2、常问面试题：    </p>
<p>3栏布局，左右是固定300宽度，中间内容自适应，dom优先加载：中间内容</p>
<p>那怎么做呢？</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">'main'</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">div</span> class=<span class="string">'content'</span>&gt;</span><br><span class="line">		&lt;<span class="selector-tag">div</span> class=<span class="string">'item'</span>&gt;中&lt;/div&gt; &lt;!--<span class="number">4</span>做出的改动：包裹了个盒子--&gt;</span><br><span class="line">	&lt;/div&gt;<span class="comment">//优先加载：所以要提到最前面</span></span><br><span class="line">	&lt;<span class="selector-tag">div</span> class=<span class="string">'left'</span>&gt;左&lt;/div&gt;</span><br><span class="line">	&lt;<span class="selector-tag">div</span> class=<span class="string">'right'</span>&gt;右&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line">.main&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">float</span>: left; <span class="comment">//1、左右会浮动，中间不会。因为中间宽度100%</span></span><br><span class="line">&#125;</span><br><span class="line">,<span class="attribute">left</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;<span class="comment">//固定宽度100</span></span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	<span class="comment">//2、左被中挤下来了，怎么让左去左上呢？-100%</span></span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;<span class="comment">//固定宽度100</span></span><br><span class="line">	<span class="attribute">background</span>: blue;</span><br><span class="line">	<span class="comment">//3、右被中挤下来了，怎么让右去右上呢？-本身宽</span></span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">	<span class="comment">//4、到此时，调屏幕左右宽度不会发生变化，中间会发生变化。但中间文字不见了。给中间加个盒子，内容放里面</span></span><br><span class="line">	<span class="attribute">background</span>: orange;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">item &#123;</span><br><span class="line">	<span class="attribute">padding-left</span>: <span class="number">100px</span>;<span class="comment">//5.给加的盒子一个padding-left、padding-right值。到此结束</span></span><br><span class="line">	<span class="attribute">padding-right</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="弹性盒布局（移动端）"><a href="#弹性盒布局（移动端）" class="headerlink" title="弹性盒布局（移动端）"></a>弹性盒布局（移动端）</h1><p><strong>1、什么是弹性盒布局</strong></p>
<p>可伸缩的盒子。可以跟随屏幕大小发生变化</p>
<p>优势：</p>
<p>1、写起来比较简单</p>
<p>2、灵活性、代码优雅</p>
<p>缺点：不兼容ie和安卓低级版本</p>
<p>新弹性盒（讲）</p>
<p>老弹性盒：和新的道理一样，只是属性和值不一样。</p>
<p><strong>2、使用</strong></p>
<p>容器                     （父元素）</p>
<p>容器成员|项目    （子元素）</p>
<p>弹性盒布局布局有很多属性，你要知道给父元素还是子元素加。</p>
<ul>
<li><p>给容器（父元素）加的属性（6个）：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="string">display:</span> flex;	(必须有)让容器成员是弹性的项目（变成不换行的弹性盒子）</span><br><span class="line"><span class="number">2</span>、flex-direction	(常用)决定主轴是什么方向（项目的排序方向。<span class="string">row:</span>横向（默认），<span class="string">column:</span>纵向，row-<span class="string">reverse:</span>横向翻转，column-<span class="string">reverse:</span>纵向翻转）</span><br><span class="line"><span class="number">3</span>、flex-wrap	(不常用)决定是否换行（<span class="string">nowrap:</span>不换行(默认),<span class="string">wrap:</span>换行，wrap-<span class="string">reverse:</span>换行翻转）</span><br><span class="line"><span class="number">4</span>、flex-flow	(不常用)上<span class="number">2</span>者的复合（默认是row nowrap）</span><br><span class="line"></span><br><span class="line">让项目居中：</span><br><span class="line"><span class="number">5</span>、justify-content	横向盒子摆放（flex-<span class="string">start:</span>靠左（默认），flex-<span class="string">end:</span>靠右，<span class="string">center:</span>水平居中，space-<span class="string">between:</span>两端对齐，项目之间的距离都相等，space-<span class="string">around:</span>每个项目两侧距离相等，两侧距离比项目之间的距离小一倍）</span><br><span class="line"><span class="number">6</span>、align-items	纵向盒子摆放（flex-<span class="string">start:</span>靠山，flex-<span class="string">end:</span>靠下，<span class="string">center:</span>垂直居中，<span class="string">baseline:</span>项目第一行文字为基准线，<span class="string">stretch:</span>如果容器没有设置高度或者auto情况，则占满整个高度）</span><br></pre></td></tr></table></figure>
</li>
<li><p>给容器成员|项目（子元素）加的属性（5个）：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、order	排序方式。默认值<span class="number">0</span>，数值越小，越靠前</span><br><span class="line"><span class="number">2</span>、flex-grow	默认值<span class="number">0</span>（不放大），比例放大</span><br><span class="line"><span class="number">3</span>、flex-shrink	默认值<span class="number">1</span>（不比例缩小），比例缩小，<span class="number">0</span>(不弹性)</span><br><span class="line"><span class="number">4</span>、flex-basis	相当于width，圣杯布局中会用</span><br><span class="line"><span class="number">5</span>、flex	(常用，<span class="number">234</span>的复合)默认值<span class="number">0</span> <span class="number">1</span> <span class="built_in">auto</span>（不放大、不缩小、宽度或高度<span class="built_in">auto</span>自动撑满。后<span class="number">2</span>个值可选）</span><br><span class="line">常写：flex: <span class="number">1</span>;	   铺满剩余空间。适用于移动端网站</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>移动端网站该怎么去做:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'viewport'</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span>	<span class="comment">&lt;!--加这原因：要flex--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">header</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'left'</span>&gt;</span>左<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'center'</span>&gt;</span>中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right'</span>&gt;</span>右<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">footer</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    height: 100vh;//注意：要让父盒子高填满屏幕，否则高不够</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    flex: 1;//让中间内容自动填满	</span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-tag">pink</span>;</span><br><span class="line">    <span class="selector-tag">flex</span>: <span class="selector-tag">flex</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="圣杯布局（pc）"><a href="#圣杯布局（pc）" class="headerlink" title="圣杯布局（pc）"></a>圣杯布局（pc）</h1><p>头部、底部高固定；中间两侧宽固定，中间内容自适应。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span>	<span class="comment">&lt;!--加这原因：要flex--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">header</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">section</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">footer</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    height: 100vh;//注意：要让父盒子高填满屏幕，否则高不够</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    flex: 1;//让中间内容自动填满	</span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-tag">blue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>08-C3变形、动画</title>
    <url>/2020/03/28/08-C3%E5%8F%98%E5%BD%A2%E3%80%81%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h1 id="2D、3D变形"><a href="#2D、3D变形" class="headerlink" title="2D、3D变形"></a>2D、3D变形</h1><blockquote>
<p>一般配合动画去用 ，才能显示它的效果。不急，我们先看完变形的值</p>
</blockquote>
<p>属性和值</p>
<a id="more"></a>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">transform：css3属性</span><br><span class="line"></span><br><span class="line">transform的值：</span><br><span class="line"><span class="number">2</span>d》	</span><br><span class="line">    <span class="number">1</span>、位移（x、y可用px、百分比）</span><br><span class="line">        translate(x,y)	</span><br><span class="line">        translateX(x)	</span><br><span class="line">        translateY(y)		   </span><br><span class="line">    <span class="number">2</span>、缩放（x、y可用倍数）</span><br><span class="line">        scale(x,y)	</span><br><span class="line">        scaleX(x)		</span><br><span class="line">        scaleY(y)		    </span><br><span class="line">    <span class="number">3</span>、旋转（可用度数deg）</span><br><span class="line">    rotate(angle)		</span><br><span class="line">    <span class="number">4</span>、倾斜（可用度数deg）</span><br><span class="line">    skew(x-angle,y-angle)	</span><br><span class="line">    skewX(angle)		</span><br><span class="line">    skewY(angle)		</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>d》找个<span class="number">3</span>D空间图去理解</span><br><span class="line">	<span class="number">1</span>、注意：想用<span class="number">3</span>d效果必须加入perspective值：</span><br><span class="line">	perspective	规定 <span class="number">3</span>D 元素的透视效果。（给父元素加）    </span><br><span class="line">		perspective:<span class="number">500</span>px ===&gt;越远</span><br><span class="line">		perspective:<span class="number">50</span>px  ===&gt;越近	</span><br><span class="line">	辅助：<span class="number">2</span><span class="number">-3</span></span><br><span class="line">	<span class="number">2</span>、transform-style:preserve<span class="number">-3</span>d	规定被嵌套元素如何在 <span class="number">3</span>D 空间中显示。不加可能导致某些子元素不在<span class="number">3</span>d空间内（给父元素加）</span><br><span class="line">	<span class="number">3</span>、perspective-origin	规定 <span class="number">3</span>D 元素视点位置。（给父元素加。设<span class="number">2</span>个值，可以用单位、百分比）</span><br><span class="line">	</span><br><span class="line">	<span class="number">4</span>、位移</span><br><span class="line">	translateZ(z)	z轴：平面感觉——远近</span><br><span class="line">	translate3d(x,y,z)			</span><br><span class="line">	<span class="number">5</span>、缩放</span><br><span class="line">	scale3d(x,y,z)	</span><br><span class="line">	scaleZ(z)	</span><br><span class="line">	<span class="number">6</span>、旋转</span><br><span class="line">	rotate3d(x,y,z,angle)		</span><br><span class="line">	rotateZ(angle)		</span><br><span class="line">	rotateX(angle)		</span><br><span class="line">	rotateY(angle)		</span><br><span class="line">注意：值的顺序不一样，效果就不一样</span><br></pre></td></tr></table></figure>

<p>transfrom有内核（若发现某个浏览器执行不了，就给transfrom加前缀）但不用担心，后面有些框架会自带，包括编译工具会给你自动编译出来。但要清楚</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-ms代表【ie】内核识别码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-moz代表火狐【firefox】内核识别码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-webkit代表谷歌【chrome】/苹果【safari】内核识别码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-o代表欧朋【opera】内核识别码</span></span><br></pre></td></tr></table></figure>

<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>配合transform用。</p>
<p>有2个动画：animation、transition</p>
<p>两者的区别：</p>
<ul>
<li>transition    要有事件支持（点击，鼠标移入）</li>
<li>animation    自动触发</li>
</ul>
<h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><p>使用格式：（关键帧keyframes）</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称&#123;</span><br><span class="line"></span><br><span class="line">    0%&#123;</span><br><span class="line">		...样式、transform</span><br><span class="line">    &#125;</span><br><span class="line">    30%&#123;</span><br><span class="line">		...</span><br><span class="line">    &#125;</span><br><span class="line">    100%&#123;</span><br><span class="line">		...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">元素 &#123;</span><br><span class="line">    <span class="attribute">animation</span>: ...;</span><br><span class="line">//正常用简写：animation:名称 时间 速度曲线 延迟 次数 反向;(前2者需要)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>值：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">animation</span>-name	规定需要绑定到keyframe 的动画名称。</span><br><span class="line"><span class="built_in">animation</span>-duration	规定完成动画所花费的时间，以秒或毫秒计。</span><br><span class="line"><span class="built_in">animation</span>-timing-function	规定动画的速度曲线。</span><br><span class="line"><span class="built_in">animation</span>-<span class="built_in">delay</span>	规定在动画开始之前的延迟。</span><br><span class="line"><span class="built_in">animation</span>-iteration-count	规定动画应该播放的次数。</span><br><span class="line"><span class="built_in">animation</span>-direction	规定是否应该轮流反向播放动画。</span><br></pre></td></tr></table></figure>

<h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><ul>
<li><p>transition:属性 时间 速度曲线 延迟</p>
</li>
<li><p>注意：transition:all(过渡所有)、是在原本盒子上加</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>07-C3新增选择器、一些属性</title>
    <url>/2020/03/28/07-C3%E6%96%B0%E5%A2%9E%E9%80%89%E6%8B%A9%E5%99%A8%E3%80%81%E4%B8%80%E4%BA%9B%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h1><pre><code>值可以有引号
css2：
    [属性] ===》选取有这个属性的节点
    [属性=值] ==》选取这个属性等于这个值的节点
    [属性~=值] ==》选取这个属性包含这个值的
    [属性|=值] ==》选取这个属性以这个值开头的
css3：
    [属性^=值]  ==&gt;这个属性的值以什么开头的
    [属性$=值]  ==&gt;这个属性的值以什么结尾的
    [属性*=值]  ==&gt;这个属性含有这个值的</code></pre><a id="more"></a>

<h1 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h1><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">css2：</span><br><span class="line">    用户行为(动态) </span><br><span class="line">    <span class="symbol">a:</span>link</span><br><span class="line">    <span class="symbol">a:</span>hover</span><br><span class="line">    <span class="symbol">a:</span>focus</span><br><span class="line">    <span class="symbol">a:</span>visited</span><br><span class="line"><span class="symbol">css3:</span></span><br><span class="line">	<span class="number">1</span>、UI元素状态伪类选择器（重要，很多UI组件库都用这个）</span><br><span class="line">    <span class="symbol">:enabled</span>   ==》启用的</span><br><span class="line">    <span class="symbol">:disabled</span>  ==》禁用的</span><br><span class="line">    <span class="symbol">:checked</span>   ==》选中的</span><br><span class="line">    </span><br><span class="line">    <span class="number">2</span>、结构伪类选择器（nth选择器）</span><br><span class="line">    (<span class="number">1</span>)根据顺序来选择子元素</span><br><span class="line">    <span class="symbol">:first-child</span>  ==》选取第一个子元素(注意：第一个子元素不是<span class="symbol">:</span>前面加的元素就不行了)</span><br><span class="line">    <span class="symbol">:last-child</span>   ==》选取最后一个子元素</span><br><span class="line">    <span class="symbol">:nth-child</span>()  ==》选取特定元素（从头开始）</span><br><span class="line">    <span class="symbol">:nth-last-child</span>()	===》选取特定元素（从后开始）</span><br><span class="line">    注意：</span><br><span class="line">    <span class="number">1</span>》nth-child(<span class="number">2</span>) ==&gt;可从<span class="number">1</span>开始数</span><br><span class="line">    <span class="number">2</span>》nth-child(<span class="number">2</span>n) ==&gt;倍数</span><br><span class="line">    <span class="number">3</span>》nth-child中的n是几？ 他是0!!如nth-child(<span class="number">2</span>n+<span class="number">1</span>)是从<span class="number">1</span>开始</span><br><span class="line">    <span class="number">4</span>》nth-child(n+<span class="number">5</span>) ==&gt;选取大于等于<span class="number">5</span>的</span><br><span class="line">    <span class="number">5</span>》nth-child(-n+<span class="number">5</span>) ==》选取小于等于<span class="number">5</span>的</span><br><span class="line">	</span><br><span class="line">	(<span class="number">2</span>)根据类型来选择子元素</span><br><span class="line">    <span class="symbol">:first-of-type</span>   </span><br><span class="line">    <span class="symbol">:last-of-type</span></span><br><span class="line">    <span class="symbol">:nth-of-type</span>()</span><br><span class="line">    <span class="symbol">:nth-last-of-type</span>()</span><br><span class="line">(<span class="number">3</span>)</span><br><span class="line"><span class="symbol">:only-child</span>   ===&gt;选择的元素是它的父元素的唯一一个子元素(即只能有<span class="number">1</span>个子元素)；</span><br><span class="line"></span><br><span class="line"><span class="symbol">:only-of-type</span> ===&gt;选择一个元素是它的上级元素的唯一一个相同类型的子元素(即父元素下不管有什么多元素，只要只有一个p，div，span...就可以选取到);</span><br><span class="line"></span><br><span class="line"><span class="symbol">:empty</span>选择的元素里面没有任何内容。</span><br></pre></td></tr></table></figure>

<h2 id="案例-隐藏按钮选性别"><a href="#案例-隐藏按钮选性别" class="headerlink" title="案例-隐藏按钮选性别"></a>案例-隐藏按钮选性别</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">input</span> type=<span class="string">"radio"</span> name=<span class="string">'sex'</span> id=<span class="string">'a'</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"a"</span>&gt;男&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">input</span> type=<span class="string">"radio"</span> name=<span class="string">'sex'</span> id=<span class="string">'b'</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"b"</span>&gt;女&lt;/label&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>[type=<span class="string">'radio'</span>]&#123;</span><br><span class="line">	<span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">label&#123;</span><br><span class="line">	<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">padding</span>:<span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>[type=<span class="string">'radio'</span>]:checked + label&#123;</span><br><span class="line"><span class="comment">/*input下面的单选按钮，如果是选中状态，那么下面的label标签加入样式*/</span></span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="案例-雪碧图开关"><a href="#案例-雪碧图开关" class="headerlink" title="案例-雪碧图开关"></a>案例-雪碧图开关</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">input</span> type=<span class="string">"checkbox"</span> id=<span class="string">'check'</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"check"</span>&gt;&lt;/label&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>[type=<span class="string">'checkbox'</span>]&#123;</span><br><span class="line">	<span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">label&#123;</span><br><span class="line">	<span class="attribute">background</span>: url(<span class="string">'../img/kkk.png'</span>) no-repeat;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">78px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">27px</span>;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>[type=<span class="string">'checkbox'</span>]:checked + label&#123;</span><br><span class="line">	<span class="attribute">background-position</span>: -<span class="number">52px</span> <span class="number">0</span>;	<span class="comment">//这儿</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="伪元素—在页面中插入内容"><a href="#伪元素—在页面中插入内容" class="headerlink" title="伪元素—在页面中插入内容"></a>伪元素—在页面中插入内容</h1><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:after或::after</span>  ==》之后，后者支持度不高</span><br><span class="line"><span class="meta">:before或::before</span> ==》之前</span><br><span class="line"></span><br><span class="line">1》插入文本		</span><br><span class="line">:after&#123;</span><br><span class="line"><span class="code">	content:"文本内容";</span></span><br><span class="line">&#125;</span><br><span class="line">2》插入图像（如热门帖后的图标）</span><br><span class="line">:after&#123;</span><br><span class="line"><span class="code">	content:url(图片路径)</span></span><br><span class="line">&#125;</span><br><span class="line">3》计数器:2步骤</span><br><span class="line"><span class="comment">//1、如&lt;h1&gt;标题&lt;/h1&gt;&lt;h1&gt;标题&lt;/h1&gt;，想让显示标题a、标题b排下去：</span></span><br><span class="line">h1:after&#123;</span><br><span class="line"><span class="code">	content:counter(xxx,upper-alpha);//参数2:如大写字母。默认为数字顺序。可以去看官方文档</span></span><br><span class="line">&#125;	</span><br><span class="line">h1&#123;</span><br><span class="line"><span class="code">	counter-increment: xxx;/*定义了一个计数器*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2、使用上面计数器、并以 某种格式 显示计数器，如1==&gt;1、2==&gt;2</span></span><br><span class="line">h2:after&#123;</span><br><span class="line"><span class="code">	counter: counter(xxx)"==&gt;"counter(sub);</span></span><br><span class="line">&#125;</span><br><span class="line">h2&#123;</span><br><span class="line"><span class="code">	counter-increment: sub;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="伪元素——清除浮动和效果"><a href="#伪元素——清除浮动和效果" class="headerlink" title="伪元素——清除浮动和效果"></a>伪元素——清除浮动和效果</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">一、清楚浮动</span><br><span class="line">方法1、（缺点:当清除浮动多时，要多写盒子；也太麻烦）</span><br><span class="line">    在浮动元素末尾加个盒子，设置样式</span><br><span class="line">    .clearfix &#123;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line">方法2、(正常这样做。优点：只用给父盒子加一个类clearfix)</span><br><span class="line">	把下面样式设为全局的</span><br><span class="line">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;	</span><br><span class="line">		<span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">		<span class="attribute">display</span>: table;</span><br><span class="line">		<span class="attribute">clear</span>: both;</span><br><span class="line">    &#125;</span><br><span class="line">二、效果</span><br><span class="line">如鼠标移上去显示括号</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:after</span>,<span class="selector-tag">li</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">left</span>: -<span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">'\5B'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">right</span>: -<span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">'\5D'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">text-shadow:水平距离 垂直距离 模糊距离 颜色值</span><br><span class="line"></span><br><span class="line">水平距离==&gt;必须的</span><br><span class="line">垂直距离==&gt;必须的</span><br><span class="line">模糊距离==&gt;可选的</span><br><span class="line">颜色值  ==&gt;可选的</span><br><span class="line"></span><br><span class="line">可多个阴影 text-shadown:<span class="number">1</span>px <span class="number">1</span>px <span class="number">0</span> red,<span class="number">2</span>px <span class="number">2</span>px <span class="number">0</span> blue,...</span><br><span class="line"></span><br><span class="line">怎么写比较好？看工作里的需求</span><br><span class="line">body &#123;</span><br><span class="line">	background: #<span class="number">666</span>;</span><br><span class="line">&#125;</span><br><span class="line">h1 &#123;	<span class="comment">//类似荧光效果</span></span><br><span class="line">	color: #fff;</span><br><span class="line">	text-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">20</span>px red;</span><br><span class="line">&#125;</span><br><span class="line">h1 &#123;	<span class="comment">//一般</span></span><br><span class="line">	color: #<span class="number">000</span>;</span><br><span class="line">	text-shadow: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span>px #fff;</span><br><span class="line">&#125;</span><br><span class="line">h1 &#123;	<span class="comment">//类似玻璃水印效果</span></span><br><span class="line">	color: #eee;</span><br><span class="line">	text-shadow: <span class="number">5</span>px <span class="number">5</span>px <span class="number">1</span>px #<span class="number">666</span>,<span class="number">7</span>px <span class="number">7</span>px <span class="number">1</span>px #eee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、注意：css3---&gt;支持一个容器多个背景图(不过少见)</span><br><span class="line">	<span class="built_in">background</span>-<span class="built_in">image</span>:url(<span class="string">'1.png'</span>),url(<span class="string">'2.png'</span>);</span><br><span class="line">	<span class="built_in">background</span>-repeat: no-repeat;</span><br><span class="line"><span class="number">2</span>、</span><br><span class="line"><span class="built_in">background</span>-clip :   规定背景的绘制区域(裁剪)沿着边框裁剪、沿着padding裁剪、沿着内容裁剪：</span><br><span class="line"><span class="built_in">background</span>-orgin ： 规定背景图片的定位区域(显示)沿着边框、	沿着padding、沿着内容</span><br><span class="line">上面值都为border-<span class="built_in">box</span>、padding-<span class="built_in">box</span>、content-<span class="built_in">box</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、针对如图片原尺寸也占不满，放大怕失真情况。前提：要元素有宽高</span><br><span class="line"><span class="built_in">background</span>-<span class="built_in">size</span>  ： 以前较常用 </span><br><span class="line">	<span class="built_in">size</span>:<span class="number">50</span>px(左右) <span class="number">50</span>px(上下)</span><br><span class="line">	<span class="built_in">size</span>:<span class="number">50</span>% <span class="number">50</span>%</span><br></pre></td></tr></table></figure>

<h1 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>》css3边框圆角（重点）</span><br><span class="line"></span><br><span class="line">border-radius:<span class="number">10</span>px | <span class="number">10</span>%	还可规定某个角，可下面那样写，也可直接写<span class="number">2</span>、<span class="number">4</span>个值</span><br><span class="line">border-top-left-radius:<span class="number">10</span>px | <span class="number">10</span>%	</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>》css3边框图案（没啥用）（若只设了url会将图片显示在<span class="number">4</span>个角。若设了url和裁剪宽度会将图片分为<span class="number">9</span>块，除图片<span class="number">4</span>角外其它地方拉伸）</span><br><span class="line"></span><br><span class="line">border-image</span><br><span class="line"></span><br><span class="line">属性：url 裁剪宽度(不能加单位，可<span class="number">4</span>个值) 平铺|重复|拉伸（默认）(stretch|repeat|round)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>06-H5音频、视频</title>
    <url>/2020/03/28/06-H5%E9%9F%B3%E9%A2%91%E3%80%81%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<h1 id="audio音频"><a href="#audio音频" class="headerlink" title="audio音频"></a>audio音频</h1><p>1、兼容问题：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的浏览器不支持<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>	<span class="comment">&lt;!--要写上提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>2、属性:（重点）<br>src      ==&gt;音频的url<br>controls ==&gt;显示控件<br>loop     ==&gt;循环播放<br>autoplay ==&gt;自动播放<br>preload  ==&gt;页面加载时进行加载，并预备播放</p>
<p>3、js的api方法（重点。如不加控件用JS操作）<br>play()  ==&gt;开始播放<br>pause() ==&gt;暂停播放<br>4、支持格式：ogg、mp3、wav</p>
<h2 id="案例-暂停、开始图标"><a href="#案例-暂停、开始图标" class="headerlink" title="案例-暂停、开始图标"></a>案例-暂停、开始图标</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'btn'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"play.gif"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">'on'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"1.mp3"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'jquery1.7.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">	$(<span class="string">".btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">		<span class="comment">//注意是jQ，不能直接用原生方法，要转换为DOM，所以加个[0]来转换</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span>(  $(<span class="string">"img"</span>).attr(<span class="string">"class"</span>) ==<span class="string">"on"</span>)&#123;</span></span><br><span class="line"><span class="javascript">			$(<span class="string">"img"</span>).attr(<span class="string">"class"</span>,<span class="string">'off'</span>);</span></span><br><span class="line"><span class="javascript">			$(<span class="string">"img"</span>).attr(<span class="string">"src"</span>,<span class="string">'pause.gif'</span>);</span></span><br><span class="line"><span class="javascript">			$(<span class="string">"audio"</span>)[<span class="number">0</span>].pause();</span></span><br><span class="line"><span class="actionscript">		&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">			$(<span class="string">"img"</span>).attr(<span class="string">"class"</span>,<span class="string">'on'</span>);</span></span><br><span class="line"><span class="javascript">			$(<span class="string">"img"</span>).attr(<span class="string">"src"</span>,<span class="string">'play.gif'</span>);</span></span><br><span class="line"><span class="javascript">			$(<span class="string">"audio"</span>)[<span class="number">0</span>].play();</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="video视频"><a href="#video视频" class="headerlink" title="video视频"></a>video视频</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span><span class="tag">&lt;<span class="name">video</span>&gt;</span></span><br><span class="line">1、格式：ogg 、 mp4 、webm(有浏览器不认识该格式)</span><br><span class="line"></span><br><span class="line">2、属性：</span><br><span class="line">跟音频一样的属性;</span><br><span class="line">宽、高;</span><br><span class="line">poster==》视频图(各网站第一帧显示的广告)</span><br><span class="line"></span><br><span class="line">3、兼容写法：（优先加载webm，后加载mp4）</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">poster</span>=<span class="string">'1.jpg'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">'preview.webm'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">'preview.mp4'</span>&gt;</span></span><br><span class="line">	您的浏览器版本太低了</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">4、source==》资源加载 :按照网速，浏览器支持程度..</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础</title>
    <url>/2020/03/28/HTML%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h1><p>浏览器是网页显示、运行的平台。</p>
<ul>
<li>五大常用浏览器：</li>
</ul>
<p>IE、火狐（Firefox）、谷歌（Chrome）、Safari、Opera。</p>
<ul>
<li>常见的浏览器内核：</li>
</ul>
<p>Trident、Gecko、Blink、Webkit。</p>
<a id="more"></a>

<blockquote>
<p>Trident（IE、很多国内浏览器内核）</p>
<p>Gecko（Firefox内核）</p>
<p>webkit（Safari苹果浏览器、以前的chrome内核）</p>
<p>Chromium/Blink（chrome内核，是webkit的二次开发）</p>
<p>安卓、苹果手机：webkit内核</p>
<p>WP7手机：Trident</p>
</blockquote>
<h1 id="html转义符"><a href="#html转义符" class="headerlink" title="html转义符"></a>html转义符</h1><p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/html%E8%BD%AC%E4%B9%89%E7%AC%A61.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/html%E8%BD%AC%E4%B9%89%E7%AC%A62.png" alt=""></p>
<h1 id="web标准"><a href="#web标准" class="headerlink" title="web标准"></a>web标准</h1><blockquote>
<p>出现原因：各浏览器内核不同，工作原理、解析也就不同，导致显示上会有差异，所以代码要符合Web标准。</p>
</blockquote>
<p>组成：结构、表现、行为。</p>
<ul>
<li>结构：有哪些内容。主要用HTML</li>
<li>表现：内容的外观样式，主要用CSS</li>
<li>行为：内容的交互，主要用JavaScript</li>
</ul>
<h1 id="html骨架"><a href="#html骨架" class="headerlink" title="html骨架"></a>html骨架</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		...</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">HTML的单行、多行注释：<span class="comment">&lt;!-- --&gt;</span>	</span><br><span class="line">CSS的单行、多行注释：/* */</span><br><span class="line">JS单行注释：//</span><br><span class="line">JS多行注释：/* */</span><br></pre></td></tr></table></figure>

<h1 id="html标签"><a href="#html标签" class="headerlink" title="html标签"></a>html标签</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>（不懂时可查）</p>
<p>W3C : <a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a></p>
<p>MDN: <a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/</a></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>标签的属性值：用” “括起，不加单位！</li>
<li>尽量不使用 样式属性！</li>
<li>表格不是用来布局，常用于  处理、显示表格式数据</li>
</ul>
<h2 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h2><h3 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h3><p>即在合适的地方放上合适的标签。</p>
<p>遵循原则：先确定语义的HTML ，再选合适的CSS。</p>
<blockquote>
<p>原因：</p>
<ol>
<li>方便代码的阅读和维护</li>
<li>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 </li>
<li>使用语义化标签会具有更好地搜索引擎优化</li>
</ol>
</blockquote>
<h3 id="标签的关系"><a href="#标签的关系" class="headerlink" title="标签的关系"></a>标签的关系</h3><p>有2种：</p>
<p>父子关系（嵌套）、兄弟关系（并列）</p>
<h3 id="标签的分类"><a href="#标签的分类" class="headerlink" title="标签的分类"></a>标签的分类</h3><p>有3种分类方式。</p>
<ul>
<li><p>有无 <strong>语义</strong></p>
<ul>
<li>有语义标签（元素）：骨架结构标签；排版标签h,p,hr,br；文本格式化标签；图像标签img；链接标签a，base；特殊字符标签；列表标签；表格标签；表单标签共9种</li>
<li>无语义标签（div、span）：块级标签。一般：需要一行只放一个元素用div，需要一行放好几个元素用span</li>
</ul>
</li>
<li><p>是否 <strong>成对</strong></p>
<ul>
<li>单标签有：hr、br、img、base、meta、input</li>
<li>其余为双标签</li>
</ul>
</li>
<li><p>按 <strong>显示模式</strong> 分：块、行、行内块</p>
</li>
</ul>
<h3 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h3><ul>
<li>常见：h、p、div、ul、ol、li</li>
<li>作用：常用于搭建网页<strong>布局、结构</strong>。</li>
<li>特点：<ul>
<li>每个块标签单独占据一整行或多整行</li>
<li>可设置宽、高、对齐、内外边距等属性。</li>
<li>默认宽度：容器的100%</li>
<li>容纳内联标签、其他块标签（p、h文字类块标签不能放块级元素）</li>
<li>不可以看作文本</li>
</ul>
</li>
</ul>
<h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><blockquote>
<p>也叫内敛标签。</p>
</blockquote>
<ul>
<li><p>常见：a、strong、b、em、i、del、s、ins、u、span</p>
</li>
<li><p>作用：常用于  控制页面中<strong>文本样式</strong>。</p>
</li>
<li><p>特点：</p>
<ul>
<li>不占有独立的区域：和相邻行内元素在一行上。</li>
<li><strong>靠本身内容</strong>来支撑结构：高、宽、对齐等属性无效，只<strong>水平方向的padding、margin</strong>有效</li>
<li>默认宽度：本身内容  的宽度</li>
<li>容纳文本、其他行内元素（a特殊，但a里不能放a）</li>
<li>可以看作文本</li>
</ul>
</li>
</ul>
<h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><p>特殊的行内元素</p>
<ul>
<li>常见：img、input 、td</li>
<li>特点：<ul>
<li><strong>主要特点：可以对它们设置宽高、对齐、外内边距等</strong></li>
<li>和相邻行内元素（行内块）在一行上,<strong>但是之间有空白缝隙</strong></li>
<li>默认宽度：本身内容  的宽度。</li>
<li>可以看作文本</li>
</ul>
</li>
</ul>
<h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="骨架结构标签"><a href="#骨架结构标签" class="headerlink" title="骨架结构标签"></a>骨架结构标签</h3><p>主要</p>
<ul>
<li>html：文档根</li>
<li>head：文档头部(描述文档信息，必须有title)</li>
<li>title：文档标题</li>
<li>body：文档主体(存放页面内容)</li>
</ul>
<p>补充：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE  <span class="meta-keyword">html</span>&gt;</span>	文档类型</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span>  <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span>    字符集属性（通常使用UTF-8 字符集）</span><br><span class="line">注释    ``</span><br></pre></td></tr></table></figure>

<h3 id="排版标签h-p-hr-br"><a href="#排版标签h-p-hr-br" class="headerlink" title="排版标签h,p,hr,br"></a>排版标签h,p,hr,br</h3><p>h:    页面标题（块级标签。 h1:只给logo、页面中最重要标题信息用。h1-h6：尺寸从大到小，  权重从高到低）</p>
<p>p:    段落（块级元素。会根据浏览器窗口的大小 自动换行。不要用p标签来插入空行）</p>
<p>hr:    水平线。（单标签）</p>
<p>br:    换行。（不要用br标签创建列表）</p>
<h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><p>b、strong    粗体（强调时才用后者）</p>
<p>i、em    斜体（强调时才用后者）</p>
<p>s、del    删除线（强调时才用后者）</p>
<p>u、ins    加下划线（强调时才用后者）</p>
<h3 id="图像标签img"><a href="#图像标签img" class="headerlink" title="图像标签img"></a>图像标签img</h3><p>img的属性：</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/imgAtt.png" alt=""></p>
<h3 id="链接标签a、base"><a href="#链接标签a、base" class="headerlink" title="链接标签a、base"></a>链接标签a、base</h3><table>
<thead>
<tr>
<th>标签名</th>
<th>作用</th>
<th>属性</th>
<th>注意</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>链接</td>
<td>href：指定链接的地址（href=”#”表示空链接）                                                                target：链接目标的弹出方式（常用值：<em>blank、</em>self；                                                  name：规定锚的名称。（可用 name 属性创建 HTML 页面中的<strong>书签</strong>。用#来跳转到name同名位置）</td>
<td>锚点定位（做书签）的方法</td>
</tr>
<tr>
<td><base  /></td>
<td>设置整体链接的打开状态</td>
<td>target：链接目标的弹出方式（常用值：<em>blank、</em>self；</td>
<td>在head部写。优先级比标签自身属性低</td>
</tr>
</tbody></table>
<p><strong>锚点定位</strong>                                                                </p>
<p>通过创建锚点链接，用户能够快速定位到目标内容。   </p>
<p>步骤1：创建锚点（被点击的）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">"#id名"</span>&gt;</span>锚点文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>步骤2：（使用锚点的id名）设置定位目标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span>第2集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="特殊字符标签"><a href="#特殊字符标签" class="headerlink" title="特殊字符标签"></a>特殊字符标签</h3><p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/zifu.png" alt=""></p>
<h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><p>无序列表：ul、li</p>
<p>有序列表：ol、li</p>
<p>自定义列表：dl、dt名词、dd名词解释（列表项前没有任何项目符号）</p>
<p>自定义列表常用来：</p>
<img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/dl-Exa.png"/>

<h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><blockquote>
<p>注意：表格不是用来布局，常用于  处理、显示表格式数据</p>
</blockquote>
<p>有以下标签：table表格、thead标题区域、tbody表主体区域、caption表格标题、tr表行、th表头、td单元格</p>
<p>用法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">caption</span>&gt;</span>...<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>...<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>..<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>...<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>表的属性：</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/tableAtt.png" alt=""></p>
<p><strong>合并单元格（重点）</strong></p>
<p>跨行合并：rowspan </p>
<p>跨列合并：colspan</p>
<h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><blockquote>
<p>注意：每个表单都应该有自己的表单域。</p>
</blockquote>
<p>标签：</p>
<table>
<thead>
<tr>
<th>标签名</th>
<th>作用</th>
<th>具体、属性、注意</th>
</tr>
</thead>
<tbody><tr>
<td><from></td>
<td>表单域</td>
<td>建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。                                                                                                                                  格式：<form  action="提交的地址" method="提交方式" name="表单名称">   各种表单控件  </form>                                                                                                                              提交方式：get公开、post安全性高。</td>
</tr>
<tr>
<td><input  /></td>
<td>输入框控件</td>
<td>input：image图片按钮</td>
</tr>
<tr>
<td><strong>label</strong></td>
<td>为控件定义标注</td>
<td>用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点</td>
</tr>
<tr>
<td>textarea</td>
<td>文本域控件</td>
<td>用来输入大量的信息。直接给宽、高，不要用属性：cols、rows。</td>
</tr>
<tr>
<td>select</td>
<td>下拉菜单</td>
<td>注意：                                                                                                                                           1.<select></select>中至少应包含一对<option></option>。                                                             2.在option 中定义selected =” selected “时，当前项即为默认选中项。</td>
</tr>
</tbody></table>
<p>input属性：</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/inputAtt.png" alt=""></p>
<h1 id="🔺常用技巧"><a href="#🔺常用技巧" class="headerlink" title="🔺常用技巧"></a>🔺常用技巧</h1><h2 id="锚点定位（做书签）"><a href="#锚点定位（做书签）" class="headerlink" title="锚点定位（做书签）"></a>锚点定位（做书签）</h2><p>通过创建锚点链接，用户能够快速定位到目标内容。   </p>
<p>步骤1：创建锚点（被点击的）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">"#id名"</span>&gt;</span>锚点文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>步骤2：（使用锚点的id名）设置定位目标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span>第2集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="icon图标"><a href="#icon图标" class="headerlink" title="icon图标"></a>icon图标</h1><p>网页标题中的图标</p>
<ul>
<li><p>使用icon图标</p>
<p>1.先保存到根目录中</p>
<p>2.在html中的head中输入</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"shortcut icon"</span> <span class="attribute">href</span>=<span class="string">"favicon.ico"</span> <span class="attribute">type</span>=<span class="string">"image/x-icon"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>type可以省略</p>
</li>
<li><p>如何拿到别人的icon图标</p>
<p>打开域名/favicon.icon，另存为图片，名字不要改，保存到根目录</p>
</li>
</ul>
<h1 id="图标字体"><a href="#图标字体" class="headerlink" title="图标字体"></a>图标字体</h1><blockquote>
<p>电脑中字体一般放在C：//windows/fonts中</p>
<p>UI人员怎么设计的图标字体？</p>
<ul>
<li>用矢量图形软件：illustrator、Sketch </li>
<li>在软件里创建 icon图标，保存为svg图给前端。</li>
<li>前端把图（上传到某些网站或自己转换）转换成兼容性图标字体</li>
</ul>
</blockquote>
<p>网页设计中特殊的字体</p>
<ul>
<li><p>特点：</p>
<ul>
<li>本质仍是文字，可以很随意的改变颜色、产生阴影、透明效果等</li>
<li>可以做出跟图片一样可以做的事情,改变透明度、旋转度等</li>
</ul>
</li>
</ul>
<h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h2><blockquote>
<p>注意：icomoon文件夹不能丢</p>
</blockquote>
<ol>
<li><p>拿图（从网上、UI设计师那。若是svg格式，转换成字体：上传到某些网站转换   或  自己转换）</p>
</li>
<li><p>引入</p>
<ol>
<li><p>把fonts文件夹放入网站目录中。</p>
</li>
<li><p>在样式里声明字体：粘贴固定的格式</p>
</li>
<li><p>先复制fonts目录下的demo.html中图标字体下的方框图片或</p>
<p>代码如i::before{content:       “\e900”;}，</p>
<p>再给标签使用字体font-family。</p>
</li>
</ol>
</li>
<li><p>怎么追加新图标到原来的库里面？</p>
</li>
</ol>
<p>把原icomoon文件夹里面的selection.json 重新上传，选yes。</p>
<p>然后，选中新图标，重新下载压缩包，替换原来文件即可。</p>
<h2 id="推荐网站"><a href="#推荐网站" class="headerlink" title="推荐网站"></a>推荐网站</h2><p>1.推荐网站： <a href="http://icomoon.io" target="_blank" rel="noopener">http://icomoon.io</a></p>
<p><strong>icomoon</strong>字库 <strong>最提倡使用！</strong></p>
<p>IcoMoon成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p>
<p>使用：①点iconmoon app</p>
<p>②</p>
<p><img src="https://raw.githubusercontent.com/hongbinxie/pic-bad/master/img/iconfont1.png" alt=""></p>
<p>2.推荐网站： <a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></p>
<p><strong>icon font字库</strong></p>
<p><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></p>
<p>这个是阿里妈妈M2UX的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！</p>
<p><strong>fontello</strong></p>
<p><a href="http://fontello.com/" target="_blank" rel="noopener">http://fontello.com/</a></p>
<p>在线定制你自己的icon font字体图标字库，也可以直接从GitHub下载整个图标集，该项目也是开源的。</p>
<p><strong>Font-Awesome</strong></p>
<p><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="noopener">http://fortawesome.github.io/Font-Awesome/</a></p>
<p>这是我最喜欢的字库之一了，更新比较快。目前已经有369个图标了。</p>
<p><strong>Glyphicon Halflings</strong></p>
<p><a href="http://glyphicons.com/" target="_blank" rel="noopener">http://glyphicons.com/</a></p>
<p>这个字体图标可以在Bootstrap下免费使用。自带了200多个图标。</p>
<p><strong>Icons8</strong></p>
<p><a href="https://icons8.com/" target="_blank" rel="noopener">https://icons8.com/</a></p>
<p>提供PNG免费下载，像素大能到500PX</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack笔记</title>
    <url>/2020/03/11/Webpack%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>一定要有<strong>看文档</strong>的习惯。避免<strong>版本升级</strong>后不懂用的情况、可以看其它配置啥的</p>
<a id="more"></a>

<p>./同级、../上级。在Node中路径是路由形式/…，不写后缀。这不一样，一定别混淆</p>
<p>学习基本用法，看得懂就可以了。公司不需要自己去配，因为后面的脚手架基本基于webpack去开发，如vue，它的脚手架是直接配置好的，能看得懂能调试就好了</p>
<p>并且一定要知道打包的目录，因为若上传到服务器上，路径都要换，注意入口和<strong>出口的路径</strong>。</p>
<p>建议经常去github上逛逛，比如搜zepto，能看到它的引入方式：下载、在哪个目录、怎么去引。</p>
<h2 id="webpack介绍"><a href="#webpack介绍" class="headerlink" title="webpack介绍"></a>webpack介绍</h2><p>先去官网看文档，看版本、概念（官方介绍）。</p>
<blockquote>
<p>这里讲的是4.x版本</p>
</blockquote>
<p>是什么？</p>
<p>一个模态模块(html、js、css、image)的打包器</p>
<p>能干什么？</p>
<p>模块化打包。</p>
<blockquote>
<p>1.网站打包成什么样？</p>
<p>css、html、js变成一行(把多余的空格和回车都给压缩了)</p>
<p>去除注释</p>
<p>去除引号</p>
<p>（现在很多框架都是基于webpack做的。即开发时是整洁的，开发之后就要打包成这样。）</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>前提：安装了node、npm。</p>
<p>3.x全局安装只用npm install webpack -g</p>
<p>而4.x多了个cli脚手架</p>
</blockquote>
<p>（1）全局安装：用npm或cnpm安装</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">//<span class="number">2</span>个分别安装：</span><br><span class="line">npm <span class="keyword">install</span> webpack -g</span><br><span class="line">npm <span class="keyword">install</span> webpack-cli -g</span><br></pre></td></tr></table></figure>

<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//或2个一起安装：</span></span><br><span class="line">npm install webpack webpack-<span class="keyword">cli</span> -<span class="keyword">g</span></span><br></pre></td></tr></table></figure>

<p>2.初始化项目，生成package.json：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> init</span><br></pre></td></tr></table></figure>

<p>进入项目目录，局部安装：会生成node_modules</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> webpack -S</span><br><span class="line">npm <span class="keyword">install</span> webpack-cli -S</span><br></pre></td></tr></table></figure>

<h2 id="简单的只打包js"><a href="#简单的只打包js" class="headerlink" title="简单的只打包js"></a>简单的只打包js</h2><blockquote>
<p>3.x版本命令: webpack a.js b.js 把a打包成b</p>
<p>而4.x版本中，cli（脚手架）有个</p>
<p>默认entry：    src/index.js</p>
<p>默认output：    dist/main.js</p>
</blockquote>
<p>1.在项目目录下，要创建默认入口src/index.js，在入口文件写代码</p>
<p>2.cmd中输入<strong>打包命令：webpack</strong></p>
<p>会自动生成默认出口</p>
<blockquote>
<p>注意：main.js会默认变成生产环境的代码：变成一行。</p>
</blockquote>
<p>从生产环境代码-&gt;开发环境代码的打包命令（也叫<strong>未压缩打包命令）：webpack –mode development</strong></p>
<h2 id="webpack四大核心"><a href="#webpack四大核心" class="headerlink" title="webpack四大核心"></a>webpack四大核心</h2><p>四个核心概念：入口（entry）、出口（output）、loader加载程序、插件（plugins）</p>
<p>loader:能让webpack去打包非js文件；插件：有效地打包或压缩css、js、html、图片等。一般loader和插件配合使用</p>
<h2 id="进行能打包js、css、html、图片等的配置"><a href="#进行能打包js、css、html、图片等的配置" class="headerlink" title="进行能打包js、css、html、图片等的配置"></a>进行能打包js、css、html、图片等的配置</h2><blockquote>
<p>若看不懂在官网文档中的概念里有详细配置过程。</p>
</blockquote>
<ol>
<li><p>webpack本身是打包js的，但若想要打包其它的：必须要进行相关<strong>配置</strong></p>
</li>
<li><p>配置：</p>
</li>
</ol>
<blockquote>
<p>先了解四个核心概念：入口（entry）、出口（output）、loader加载程序、插件（plugins）</p>
<p>loader:能让webpack去打包非js文件；插件：有效地打包或压缩css、js、html、图片等。一般loader和插件配合使用</p>
</blockquote>
<p>（1）在项目目录里命名配置文件：webpack.config.js。在里面去配置</p>
<p>（2）配置便捷的非压缩打包命令：</p>
<p>在package.json里可以去配置。配置好就可npm start或npm run start或把start换成其它的。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">"scirpt"</span>:&#123;	<span class="string">//</span>找到改位置</span><br><span class="line">	<span class="string">...</span></span><br><span class="line">	<span class="string">"start"</span>: <span class="string">"webpack --mode development"</span>	<span class="string">//</span>这儿start可以随便写</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>（3）配置默认入口、出口。之后打包命令依然是webpack</p>
<blockquote>
<p>src:开发阶段（写代码）。里面有如index.html、index.js、style.css、1.png等</p>
<p>public:生产阶段（项目要上线）。里面有跟上面一样文件，只不过压缩了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = require(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">	entry: <span class="string">'./src/index.js'</span>,	<span class="comment">//路径，可以改</span></span><br><span class="line">	output:&#123;</span><br><span class="line">		path: path.resolve(__dirname, <span class="string">'public'</span>),	<span class="comment">//路径，可以改</span></span><br><span class="line">    	filename: <span class="string">'bundle.js'</span>	<span class="comment">//打包后生成什么js</span></span><br><span class="line">	&#125;	</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>（4）</p>
<h3 id="配置本地服务器"><a href="#配置本地服务器" class="headerlink" title="配置本地服务器"></a>配置本地服务器</h3><p>1）安装：npm install webpack-dev-server -S</p>
<p>2）在webpack.config.js配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = require(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">	entry: <span class="string">'./src/index.js'</span>,	<span class="comment">//路径，可以改</span></span><br><span class="line">	output:&#123;</span><br><span class="line">		path: path.resolve(__dirname, <span class="string">'public'</span>),	<span class="comment">//路径，可以改</span></span><br><span class="line">    	filename: <span class="string">'bundle.js'</span>	<span class="comment">//打包后生成什么js。这儿也可以加hash：bundle-[hash].js,给个随机hash值。但每次改动入口的.js，会重新给hash值，后面会说到插件会自动去拿hash值</span></span><br><span class="line">	&#125;,	</span><br><span class="line">    devServer:&#123;	<span class="comment">//配置服务器</span></span><br><span class="line">    	contentBase:<span class="string">"./public"</span>,	<span class="comment">//选择本地服务器路径</span></span><br><span class="line">    	inline:<span class="keyword">true</span>	<span class="comment">//代码实时刷新</span></span><br><span class="line">    	<span class="comment">//post:"",	//选择端口，默认的为8080。</span></span><br><span class="line">    	<span class="comment">//hot:</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>3）在package.json配置便捷的运行命令:npm dev或npm run dev。原来命令：webpack-dev-server</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">"dev": "webpack-dev-server --open --inline"	//<span class="keyword">open</span>表示自动打开，<span class="keyword">inline</span>表示代码实时刷新</span><br></pre></td></tr></table></figure>

<p>4）在本地服务器目录下新建个index.html，引入出口文件bundle.js。</p>
<p>注意：如果要改index.html中的内容，都是<strong>到入口文件src/index.js里改</strong>。改完等一等，有点慢</p>
<p>（之前用浏览器访问是显示本地服务器的目录浏览，现在则是显示index.html）</p>
<p>（5）</p>
<h3 id="配置loader"><a href="#配置loader" class="headerlink" title="配置loader"></a>配置loader</h3><p>（loader有很多，需要用时去查）loader列表：<a href="https://blog.csdn.net/keliyxyz/article/details/51649429" target="_blank" rel="noopener">https://blog.csdn.net/keliyxyz/article/details/51649429</a></p>
<p>这儿我们要引入css文件，在index.html中写import’../css/style.css’;</p>
<p>引入css需要style-loader和css-loader，而如果<strong>css想引用图片</strong>还需file-loader</p>
<p>1)下载：npm install style-loader css-loader -S、npm install file-loader -S</p>
<p>2)配置：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">module</span>:&#123;</span><br><span class="line">		</span><br><span class="line">		rules:[</span><br><span class="line">			&#123;<span class="comment">//还可以options、结合插件去用，后面说。</span></span><br><span class="line">				test:<span class="regexp">/\.css$/</span>,	<span class="comment">//打包文件的后缀。正则，\.代表转义.</span></span><br><span class="line">				use: [<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]	<span class="comment">//要配置全,否则无效</span></span><br><span class="line">			&#125;,</span><br><span class="line">			&#123;</span><br><span class="line">				test:<span class="regexp">/\.(jpg|png|jpeg)$/</span>,	<span class="comment">//打包文件的后缀,里面还可写</span></span><br><span class="line">				use: <span class="string">'file-loader'</span>	<span class="comment">//要配置全,否则无效</span></span><br><span class="line">			&#125;</span><br><span class="line">		]</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>配置完打包测试下。</p>
<p>（6）</p>
<h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><blockquote>
<p>src:开发阶段（写代码）。里面有如index.html、index.js、style.css、1.png等</p>
<p>public:生产阶段（项目要上线）。里面有跟上面一样文件，只不过压缩了</p>
</blockquote>
<p>要进行更多插件的配置，就去搜索该插件。</p>
<p>要打包html，就需要html-webpack-plugin。要查看更多配置<a href="https://www.npmjs.com/package/html-webpack-tags-plugin" target="_blank" rel="noopener">https://www.npmjs.com/package/html-webpack-tags-plugin</a></p>
<p>1)下载：npm install html-webpack-plugin -S</p>
<p>2)配置（webpack.config.js）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);	<span class="comment">//1.引入插件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	...</span><br><span class="line">	plugins:[	<span class="number">2.</span>写配置</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">			template:<span class="string">"./src/index.html"</span>	<span class="comment">//若无参则不会打包对应内容。模板参数</span></span><br><span class="line">			<span class="comment">//filename:"a.html"	//可以给过来的index.html改名称</span></span><br><span class="line">			minify:&#123;	<span class="comment">//重要，缩小</span></span><br><span class="line">				removeAttributeQuotes:<span class="literal">true</span>,<span class="comment">//去除引号</span></span><br><span class="line">				removeComments:<span class="literal">true</span>,<span class="comment">//去除注释</span></span><br><span class="line">	          	removeEmptyAttributes:<span class="literal">true</span>,<span class="comment">//去除空属性</span></span><br><span class="line">	          	collapseWhitespace:<span class="literal">true</span><span class="comment">//去除空格</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		</span><br><span class="line">	]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="其它loader——HTML的img标记"><a href="#其它loader——HTML的img标记" class="headerlink" title="其它loader——HTML的img标记"></a>其它loader——HTML的img标记</h2><p>html-withimg-loader    让html支持图片</p>
<p>1.下载（安装）：npm install html-withimg-loader -S</p>
<p>2.配置（webpack.config.js）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attribute">test</span>:/\.html$/,	//打包文件的后缀</span><br><span class="line">	use: <span class="string">'html-withimg-loader'</span>	//要配置全,否则无效</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字体图标和把打包文件放入文件夹"><a href="#字体图标和把打包文件放入文件夹" class="headerlink" title="字体图标和把打包文件放入文件夹"></a>字体图标和把打包文件放入文件夹</h2><p>这儿我们去bootstrap拿字体图标：引入bootstrap，添加<i class="字体图标的类"></i>，然后测试下，报错，从这可以拿到字体图标常用的后缀</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	test:/\.(<span class="name">woff</span>|ttf|svg|eot|xttf|woff2)$/,	//打包文件的后缀</span><br><span class="line">	use: 'file-loader?limit=1024&amp;name=./fonts/[names].[ext]'	//要配置全,否则无效。加参数:先?后参数：限制大小、定义路径和名称(<span class="name">names</span>代表原名,ext代表原后缀)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="提取分离CSS"><a href="#提取分离CSS" class="headerlink" title="提取分离CSS"></a>提取分离CSS</h2><p>之前已经给出口文件建好了各自目录：img、js、fonts。这儿要建css。有几个坑</p>
<p>1.css提取</p>
<p>插件：extract-text-webpack-plugin</p>
<p>下载：npm install extract-text-webpack-plugin<strong>@next</strong> -S</p>
<p>配置：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> 	EXtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);<span class="comment">//1.引入</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	rules:[</span><br><span class="line">		&#123;<span class="comment">//还可以options、结合插件去用，后面说。</span></span><br><span class="line">			test:<span class="regexp">/\.css$/</span>,	<span class="comment">//打包文件的后缀。正则，\.代表转义.</span></span><br><span class="line">			use:EXtractTextPlugin.extract(&#123;		<span class="comment">//把之前的use: ['style-loader','css-loader']改了</span></span><br><span class="line">				</span><br><span class="line">				fallback:<span class="string">"style-loader"</span>,</span><br><span class="line">				use:[&#123;</span><br><span class="line">                    loader:<span class="string">'css-loader'</span>,</span><br><span class="line">                    options:&#123;</span><br><span class="line">                      minimize:<span class="literal">true</span>	<span class="comment">//css压缩</span></span><br><span class="line">                    &#125;</span><br><span class="line">           	 	&#125;],</span><br><span class="line">                publicPath:<span class="string">"../"</span>	<span class="comment">//测试后会发现img目录跑到css目录了，要配这个</span></span><br><span class="line">			&#125;)	</span><br><span class="line">		&#125;,</span><br><span class="line">		...</span><br><span class="line">	],</span><br><span class="line">	plugins:[</span><br><span class="line">		<span class="keyword">new</span> EXtractTextPlugin(<span class="string">'./CSS/[name].css'</span>),	<span class="comment">//2.配置1</span></span><br><span class="line">		...</span><br><span class="line">	]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="配置babel"><a href="#配置babel" class="headerlink" title="配置babel"></a>配置babel</h2><p>核心：babel-core</p>
<p>功能：babel-loader</p>
<p>​            babel-preset-env</p>
<p>​            babel-preset-react    支持jsx语法</p>
<p>1.安装（下载）        </p>
<p>​    npm install babel-core babel-loader babel-preset-env babel-preset-react -S</p>
<p>2.配置（2种方法）</p>
<p>方法1：在webpack.config.js里配置（不建议。babel-loader依赖少时才这样）</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:<span class="regexp">/(\.jsx|\.js)$/</span>,</span><br><span class="line">    use:&#123;</span><br><span class="line">      	loader:<span class="string">"babel-loader"</span>,</span><br><span class="line">     	<span class="keyword">options</span>:&#123;</span><br><span class="line">     		presets:[<span class="string">"env"</span>,<span class="string">'react'</span>]		<span class="comment">//添加功能</span></span><br><span class="line">     	&#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="keyword">exclude</span>:<span class="regexp">/node_modules/</span>		<span class="comment">//别包含：node_modules。其它的都要ES6转成ES5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法2：（建议。因为你不知道有多少依赖要添加）</p>
<p>先在webpack.config.js里简单配置</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="symbol">    test:</span>/(\.jsx|\.js)$/,</span><br><span class="line"><span class="symbol">    use:</span>&#123;</span><br><span class="line"><span class="symbol">      	loader:</span><span class="string">"babel-loader"</span></span><br><span class="line">     &#125;,</span><br><span class="line"><span class="symbol">    exclude:</span>/node_modules/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还要在项目目录下新建与node_modules等同级的文件——.babelrc文件，里面配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="attr">"presets"</span>:[<span class="string">"env"</span>,'react']	<span class="comment">//添加功能</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引入第三方库文件"><a href="#引入第三方库文件" class="headerlink" title="引入第三方库文件"></a>引入第三方库文件</h2><p>如jQuery、Bootstrap</p>
<p>1.安装：npm install jquery -S    默认下最新版，若想下其它版本，后面加个@版本号</p>
<p>2.引入：在入口index.js里需要引入，如写import $ from ‘jquery’</p>
<h2 id="常用loader"><a href="#常用loader" class="headerlink" title="常用loader"></a>常用loader</h2><p>style-loader和css-loader    打包css</p>
<p>file-loader                              让css支持图片；打包字体图标</p>
<p>html-withimg-loader            让html支持图片</p>
<p>babel-loader                          把ES6转换成ES5语法</p>
<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><p>html-webpack-plugin    打包html</p>
<p>extract-text-webpack-plugin    提取分离css</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>我的学习进度</title>
    <url>/2020/03/11/%E8%BD%AF%E4%BB%B6%E6%96%B9%E5%90%91%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><h2 id="界面开发"><a href="#界面开发" class="headerlink" title="界面开发"></a>界面开发</h2><p>html、css、js、jQuery、H5、C3、微信小程序</p>
<a id="more"></a>

<h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><p>ajax</p>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>Node</p>
<p>PHP</p>
<p>python</p>
<p>java</p>
<h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><h2 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h2><p>Bootstrap</p>
<h2 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h2><p>vue</p>
<h2 id="后端框架"><a href="#后端框架" class="headerlink" title="后端框架"></a>后端框架</h2><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>git</p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>MySQL</p>
<p>oracle</p>
<p>mongdb</p>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h2 id="WPcms建站"><a href="#WPcms建站" class="headerlink" title="WPcms建站"></a>WPcms建站</h2><h2 id="DEDEcms建站"><a href="#DEDEcms建站" class="headerlink" title="DEDEcms建站"></a>DEDEcms建站</h2><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h2 id="其它博客"><a href="#其它博客" class="headerlink" title="其它博客"></a>其它博客</h2>]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>技术栈</tag>
      </tags>
  </entry>
</search>
